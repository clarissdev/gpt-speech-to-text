"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@livekit+components-core@0.11.9_livekit-client@2.5.9_tslib@2.7.0";
exports.ids = ["vendor-chunks/@livekit+components-core@0.11.9_livekit-client@2.5.9_tslib@2.7.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-core@0.11.9_livekit-client@2.5.9_tslib@2.7.0/node_modules/@livekit/components-core/dist/index.mjs":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-core@0.11.9_livekit-client@2.5.9_tslib@2.7.0/node_modules/@livekit/components-core/dist/index.mjs ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataTopic: () => (/* binding */ DataTopic),\n/* harmony export */   GRID_LAYOUTS: () => (/* binding */ GRID_LAYOUTS),\n/* harmony export */   PIN_DEFAULT_STATE: () => (/* binding */ PIN_DEFAULT_STATE),\n/* harmony export */   WIDGET_DEFAULT_STATE: () => (/* binding */ WIDGET_DEFAULT_STATE),\n/* harmony export */   activeSpeakerObserver: () => (/* binding */ activeSpeakerObserver),\n/* harmony export */   addMediaTimestampToTranscription: () => (/* binding */ addMediaTimestampToTranscription),\n/* harmony export */   allParticipantEvents: () => (/* binding */ allParticipantEvents),\n/* harmony export */   allParticipantRoomEvents: () => (/* binding */ allParticipantRoomEvents),\n/* harmony export */   allRemoteParticipantEvents: () => (/* binding */ allRemoteParticipantEvents),\n/* harmony export */   allRemoteParticipantRoomEvents: () => (/* binding */ allRemoteParticipantRoomEvents),\n/* harmony export */   attachIfSubscribed: () => (/* binding */ attachIfSubscribed),\n/* harmony export */   computeMenuPosition: () => (/* binding */ computeMenuPosition),\n/* harmony export */   connectedParticipantObserver: () => (/* binding */ connectedParticipantObserver),\n/* harmony export */   connectedParticipantsObserver: () => (/* binding */ connectedParticipantsObserver),\n/* harmony export */   connectionStateObserver: () => (/* binding */ connectionStateObserver),\n/* harmony export */   createActiveDeviceObservable: () => (/* binding */ createActiveDeviceObservable),\n/* harmony export */   createChatObserver: () => (/* binding */ createChatObserver),\n/* harmony export */   createConnectionQualityObserver: () => (/* binding */ createConnectionQualityObserver),\n/* harmony export */   createDataObserver: () => (/* binding */ createDataObserver),\n/* harmony export */   createDefaultGrammar: () => (/* binding */ createDefaultGrammar),\n/* harmony export */   createEmailRegExp: () => (/* binding */ createEmailRegExp),\n/* harmony export */   createInteractingObservable: () => (/* binding */ createInteractingObservable),\n/* harmony export */   createIsSpeakingObserver: () => (/* binding */ createIsSpeakingObserver),\n/* harmony export */   createMediaDeviceObserver: () => (/* binding */ createMediaDeviceObserver),\n/* harmony export */   createTrackObserver: () => (/* binding */ createTrackObserver),\n/* harmony export */   createUrlRegExp: () => (/* binding */ createUrlRegExp),\n/* harmony export */   cssPrefix: () => (/* binding */ cssPrefix),\n/* harmony export */   dedupeSegments: () => (/* binding */ dedupeSegments),\n/* harmony export */   defaultUserChoices: () => (/* binding */ defaultUserChoices),\n/* harmony export */   didActiveSegmentsChange: () => (/* binding */ didActiveSegmentsChange),\n/* harmony export */   encryptionStatusObservable: () => (/* binding */ encryptionStatusObservable),\n/* harmony export */   getActiveTranscriptionSegments: () => (/* binding */ getActiveTranscriptionSegments),\n/* harmony export */   getScrollBarWidth: () => (/* binding */ getScrollBarWidth),\n/* harmony export */   getTrackByIdentifier: () => (/* binding */ getTrackByIdentifier),\n/* harmony export */   getTrackReferenceId: () => (/* binding */ getTrackReferenceId),\n/* harmony export */   getTrackReferenceSource: () => (/* binding */ getTrackReferenceSource),\n/* harmony export */   isEqualTrackRef: () => (/* binding */ isEqualTrackRef),\n/* harmony export */   isLocal: () => (/* binding */ isLocal),\n/* harmony export */   isMobileBrowser: () => (/* binding */ isMobileBrowser),\n/* harmony export */   isParticipantTrackReferencePinned: () => (/* binding */ isParticipantTrackReferencePinned),\n/* harmony export */   isPlaceholderReplacement: () => (/* binding */ isPlaceholderReplacement),\n/* harmony export */   isRemote: () => (/* binding */ isRemote),\n/* harmony export */   isSourceWitOptions: () => (/* binding */ isSourceWitOptions),\n/* harmony export */   isSourcesWithOptions: () => (/* binding */ isSourcesWithOptions),\n/* harmony export */   isTrackReference: () => (/* binding */ isTrackReference),\n/* harmony export */   isTrackReferencePinned: () => (/* binding */ isTrackReferencePinned),\n/* harmony export */   isTrackReferencePlaceholder: () => (/* binding */ isTrackReferencePlaceholder),\n/* harmony export */   isWeb: () => (/* binding */ isWeb),\n/* harmony export */   loadUserChoices: () => (/* binding */ loadUserChoices),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   mutedObserver: () => (/* binding */ mutedObserver),\n/* harmony export */   observeParticipantEvents: () => (/* binding */ observeParticipantEvents),\n/* harmony export */   observeParticipantMedia: () => (/* binding */ observeParticipantMedia),\n/* harmony export */   observeRoomEvents: () => (/* binding */ observeRoomEvents),\n/* harmony export */   observeTrackEvents: () => (/* binding */ observeTrackEvents),\n/* harmony export */   participantAttributesObserver: () => (/* binding */ participantAttributesObserver),\n/* harmony export */   participantByIdentifierObserver: () => (/* binding */ participantByIdentifierObserver),\n/* harmony export */   participantEventSelector: () => (/* binding */ participantEventSelector),\n/* harmony export */   participantInfoObserver: () => (/* binding */ participantInfoObserver),\n/* harmony export */   participantPermissionObserver: () => (/* binding */ participantPermissionObserver),\n/* harmony export */   participantTrackEvents: () => (/* binding */ participantTrackEvents),\n/* harmony export */   participantTracksObservable: () => (/* binding */ participantTracksObservable),\n/* harmony export */   recordingStatusObservable: () => (/* binding */ recordingStatusObservable),\n/* harmony export */   roomAudioPlaybackAllowedObservable: () => (/* binding */ roomAudioPlaybackAllowedObservable),\n/* harmony export */   roomEventSelector: () => (/* binding */ roomEventSelector),\n/* harmony export */   roomInfoObserver: () => (/* binding */ roomInfoObserver),\n/* harmony export */   roomObserver: () => (/* binding */ roomObserver),\n/* harmony export */   roomVideoPlaybackAllowedObservable: () => (/* binding */ roomVideoPlaybackAllowedObservable),\n/* harmony export */   saveUserChoices: () => (/* binding */ saveUserChoices),\n/* harmony export */   screenShareObserver: () => (/* binding */ screenShareObserver),\n/* harmony export */   selectGridLayout: () => (/* binding */ selectGridLayout),\n/* harmony export */   sendMessage: () => (/* binding */ sendMessage),\n/* harmony export */   setDifference: () => (/* binding */ setDifference),\n/* harmony export */   setLogExtension: () => (/* binding */ setLogExtension),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setupChat: () => (/* binding */ setupChat),\n/* harmony export */   setupChatMessageHandler: () => (/* binding */ setupChatMessageHandler),\n/* harmony export */   setupChatToggle: () => (/* binding */ setupChatToggle),\n/* harmony export */   setupClearPinButton: () => (/* binding */ setupClearPinButton),\n/* harmony export */   setupConnectionQualityIndicator: () => (/* binding */ setupConnectionQualityIndicator),\n/* harmony export */   setupDataMessageHandler: () => (/* binding */ setupDataMessageHandler),\n/* harmony export */   setupDeviceSelector: () => (/* binding */ setupDeviceSelector),\n/* harmony export */   setupDisconnectButton: () => (/* binding */ setupDisconnectButton),\n/* harmony export */   setupFocusToggle: () => (/* binding */ setupFocusToggle),\n/* harmony export */   setupLiveKitRoom: () => (/* binding */ setupLiveKitRoom),\n/* harmony export */   setupManualToggle: () => (/* binding */ setupManualToggle),\n/* harmony export */   setupMediaToggle: () => (/* binding */ setupMediaToggle),\n/* harmony export */   setupMediaTrack: () => (/* binding */ setupMediaTrack),\n/* harmony export */   setupParticipantName: () => (/* binding */ setupParticipantName),\n/* harmony export */   setupParticipantTile: () => (/* binding */ setupParticipantTile),\n/* harmony export */   setupStartAudio: () => (/* binding */ setupStartAudio),\n/* harmony export */   setupStartVideo: () => (/* binding */ setupStartVideo),\n/* harmony export */   setupTrackMutedIndicator: () => (/* binding */ setupTrackMutedIndicator),\n/* harmony export */   sortParticipants: () => (/* binding */ sortParticipants),\n/* harmony export */   sortTrackReferences: () => (/* binding */ sortTrackReferences),\n/* harmony export */   supportsScreenSharing: () => (/* binding */ supportsScreenSharing),\n/* harmony export */   tokenize: () => (/* binding */ tokenize),\n/* harmony export */   trackEventSelector: () => (/* binding */ trackEventSelector),\n/* harmony export */   trackObservable: () => (/* binding */ trackObservable),\n/* harmony export */   trackReferencesObservable: () => (/* binding */ trackReferencesObservable),\n/* harmony export */   trackSyncTimeObserver: () => (/* binding */ trackSyncTimeObserver),\n/* harmony export */   trackTranscriptionObserver: () => (/* binding */ trackTranscriptionObserver),\n/* harmony export */   updatePages: () => (/* binding */ updatePages),\n/* harmony export */   wasClickOutside: () => (/* binding */ wasClickOutside)\n/* harmony export */ });\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.5.9/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/./node_modules/.pnpm/@floating-ui+dom@1.6.11/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/.pnpm/loglevel@1.9.1/node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/startWith.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/switchMap.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/finalize.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/concat.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/filter.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/merge.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/scan.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/timeout.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/constants.ts\nvar cssPrefix = \"lk\";\n\n// src/utils.ts\n\n\n// src/track-reference/track-reference.types.ts\nfunction isTrackReference(trackReference) {\n  if (typeof trackReference === \"undefined\") {\n    return false;\n  }\n  return isTrackReferenceSubscribed(trackReference) || isTrackReferencePublished(trackReference);\n}\nfunction isTrackReferenceSubscribed(trackReference) {\n  var _a;\n  if (!trackReference) {\n    return false;\n  }\n  return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && trackReference.hasOwnProperty(\"track\") && typeof ((_a = trackReference.publication) == null ? void 0 : _a.track) !== \"undefined\";\n}\nfunction isTrackReferencePublished(trackReference) {\n  if (!trackReference) {\n    return false;\n  }\n  return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && trackReference.hasOwnProperty(\"publication\") && typeof trackReference.publication !== \"undefined\";\n}\nfunction isTrackReferencePlaceholder(trackReference) {\n  if (!trackReference) {\n    return false;\n  }\n  return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && typeof trackReference.publication === \"undefined\";\n}\n\n// src/track-reference/track-reference.utils.ts\nfunction getTrackReferenceId(trackReference) {\n  if (typeof trackReference === \"string\" || typeof trackReference === \"number\") {\n    return `${trackReference}`;\n  } else if (isTrackReferencePlaceholder(trackReference)) {\n    return `${trackReference.participant.identity}_${trackReference.source}_placeholder`;\n  } else if (isTrackReference(trackReference)) {\n    return `${trackReference.participant.identity}_${trackReference.publication.source}_${trackReference.publication.trackSid}`;\n  } else {\n    throw new Error(`Can't generate a id for the given track reference: ${trackReference}`);\n  }\n}\nfunction getTrackReferenceSource(trackReference) {\n  if (isTrackReference(trackReference)) {\n    return trackReference.publication.source;\n  } else {\n    return trackReference.source;\n  }\n}\nfunction isEqualTrackRef(a, b) {\n  if (a === void 0 || b === void 0) {\n    return false;\n  }\n  if (isTrackReference(a) && isTrackReference(b)) {\n    return a.publication.trackSid === b.publication.trackSid;\n  } else {\n    return getTrackReferenceId(a) === getTrackReferenceId(b);\n  }\n}\nfunction isTrackReferencePinned(trackReference, pinState) {\n  if (typeof pinState === \"undefined\") {\n    return false;\n  }\n  if (isTrackReference(trackReference)) {\n    return pinState.some(\n      (pinnedTrackReference) => pinnedTrackReference.participant.identity === trackReference.participant.identity && isTrackReference(pinnedTrackReference) && pinnedTrackReference.publication.trackSid === trackReference.publication.trackSid\n    );\n  } else if (isTrackReferencePlaceholder(trackReference)) {\n    return pinState.some(\n      (pinnedTrackReference) => pinnedTrackReference.participant.identity === trackReference.participant.identity && isTrackReferencePlaceholder(pinnedTrackReference) && pinnedTrackReference.source === trackReference.source\n    );\n  } else {\n    return false;\n  }\n}\nfunction isPlaceholderReplacement(currentTrackRef, nextTrackRef) {\n  return isTrackReferencePlaceholder(currentTrackRef) && isTrackReference(nextTrackRef) && nextTrackRef.participant.identity === currentTrackRef.participant.identity && nextTrackRef.source === currentTrackRef.source;\n}\n\n// src/utils.ts\nfunction isLocal(p) {\n  return p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant;\n}\nfunction isRemote(p) {\n  return p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.RemoteParticipant;\n}\nvar attachIfSubscribed = (publication, element) => {\n  if (!publication) return;\n  const { isSubscribed, track } = publication;\n  if (element && track) {\n    if (isSubscribed) {\n      track.attach(element);\n    } else {\n      track.detach(element);\n    }\n  }\n};\nfunction isParticipantTrackReferencePinned(trackRef, pinState) {\n  if (pinState === void 0) {\n    return false;\n  }\n  return pinState.some((pinnedTrackRef) => isEqualTrackRef(pinnedTrackRef, trackRef));\n}\nfunction getScrollBarWidth() {\n  const inner = document.createElement(\"p\");\n  inner.style.width = \"100%\";\n  inner.style.height = \"200px\";\n  const outer = document.createElement(\"div\");\n  outer.style.position = \"absolute\";\n  outer.style.top = \"0px\";\n  outer.style.left = \"0px\";\n  outer.style.visibility = \"hidden\";\n  outer.style.width = \"200px\";\n  outer.style.height = \"150px\";\n  outer.style.overflow = \"hidden\";\n  outer.appendChild(inner);\n  document.body.appendChild(outer);\n  const w1 = inner.offsetWidth;\n  outer.style.overflow = \"scroll\";\n  let w2 = inner.offsetWidth;\n  if (w1 === w2) {\n    w2 = outer.clientWidth;\n  }\n  document.body.removeChild(outer);\n  const scrollBarWidth = w1 - w2;\n  return scrollBarWidth;\n}\n\n// src/helper/detectMobileBrowser.ts\nfunction isWeb() {\n  return typeof document !== \"undefined\";\n}\nfunction isMobileBrowser() {\n  return isWeb() ? /Mobi/i.test(window.navigator.userAgent) : false;\n}\n\n// src/helper/url-regex.ts\nfunction createUrlRegExp(options) {\n  options = __spreadValues({}, options);\n  const protocol = `(?:(?:[a-z]+:)?//)?`;\n  const auth = \"(?:\\\\S+(?::\\\\S*)?@)?\";\n  const ip = new RegExp(\n    \"(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}\",\n    \"g\"\n  ).source;\n  const host = \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\";\n  const domain = \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\";\n  const tld = `(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\\\\.?`;\n  const port = \"(?::\\\\d{2,5})?\";\n  const path = '(?:[/?#][^\\\\s\"]*)?';\n  const regex2 = `(?:${protocol}|www\\\\.)${auth}(?:localhost|${ip}|${host}${domain}${tld})${port}${path}`;\n  return options.exact ? new RegExp(`(?:^${regex2}$)`, \"i\") : new RegExp(regex2, \"ig\");\n}\n\n// src/helper/emailRegex.ts\nvar regex = \"[^\\\\.\\\\s@:](?:[^\\\\s@:]*[^\\\\s@:\\\\.])?@[^\\\\.\\\\s@]+(?:\\\\.[^\\\\.\\\\s@]+)*\";\nfunction createEmailRegExp({ exact } = {}) {\n  return exact ? new RegExp(`^${regex}$`) : new RegExp(regex, \"g\");\n}\n\n// src/helper/floating-menu.ts\n\nfunction computeMenuPosition(button, menu) {\n  return __async(this, null, function* () {\n    const { x, y } = yield (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__.computePosition)(button, menu, {\n      placement: \"top\",\n      middleware: [(0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__.offset)(6), (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__.flip)(), (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__.shift)({ padding: 5 })]\n    });\n    return { x, y };\n  });\n}\nfunction wasClickOutside(insideElement, event) {\n  const isOutside = !insideElement.contains(event.target);\n  return isOutside;\n}\n\n// src/helper/tokenizer.ts\nvar createDefaultGrammar = () => {\n  return {\n    email: createEmailRegExp(),\n    url: createUrlRegExp({})\n  };\n};\nfunction tokenize(input, grammar) {\n  const matches = Object.entries(grammar).map(\n    ([type, rx], weight) => Array.from(input.matchAll(rx)).map(({ index, 0: content }) => ({\n      type,\n      weight,\n      content,\n      index: index != null ? index : 0\n    }))\n  ).flat().sort((a, b) => {\n    const d = a.index - b.index;\n    return d !== 0 ? d : a.weight - b.weight;\n  }).filter(({ index }, i, arr) => {\n    if (i === 0) return true;\n    const prev = arr[i - 1];\n    return prev.index + prev.content.length <= index;\n  });\n  const tokens = [];\n  let pos = 0;\n  for (const { type, content, index } of matches) {\n    if (index > pos) tokens.push(input.substring(pos, index));\n    tokens.push({ type, content });\n    pos = index + content.length;\n  }\n  if (input.length > pos) tokens.push(input.substring(pos));\n  return tokens;\n}\n\n// src/helper/eventGroups.ts\n\nvar allRemoteParticipantRoomEvents = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionQualityChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantPermissionsChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantNameChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantAttributesChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged\n];\nvar allParticipantRoomEvents = [\n  ...allRemoteParticipantRoomEvents,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished\n];\nvar participantTrackEvents = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n];\nvar allRemoteParticipantEvents = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n];\nvar allParticipantEvents = [\n  ...allRemoteParticipantEvents,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n];\n\n// src/logger.ts\n\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_2__.getLogger(\"lk-components-js\");\nlog.setDefaultLevel(\"WARN\");\nfunction setLogLevel(level, options = {}) {\n  var _a;\n  log.setLevel(level);\n  (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)((_a = options.liveKitClientLogLevel) != null ? _a : level);\n}\nfunction setLogExtension(extension, options = {}) {\n  var _a;\n  const originalFactory = log.methodFactory;\n  log.methodFactory = (methodName, configLevel, loggerName) => {\n    const rawMethod = originalFactory(methodName, configLevel, loggerName);\n    const logLevel = livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel[methodName];\n    const needLog = logLevel >= configLevel && logLevel < livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel.silent;\n    return (msg, context) => {\n      if (context) rawMethod(msg, context);\n      else rawMethod(msg);\n      if (needLog) {\n        extension(logLevel, msg, context);\n      }\n    };\n  };\n  log.setLevel(log.getLevel());\n  (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogExtension)((_a = options.liveKitClientLogExtension) != null ? _a : extension);\n}\n\n// src/helper/grid-layouts.ts\nvar GRID_LAYOUTS = [\n  {\n    columns: 1,\n    rows: 1\n  },\n  {\n    columns: 1,\n    rows: 2,\n    orientation: \"portrait\"\n  },\n  {\n    columns: 2,\n    rows: 1,\n    orientation: \"landscape\"\n  },\n  {\n    columns: 2,\n    rows: 2,\n    minWidth: 560\n  },\n  {\n    columns: 3,\n    rows: 3,\n    minWidth: 700\n  },\n  {\n    columns: 4,\n    rows: 4,\n    minWidth: 960\n  },\n  {\n    columns: 5,\n    rows: 5,\n    minWidth: 1100\n  }\n];\nfunction selectGridLayout(layoutDefinitions, participantCount, width, height) {\n  if (layoutDefinitions.length < 1) {\n    throw new Error(\"At least one grid layout definition must be provided.\");\n  }\n  const layouts = expandAndSortLayoutDefinitions(layoutDefinitions);\n  if (width <= 0 || height <= 0) {\n    return layouts[0];\n  }\n  let currentLayoutIndex = 0;\n  const containerOrientation = width / height > 1 ? \"landscape\" : \"portrait\";\n  let layout = layouts.find((layout_, index, allLayouts) => {\n    currentLayoutIndex = index;\n    const isBiggerLayoutAvailable = allLayouts.findIndex((l, i) => {\n      const fitsOrientation = !l.orientation || l.orientation === containerOrientation;\n      const layoutIsBiggerThanCurrent = i > index;\n      const layoutFitsSameAmountOfParticipants = l.maxTiles === layout_.maxTiles;\n      return layoutIsBiggerThanCurrent && layoutFitsSameAmountOfParticipants && fitsOrientation;\n    }) !== -1;\n    return layout_.maxTiles >= participantCount && !isBiggerLayoutAvailable;\n  });\n  if (layout === void 0) {\n    layout = layouts[layouts.length - 1];\n    if (layout) {\n      log.warn(\n        `No layout found for: participantCount: ${participantCount}, width/height: ${width}/${height} fallback to biggest available layout (${layout}).`\n      );\n    } else {\n      throw new Error(`No layout or fallback layout found.`);\n    }\n  }\n  if (width < layout.minWidth || height < layout.minHeight) {\n    if (currentLayoutIndex > 0) {\n      const smallerLayout = layouts[currentLayoutIndex - 1];\n      layout = selectGridLayout(\n        layouts.slice(0, currentLayoutIndex),\n        smallerLayout.maxTiles,\n        width,\n        height\n      );\n    }\n  }\n  return layout;\n}\nfunction expandAndSortLayoutDefinitions(layouts) {\n  return [...layouts].map((layout) => {\n    var _a, _b;\n    return {\n      name: `${layout.columns}x${layout.rows}`,\n      columns: layout.columns,\n      rows: layout.rows,\n      maxTiles: layout.columns * layout.rows,\n      minWidth: (_a = layout.minWidth) != null ? _a : 0,\n      minHeight: (_b = layout.minHeight) != null ? _b : 0,\n      orientation: layout.orientation\n    };\n  }).sort((a, b) => {\n    if (a.maxTiles !== b.maxTiles) {\n      return a.maxTiles - b.maxTiles;\n    } else if (a.minWidth !== 0 || b.minWidth !== 0) {\n      return a.minWidth - b.minWidth;\n    } else if (a.minHeight !== 0 || b.minHeight !== 0) {\n      return a.minHeight - b.minHeight;\n    } else {\n      return 0;\n    }\n  });\n}\n\n// src/helper/set-helper.ts\nfunction setDifference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\n\n// src/helper/featureDetection.ts\nfunction supportsScreenSharing() {\n  return typeof navigator !== \"undefined\" && navigator.mediaDevices && !!navigator.mediaDevices.getDisplayMedia;\n}\n\n// src/helper/transcriptions.ts\nfunction getActiveTranscriptionSegments(segments, syncTimes, maxAge = 0) {\n  return segments.filter((segment) => {\n    var _a;\n    const hasTrackSync = !!syncTimes.rtpTimestamp;\n    const currentTrackTime = (_a = syncTimes.rtpTimestamp) != null ? _a : performance.timeOrigin + performance.now();\n    const displayStartTime = hasTrackSync ? Math.max(segment.receivedAtMediaTimestamp, segment.startTime) : segment.receivedAt;\n    const segmentDuration = maxAge + segment.endTime - segment.startTime;\n    return currentTrackTime >= displayStartTime && currentTrackTime <= displayStartTime + segmentDuration;\n  });\n}\nfunction addMediaTimestampToTranscription(segment, timestamps) {\n  var _a;\n  return __spreadProps(__spreadValues({}, segment), {\n    receivedAtMediaTimestamp: (_a = timestamps.rtpTimestamp) != null ? _a : 0,\n    receivedAt: timestamps.timestamp\n  });\n}\nfunction dedupeSegments(prevSegments, newSegments, windowSize) {\n  return [...prevSegments, ...newSegments].reduceRight((acc, segment) => {\n    if (!acc.find((val) => val.id === segment.id)) {\n      acc.unshift(segment);\n    }\n    return acc;\n  }, []).slice(0 - windowSize);\n}\nfunction didActiveSegmentsChange(prevActive, newActive) {\n  if (newActive.length !== prevActive.length) {\n    return true;\n  }\n  return !newActive.every((newSegment) => {\n    return prevActive.find(\n      (prevSegment) => prevSegment.id === newSegment.id && prevSegment.text === newSegment.text && prevSegment.final === newSegment.final && prevSegment.language === newSegment.language && prevSegment.startTime === newSegment.startTime && prevSegment.endTime === newSegment.endTime\n    );\n  });\n}\n\n// src/types.ts\nvar PIN_DEFAULT_STATE = [];\nvar WIDGET_DEFAULT_STATE = {\n  showChat: false,\n  unreadMessages: 0,\n  showSettings: false\n};\nfunction isSourceWitOptions(source) {\n  return typeof source === \"object\";\n}\nfunction isSourcesWithOptions(sources) {\n  return Array.isArray(sources) && sources.filter(isSourceWitOptions).length > 0;\n}\n\n// src/sorting/sort-track-bundles.ts\n\n\n// src/sorting/base-sort-functions.ts\n\nfunction sortParticipantsByAudioLevel(a, b) {\n  return b.audioLevel - a.audioLevel;\n}\nfunction sortParticipantsByIsSpeaking(a, b) {\n  if (a.isSpeaking === b.isSpeaking) {\n    return 0;\n  } else {\n    return a.isSpeaking ? -1 : 1;\n  }\n}\nfunction sortParticipantsByLastSpokenAT(a, b) {\n  var _a, _b, _c, _d;\n  if (a.lastSpokeAt !== void 0 || b.lastSpokeAt !== void 0) {\n    return ((_b = (_a = b.lastSpokeAt) == null ? void 0 : _a.getTime()) != null ? _b : 0) - ((_d = (_c = a.lastSpokeAt) == null ? void 0 : _c.getTime()) != null ? _d : 0);\n  } else {\n    return 0;\n  }\n}\nfunction sortParticipantsByJoinedAt(a, b) {\n  var _a, _b, _c, _d;\n  return ((_b = (_a = a.joinedAt) == null ? void 0 : _a.getTime()) != null ? _b : 0) - ((_d = (_c = b.joinedAt) == null ? void 0 : _c.getTime()) != null ? _d : 0);\n}\nfunction sortTrackReferencesByType(a, b) {\n  if (isTrackReference(a)) {\n    if (isTrackReference(b)) {\n      return 0;\n    } else {\n      return -1;\n    }\n  } else if (isTrackReference(b)) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\nfunction sortTrackRefsByIsCameraEnabled(a, b) {\n  const aVideo = a.participant.isCameraEnabled;\n  const bVideo = b.participant.isCameraEnabled;\n  if (aVideo !== bVideo) {\n    if (aVideo) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return 0;\n  }\n}\n\n// src/sorting/sort-track-bundles.ts\nfunction sortTrackReferences(tracks) {\n  const localTracks = [];\n  const screenShareTracks = [];\n  const cameraTracks = [];\n  const undefinedTracks = [];\n  tracks.forEach((trackRef) => {\n    if (trackRef.participant.isLocal && trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera) {\n      localTracks.push(trackRef);\n    } else if (trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare) {\n      screenShareTracks.push(trackRef);\n    } else if (trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera) {\n      cameraTracks.push(trackRef);\n    } else {\n      undefinedTracks.push(trackRef);\n    }\n  });\n  const sortedScreenShareTracks = sortScreenShareTracks(screenShareTracks);\n  const sortedCameraTracks = sortCameraTracks(cameraTracks);\n  return [...localTracks, ...sortedScreenShareTracks, ...sortedCameraTracks, ...undefinedTracks];\n}\nfunction sortScreenShareTracks(screenShareTracks) {\n  const localScreenShares = [];\n  const remoteScreenShares = [];\n  screenShareTracks.forEach((trackRef) => {\n    if (trackRef.participant.isLocal) {\n      localScreenShares.push(trackRef);\n    } else {\n      remoteScreenShares.push(trackRef);\n    }\n  });\n  localScreenShares.sort((a, b) => sortParticipantsByJoinedAt(a.participant, b.participant));\n  remoteScreenShares.sort((a, b) => sortParticipantsByJoinedAt(a.participant, b.participant));\n  const sortedScreenShareTrackRefs = [...remoteScreenShares, ...localScreenShares];\n  return sortedScreenShareTrackRefs;\n}\nfunction sortCameraTracks(cameraTrackReferences) {\n  const localCameraTracks = [];\n  const remoteCameraTracks = [];\n  cameraTrackReferences.forEach((trackRef) => {\n    if (trackRef.participant.isLocal) {\n      localCameraTracks.push(trackRef);\n    } else {\n      remoteCameraTracks.push(trackRef);\n    }\n  });\n  remoteCameraTracks.sort((a, b) => {\n    if (a.participant.isSpeaking && b.participant.isSpeaking) {\n      return sortParticipantsByAudioLevel(a.participant, b.participant);\n    }\n    if (a.participant.isSpeaking !== b.participant.isSpeaking) {\n      return sortParticipantsByIsSpeaking(a.participant, b.participant);\n    }\n    if (a.participant.lastSpokeAt !== b.participant.lastSpokeAt) {\n      return sortParticipantsByLastSpokenAT(a.participant, b.participant);\n    }\n    if (isTrackReference(a) !== isTrackReference(b)) {\n      return sortTrackReferencesByType(a, b);\n    }\n    if (a.participant.isCameraEnabled !== b.participant.isCameraEnabled) {\n      return sortTrackRefsByIsCameraEnabled(a, b);\n    }\n    return sortParticipantsByJoinedAt(a.participant, b.participant);\n  });\n  return [...localCameraTracks, ...remoteCameraTracks];\n}\n\n// src/sorting/sort-participants.ts\n\nfunction sortParticipants(participants) {\n  const sortedParticipants = [...participants];\n  sortedParticipants.sort((a, b) => {\n    if (a.isSpeaking && b.isSpeaking) {\n      return sortParticipantsByAudioLevel(a, b);\n    }\n    if (a.isSpeaking !== b.isSpeaking) {\n      return sortParticipantsByIsSpeaking(a, b);\n    }\n    if (a.lastSpokeAt !== b.lastSpokeAt) {\n      return sortParticipantsByLastSpokenAT(a, b);\n    }\n    const aVideo = a.videoTrackPublications.size > 0;\n    const bVideo = b.videoTrackPublications.size > 0;\n    if (aVideo !== bVideo) {\n      if (aVideo) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n    return sortParticipantsByJoinedAt(a, b);\n  });\n  const localParticipant = sortedParticipants.find((p) => p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant);\n  if (localParticipant) {\n    const localIdx = sortedParticipants.indexOf(localParticipant);\n    if (localIdx >= 0) {\n      sortedParticipants.splice(localIdx, 1);\n      if (sortedParticipants.length > 0) {\n        sortedParticipants.splice(0, 0, localParticipant);\n      } else {\n        sortedParticipants.push(localParticipant);\n      }\n    }\n  }\n  return sortedParticipants;\n}\n\n// src/helper/array-helper.ts\nfunction chunk(input, size) {\n  return input.reduce(\n    (arr, item, idx) => {\n      return idx % size === 0 ? [...arr, [item]] : [...arr.slice(0, -1), [...arr.slice(-1)[0], item]];\n    },\n    []\n  );\n}\nfunction zip(a1, a2) {\n  const resultLength = Math.max(a1.length, a2.length);\n  return new Array(resultLength).fill([]).map((_val, idx) => [a1[idx], a2[idx]]);\n}\nfunction differenceBy(a1, a2, by) {\n  return a1.filter((c) => !a2.map((v) => by(v)).includes(by(c)));\n}\n\n// src/track-reference/test-utils.ts\n\nfunction flatTrackReferenceArray(list) {\n  return list.map((item) => {\n    if (typeof item === \"string\" || typeof item === \"number\") {\n      return `${item}`;\n    } else {\n      return getTrackReferenceId(item);\n    }\n  });\n}\n\n// src/sorting/tile-array-update.ts\nfunction visualPageChange(state, next) {\n  return {\n    dropped: differenceBy(state, next, getTrackReferenceId),\n    added: differenceBy(next, state, getTrackReferenceId)\n  };\n}\nfunction listNeedsUpdating(changes) {\n  return changes.added.length !== 0 || changes.dropped.length !== 0;\n}\nfunction findIndex(trackReference, trackReferences) {\n  const indexToReplace = trackReferences.findIndex(\n    (trackReference_) => getTrackReferenceId(trackReference_) === getTrackReferenceId(trackReference)\n  );\n  if (indexToReplace === -1) {\n    throw new Error(\n      `Element not part of the array: ${getTrackReferenceId(\n        trackReference\n      )} not in ${flatTrackReferenceArray(trackReferences)}`\n    );\n  }\n  return indexToReplace;\n}\nfunction swapItems(moveForward, moveBack, trackReferences) {\n  const indexToReplace = findIndex(moveForward, trackReferences);\n  const indexReplaceWith = findIndex(moveBack, trackReferences);\n  trackReferences.splice(indexToReplace, 1, moveBack);\n  trackReferences.splice(indexReplaceWith, 1, moveForward);\n  return trackReferences;\n}\nfunction dropItem(itemToDrop, list) {\n  const indexOfElementToDrop = findIndex(itemToDrop, list);\n  list.splice(indexOfElementToDrop, 1);\n  return list;\n}\nfunction addItem(itemToAdd, list) {\n  return [...list, itemToAdd];\n}\nfunction divideIntoPages(list, maxElementsOnPage) {\n  const pages = chunk(list, maxElementsOnPage);\n  return pages;\n}\nfunction updatePages(currentList, nextList, maxItemsOnPage) {\n  let updatedList = refreshList(currentList, nextList);\n  if (updatedList.length < nextList.length) {\n    const addedItems = differenceBy(nextList, updatedList, getTrackReferenceId);\n    updatedList = [...updatedList, ...addedItems];\n  }\n  const currentPages = divideIntoPages(updatedList, maxItemsOnPage);\n  const nextPages = divideIntoPages(nextList, maxItemsOnPage);\n  zip(currentPages, nextPages).forEach(([currentPage, nextPage], pageIndex) => {\n    if (currentPage && nextPage) {\n      const updatedPage = divideIntoPages(updatedList, maxItemsOnPage)[pageIndex];\n      const changes = visualPageChange(updatedPage, nextPage);\n      if (listNeedsUpdating(changes)) {\n        log.debug(\n          `Detected visual changes on page: ${pageIndex}, current: ${flatTrackReferenceArray(\n            currentPage\n          )}, next: ${flatTrackReferenceArray(nextPage)}`,\n          { changes }\n        );\n        if (changes.added.length === changes.dropped.length) {\n          zip(changes.added, changes.dropped).forEach(([added, dropped]) => {\n            if (added && dropped) {\n              updatedList = swapItems(added, dropped, updatedList);\n            } else {\n              throw new Error(\n                `For a swap action we need a addition and a removal one is missing: ${added}, ${dropped}`\n              );\n            }\n          });\n        }\n        if (changes.added.length === 0 && changes.dropped.length > 0) {\n          changes.dropped.forEach((item) => {\n            updatedList = dropItem(item, updatedList);\n          });\n        }\n        if (changes.added.length > 0 && changes.dropped.length === 0) {\n          changes.added.forEach((item) => {\n            updatedList = addItem(item, updatedList);\n          });\n        }\n      }\n    }\n  });\n  if (updatedList.length > nextList.length) {\n    const missingItems = differenceBy(updatedList, nextList, getTrackReferenceId);\n    updatedList = updatedList.filter(\n      (item) => !missingItems.map(getTrackReferenceId).includes(getTrackReferenceId(item))\n    );\n  }\n  return updatedList;\n}\nfunction refreshList(currentList, nextList) {\n  return currentList.map((currentItem) => {\n    const updateForCurrentItem = nextList.find(\n      (newItem_) => (\n        // If the IDs match or ..\n        getTrackReferenceId(currentItem) === getTrackReferenceId(newItem_) || // ... if the current item is a placeholder and the new item is the track reference can replace it.\n        typeof currentItem !== \"number\" && isTrackReferencePlaceholder(currentItem) && isTrackReference(newItem_) && isPlaceholderReplacement(currentItem, newItem_)\n      )\n    );\n    return updateForCurrentItem != null ? updateForCurrentItem : currentItem;\n  });\n}\n\n// src/components/mediaToggle.ts\n\n\n\n// src/observables/participant.ts\n\n\n\n// src/components/mediaTrack.ts\n\n\n\n// src/styles-interface/class-prefixer.ts\nfunction prefixClass(unprefixedClassName) {\n  return `${cssPrefix}-${unprefixedClassName}`;\n}\n\n// src/components/mediaTrack.ts\nfunction setupMediaTrack(trackIdentifier) {\n  const initialPub = getTrackByIdentifier(trackIdentifier);\n  const trackObserver = observeParticipantMedia(trackIdentifier.participant).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(() => {\n      return getTrackByIdentifier(trackIdentifier);\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(initialPub)\n  );\n  const className = prefixClass(\n    trackIdentifier.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera || trackIdentifier.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare ? \"participant-media-video\" : \"participant-media-audio\"\n  );\n  return { className, trackObserver };\n}\nfunction getTrackByIdentifier(options) {\n  if (isTrackReference(options)) {\n    return options.publication;\n  } else {\n    const { source, name, participant } = options;\n    if (source && name) {\n      return participant.getTrackPublications().find((pub) => pub.source === source && pub.trackName === name);\n    } else if (name) {\n      return participant.getTrackPublicationByName(name);\n    } else if (source) {\n      return participant.getTrackPublication(source);\n    } else {\n      throw new Error(\"At least one of source and name needs to be defined\");\n    }\n  }\n}\n\n// src/observables/room.ts\n\n\nfunction observeRoomEvents(room, ...events) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const onRoomUpdate = () => {\n      subscribe.next(room);\n    };\n    events.forEach((evt) => {\n      room.on(evt, onRoomUpdate);\n    });\n    const unsubscribe = () => {\n      events.forEach((evt) => {\n        room.off(evt, onRoomUpdate);\n      });\n    };\n    return unsubscribe;\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room));\n  return observable;\n}\nfunction roomEventSelector(room, event) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const update = (...params) => {\n      subscribe.next(params);\n    };\n    room.on(event, update);\n    const unsubscribe = () => {\n      room.off(event, update);\n    };\n    return unsubscribe;\n  });\n  return observable;\n}\nfunction roomObserver(room) {\n  const observable = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room));\n  return observable;\n}\nfunction connectionStateObserver(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([connectionState]) => connectionState),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room.state)\n  );\n}\nfunction screenShareObserver(room) {\n  let screenShareSubscriber;\n  const observers = [];\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscriber) => {\n    screenShareSubscriber = subscriber;\n    return () => {\n      observers.forEach((observer) => {\n        observer.unsubscribe();\n      });\n    };\n  });\n  const screenShareTracks = [];\n  const handleSub = (publication, participant) => {\n    if (publication.source !== livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare && publication.source !== livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShareAudio) {\n      return;\n    }\n    let trackMap = screenShareTracks.find((tr) => tr.participant.identity === participant.identity);\n    const getScreenShareTracks = (participant2) => {\n      return participant2.getTrackPublications().filter(\n        (track) => (track.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare || track.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShareAudio) && track.track\n      );\n    };\n    if (!trackMap) {\n      trackMap = {\n        participant,\n        tracks: getScreenShareTracks(participant)\n      };\n    } else {\n      const index = screenShareTracks.indexOf(trackMap);\n      screenShareTracks.splice(index, 1);\n      trackMap.tracks = getScreenShareTracks(participant);\n    }\n    if (trackMap.tracks.length > 0) {\n      screenShareTracks.push(trackMap);\n    }\n    screenShareSubscriber.next(screenShareTracks);\n  };\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed).subscribe(\n      ([, ...args]) => handleSub(...args)\n    )\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed).subscribe(\n      ([, ...args]) => handleSub(...args)\n    )\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished).subscribe((args) => handleSub(...args))\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished).subscribe((args) => {\n      handleSub(...args);\n    })\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted).subscribe((args) => {\n      handleSub(...args);\n    })\n  );\n  observers.push(\n    roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted).subscribe((args) => {\n      handleSub(...args);\n    })\n  );\n  setTimeout(() => {\n    for (const p of room.remoteParticipants.values()) {\n      p.getTrackPublications().forEach((track) => {\n        handleSub(track, p);\n      });\n    }\n  }, 1);\n  return observable;\n}\nfunction roomInfoObserver(room) {\n  const observer = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((r) => {\n      return { name: r.name, metadata: r.metadata };\n    })\n  );\n  return observer;\n}\nfunction activeSpeakerObserver(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([speakers]) => speakers)\n  );\n}\nfunction createMediaDeviceObserver(kind, onError, requestPermissions = true) {\n  var _a;\n  const onDeviceChange = () => __async(this, null, function* () {\n    try {\n      const newDevices = yield livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(kind, requestPermissions);\n      deviceSubject.next(newDevices);\n    } catch (e) {\n      onError == null ? void 0 : onError(e);\n    }\n  });\n  const deviceSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  const observable = deviceSubject.pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.finalize)(() => {\n      var _a2;\n      (_a2 = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a2.removeEventListener(\"devicechange\", onDeviceChange);\n    })\n  );\n  if (typeof window !== \"undefined\") {\n    if (!window.isSecureContext) {\n      throw new Error(\n        `Accessing media devices is available only in secure contexts (HTTPS and localhost), in some or all supporting browsers. See: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices`\n      );\n    }\n    (_a = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a.addEventListener(\"devicechange\", onDeviceChange);\n  }\n  return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.concat)(\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(kind, requestPermissions).catch((e) => {\n      onError == null ? void 0 : onError(e);\n      return [];\n    }),\n    observable\n  );\n}\nfunction createDataObserver(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.DataReceived);\n}\nfunction createChatObserver(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ChatMessage);\n}\nfunction roomAudioPlaybackAllowedObservable(room) {\n  const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((room2) => {\n      return { canPlayAudio: room2.canPlaybackAudio };\n    })\n  );\n  return observable;\n}\nfunction roomVideoPlaybackAllowedObservable(room) {\n  const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.VideoPlaybackStatusChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((room2) => {\n      return { canPlayVideo: room2.canPlaybackVideo };\n    })\n  );\n  return observable;\n}\nfunction createActiveDeviceObservable(room, kind) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveDeviceChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.filter)(([kindOfDevice]) => kindOfDevice === kind),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([kind2, deviceId]) => {\n      log.debug(\"activeDeviceObservable | RoomEvent.ActiveDeviceChanged\", { kind: kind2, deviceId });\n      return deviceId;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room.getActiveDevice(kind))\n  );\n}\nfunction encryptionStatusObservable(room, participant) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantEncryptionStatusChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.filter)(\n      ([, p]) => (participant == null ? void 0 : participant.identity) === (p == null ? void 0 : p.identity) || !p && (participant == null ? void 0 : participant.identity) === room.localParticipant.identity\n    ),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([encrypted]) => encrypted),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(\n      participant instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant ? participant.isE2EEEnabled : !!(participant == null ? void 0 : participant.isEncrypted)\n    )\n  );\n}\nfunction recordingStatusObservable(room) {\n  return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RecordingStatusChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([recording]) => recording),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room.isRecording)\n  );\n}\n\n// src/observables/participant.ts\nfunction observeParticipantEvents(participant, ...events) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const onParticipantUpdate = () => {\n      subscribe.next(participant);\n    };\n    events.forEach((evt) => {\n      participant.on(evt, onParticipantUpdate);\n    });\n    const unsubscribe = () => {\n      events.forEach((evt) => {\n        participant.off(evt, onParticipantUpdate);\n      });\n    };\n    return unsubscribe;\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(participant));\n  return observable;\n}\nfunction observeParticipantMedia(participant) {\n  const participantObserver = observeParticipantEvents(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n    // ParticipantEvent.IsSpeakingChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.MediaDevicesError,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n    // ParticipantEvent.ConnectionQualityChanged,\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((p) => {\n      const { isMicrophoneEnabled, isCameraEnabled, isScreenShareEnabled } = p;\n      const microphoneTrack = p.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone);\n      const cameraTrack = p.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera);\n      const participantMedia = {\n        isCameraEnabled,\n        isMicrophoneEnabled,\n        isScreenShareEnabled,\n        cameraTrack,\n        microphoneTrack,\n        participant: p\n      };\n      return participantMedia;\n    })\n  );\n  return participantObserver;\n}\nfunction createTrackObserver(participant, options) {\n  return observeParticipantMedia(participant).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(() => {\n      return { publication: getTrackByIdentifier(options) };\n    })\n  );\n}\nfunction participantInfoObserver(participant) {\n  if (!participant) {\n    return void 0;\n  }\n  const observer = observeParticipantEvents(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantNameChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(({ name, identity, metadata }) => {\n      return {\n        name,\n        identity,\n        metadata\n      };\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)({\n      name: participant.name,\n      identity: participant.identity,\n      metadata: participant.metadata\n    })\n  );\n  return observer;\n}\nfunction createConnectionQualityObserver(participant) {\n  const observer = participantEventSelector(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([quality]) => quality),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(participant.connectionQuality)\n  );\n  return observer;\n}\nfunction participantEventSelector(participant, event) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const update = (...params) => {\n      subscribe.next(params);\n    };\n    participant.on(event, update);\n    const unsubscribe = () => {\n      participant.off(event, update);\n    };\n    return unsubscribe;\n  });\n  return observable;\n}\nfunction mutedObserver(trackRef) {\n  var _a, _b, _c, _d;\n  return observeParticipantEvents(\n    trackRef.participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((participant) => {\n      var _a2, _b2;\n      const pub = (_a2 = trackRef.publication) != null ? _a2 : participant.getTrackPublication(trackRef.source);\n      return (_b2 = pub == null ? void 0 : pub.isMuted) != null ? _b2 : true;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(\n      (_d = (_c = (_a = trackRef.publication) == null ? void 0 : _a.isMuted) != null ? _c : (_b = trackRef.participant.getTrackPublication(trackRef.source)) == null ? void 0 : _b.isMuted) != null ? _d : true\n    )\n  );\n}\nfunction createIsSpeakingObserver(participant) {\n  return participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([isSpeaking]) => isSpeaking)\n  );\n}\nfunction connectedParticipantsObserver(room, options = {}) {\n  var _a;\n  let subscriber;\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((sub) => {\n    subscriber = sub;\n    return () => listener.unsubscribe();\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(Array.from(room.remoteParticipants.values())));\n  const additionalRoomEvents = (_a = options.additionalRoomEvents) != null ? _a : allParticipantRoomEvents;\n  const roomEvents = Array.from(\n    /* @__PURE__ */ new Set([\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n      ...additionalRoomEvents\n    ])\n  );\n  const listener = observeRoomEvents(room, ...roomEvents).subscribe(\n    (r) => subscriber == null ? void 0 : subscriber.next(Array.from(r.remoteParticipants.values()))\n  );\n  if (room.remoteParticipants.size > 0) {\n    subscriber == null ? void 0 : subscriber.next(Array.from(room.remoteParticipants.values()));\n  }\n  return observable;\n}\nfunction connectedParticipantObserver(room, identity, options = {}) {\n  var _a;\n  const additionalEvents = (_a = options.additionalEvents) != null ? _a : allParticipantEvents;\n  const observable = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.switchMap)((r) => {\n      const participant = r.getParticipantByIdentity(identity);\n      if (participant) {\n        return observeParticipantEvents(participant, ...additionalEvents);\n      } else {\n        return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => subscribe.next(void 0));\n      }\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(room.getParticipantByIdentity(identity))\n  );\n  return observable;\n}\nfunction participantPermissionObserver(participant) {\n  const observer = participantEventSelector(\n    participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(() => participant.permissions),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(participant.permissions)\n  );\n  return observer;\n}\nfunction participantByIdentifierObserver(room, { kind, identity }, options = {}) {\n  var _a;\n  const additionalEvents = (_a = options.additionalEvents) != null ? _a : allParticipantEvents;\n  const matchesIdentifier = (participant) => {\n    let isMatch = true;\n    if (kind) {\n      isMatch = isMatch && participant.kind === kind;\n    }\n    if (identity) {\n      isMatch = isMatch && participant.identity === identity;\n    }\n    return isMatch;\n  };\n  const observable = observeRoomEvents(\n    room,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.switchMap)((r) => {\n      const participant = Array.from(r.remoteParticipants.values()).find(\n        (p) => matchesIdentifier(p)\n      );\n      if (participant) {\n        return observeParticipantEvents(participant, ...additionalEvents);\n      } else {\n        return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => subscribe.next(void 0));\n      }\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(Array.from(room.remoteParticipants.values()).find((p) => matchesIdentifier(p)))\n  );\n  return observable;\n}\nfunction participantAttributesObserver(participant) {\n  if (typeof participant === \"undefined\") {\n    return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable();\n  }\n  return participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.AttributesChanged).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([changedAttributes]) => {\n      return {\n        changed: changedAttributes,\n        attributes: participant.attributes\n      };\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)({ changed: participant.attributes, attributes: participant.attributes })\n  );\n}\n\n// src/components/mediaToggle.ts\nfunction setupMediaToggle(source, room, options, publishOptions, onError) {\n  const { localParticipant } = room;\n  const getSourceEnabled = (source2, localParticipant2) => {\n    let isEnabled = false;\n    switch (source2) {\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n        isEnabled = localParticipant2.isCameraEnabled;\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n        isEnabled = localParticipant2.isMicrophoneEnabled;\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n        isEnabled = localParticipant2.isScreenShareEnabled;\n        break;\n      default:\n        break;\n    }\n    return isEnabled;\n  };\n  const enabledObserver = observeParticipantMedia(localParticipant).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((media) => {\n      return getSourceEnabled(source, media.participant);\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(getSourceEnabled(source, localParticipant))\n  );\n  const pendingSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  const toggle = (forceState, captureOptions) => __async(this, null, function* () {\n    try {\n      captureOptions != null ? captureOptions : captureOptions = options;\n      pendingSubject.next(true);\n      switch (source) {\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n          yield localParticipant.setCameraEnabled(\n            forceState != null ? forceState : !localParticipant.isCameraEnabled,\n            captureOptions,\n            publishOptions\n          );\n          return localParticipant.isCameraEnabled;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n          yield localParticipant.setMicrophoneEnabled(\n            forceState != null ? forceState : !localParticipant.isMicrophoneEnabled,\n            captureOptions,\n            publishOptions\n          );\n          return localParticipant.isMicrophoneEnabled;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n          yield localParticipant.setScreenShareEnabled(\n            forceState != null ? forceState : !localParticipant.isScreenShareEnabled,\n            captureOptions,\n            publishOptions\n          );\n          return localParticipant.isScreenShareEnabled;\n        default:\n          throw new TypeError(\"Tried to toggle unsupported source\");\n      }\n    } catch (e) {\n      if (onError && e instanceof Error) {\n        onError == null ? void 0 : onError(e);\n        return void 0;\n      } else {\n        throw e;\n      }\n    } finally {\n      pendingSubject.next(false);\n    }\n  });\n  const className = prefixClass(\"button\");\n  return {\n    className,\n    toggle,\n    enabledObserver,\n    pendingObserver: pendingSubject.asObservable()\n  };\n}\nfunction setupManualToggle() {\n  let state = false;\n  const enabledSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  const pendingSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  const toggle = (forceState) => __async(this, null, function* () {\n    pendingSubject.next(true);\n    state = forceState != null ? forceState : !state;\n    enabledSubject.next(state);\n    pendingSubject.next(false);\n  });\n  const className = prefixClass(\"button\");\n  return {\n    className,\n    toggle,\n    enabledObserver: enabledSubject.asObservable(),\n    pendingObserver: pendingSubject.asObservable()\n  };\n}\n\n// src/components/mediaDeviceSelect.ts\n\n\nfunction setupDeviceSelector(kind, room, localTrack) {\n  const activeDeviceSubject = new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject(void 0);\n  const activeDeviceObservable = room ? createActiveDeviceObservable(room, kind) : activeDeviceSubject.asObservable();\n  const setActiveMediaDevice = (_0, ..._1) => __async(this, [_0, ..._1], function* (id, options = {}) {\n    var _a, _b, _c;\n    if (room) {\n      log.debug(`Switching active device of kind \"${kind}\" with id ${id}.`);\n      yield room.switchActiveDevice(kind, id, options.exact);\n      const actualDeviceId = (_a = room.getActiveDevice(kind)) != null ? _a : id;\n      if (actualDeviceId !== id && id !== \"default\") {\n        log.info(\n          `We tried to select the device with id (${id}), but the browser decided to select the device with id (${actualDeviceId}) instead.`\n        );\n      }\n      let targetTrack = void 0;\n      if (kind === \"audioinput\")\n        targetTrack = (_b = room.localParticipant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone)) == null ? void 0 : _b.track;\n      else if (kind === \"videoinput\") {\n        targetTrack = (_c = room.localParticipant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera)) == null ? void 0 : _c.track;\n      }\n      const useDefault = id === \"default\" && !targetTrack || id === \"default\" && (targetTrack == null ? void 0 : targetTrack.mediaStreamTrack.label.startsWith(\"Default\"));\n      activeDeviceSubject.next(useDefault ? id : actualDeviceId);\n    } else if (localTrack) {\n      yield localTrack.setDeviceId(options.exact ? { exact: id } : id);\n      const actualId = yield localTrack.getDeviceId();\n      activeDeviceSubject.next(\n        id === \"default\" && localTrack.mediaStreamTrack.label.startsWith(\"Default\") ? id : actualId\n      );\n    } else if (activeDeviceSubject.value !== id) {\n      log.warn(\n        \"device switch skipped, please provide either a room or a local track to switch on. \"\n      );\n      activeDeviceSubject.next(id);\n    }\n  });\n  const className = prefixClass(\"media-device-select\");\n  return {\n    className,\n    activeDeviceObservable,\n    setActiveMediaDevice\n  };\n}\n\n// src/components/disconnectButton.ts\nfunction setupDisconnectButton(room) {\n  const disconnect = (stopTracks) => {\n    room.disconnect(stopTracks);\n  };\n  const className = prefixClass(\"disconnect-button\");\n  return { className, disconnect };\n}\n\n// src/components/connectionQualityIndicator.ts\nfunction setupConnectionQualityIndicator(participant) {\n  const className = prefixClass(\"connection-quality\");\n  const connectionQualityObserver = createConnectionQualityObserver(participant);\n  return { className, connectionQualityObserver };\n}\n\n// src/components/trackMutedIndicator.ts\n\nfunction setupTrackMutedIndicator(trackRef) {\n  let classForSource = \"track-muted-indicator-camera\";\n  switch (trackRef.source) {\n    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n      classForSource = \"track-muted-indicator-camera\";\n      break;\n    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n      classForSource = \"track-muted-indicator-microphone\";\n      break;\n    default:\n      break;\n  }\n  const className = prefixClass(classForSource);\n  const mediaMutedObserver = mutedObserver(trackRef);\n  return { className, mediaMutedObserver };\n}\n\n// src/components/participantName.ts\nfunction setupParticipantName(participant) {\n  const infoObserver = participantInfoObserver(participant);\n  return { className: \"lk-participant-name\", infoObserver };\n}\n\n// src/components/participantTile.ts\nfunction setupParticipantTile() {\n  const className = prefixClass(\"participant-tile\");\n  return {\n    className\n  };\n}\n\n// src/components/chat.ts\n\n\n\n// src/observables/dataChannel.ts\n\nvar DataTopic = {\n  CHAT: \"lk-chat-topic\",\n  CHAT_UPDATE: \"lk-chat-update-topic\"\n};\nfunction sendMessage(_0, _1) {\n  return __async(this, arguments, function* (localParticipant, payload, options = {}) {\n    const { reliable, destinationIdentities, topic } = options;\n    yield localParticipant.publishData(payload, {\n      destinationIdentities,\n      topic,\n      reliable\n    });\n  });\n}\nfunction setupDataMessageHandler(room, topic, onMessage) {\n  const topics = Array.isArray(topic) ? topic : [topic];\n  const messageObservable = createDataObserver(room).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.filter)(\n      ([, , , messageTopic]) => topic === void 0 || messageTopic !== void 0 && topics.includes(messageTopic)\n    ),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([payload, participant, , messageTopic]) => {\n      const msg = {\n        payload,\n        topic: messageTopic,\n        from: participant\n      };\n      onMessage == null ? void 0 : onMessage(msg);\n      return msg;\n    })\n  );\n  let isSendingSubscriber;\n  const isSendingObservable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscriber) => {\n    isSendingSubscriber = subscriber;\n  });\n  const send = (_0, ..._1) => __async(this, [_0, ..._1], function* (payload, options = {}) {\n    isSendingSubscriber.next(true);\n    try {\n      yield sendMessage(room.localParticipant, payload, __spreadValues({ topic: topics[0] }, options));\n    } finally {\n      isSendingSubscriber.next(false);\n    }\n  });\n  return { messageObservable, isSendingObservable, send };\n}\nfunction setupChatMessageHandler(room) {\n  const chatObservable = createChatObserver(room);\n  const send = (text) => __async(this, null, function* () {\n    const msg = yield room.localParticipant.sendChatMessage(text);\n    return msg;\n  });\n  const edit = (text, originalMsg) => __async(this, null, function* () {\n    const msg = yield room.localParticipant.editChatMessage(text, originalMsg);\n    return msg;\n  });\n  return { chatObservable, send, edit };\n}\n\n// src/components/chat.ts\nvar encoder = new TextEncoder();\nvar decoder = new TextDecoder();\nvar topicSubjectMap = /* @__PURE__ */ new Map();\nvar encode = (message) => encoder.encode(JSON.stringify(message));\nvar decode = (message) => JSON.parse(decoder.decode(message));\nfunction setupChat(room, options) {\n  var _a, _b;\n  const onDestroyObservable = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  const serverSupportsChatApi = () => {\n    var _a2, _b2, _c;\n    return ((_a2 = room.serverInfo) == null ? void 0 : _a2.edition) === 1 || !!((_b2 = room.serverInfo) == null ? void 0 : _b2.version) && (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.compareVersions)((_c = room.serverInfo) == null ? void 0 : _c.version, \"1.17.2\") > 0;\n  };\n  const { messageDecoder, messageEncoder, channelTopic, updateChannelTopic } = options != null ? options : {};\n  const topic = channelTopic != null ? channelTopic : DataTopic.CHAT;\n  const updateTopic = updateChannelTopic != null ? updateChannelTopic : DataTopic.CHAT_UPDATE;\n  let needsSetup = false;\n  if (!topicSubjectMap.has(room)) {\n    needsSetup = true;\n  }\n  const topicMap = (_a = topicSubjectMap.get(room)) != null ? _a : /* @__PURE__ */ new Map();\n  const messageSubject = (_b = topicMap.get(topic)) != null ? _b : new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n  topicMap.set(topic, messageSubject);\n  topicSubjectMap.set(room, topicMap);\n  if (needsSetup) {\n    const { messageObservable } = setupDataMessageHandler(room, [topic, updateTopic]);\n    messageObservable.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(onDestroyObservable)).subscribe(messageSubject);\n  }\n  const { chatObservable, send: sendChatMessage } = setupChatMessageHandler(room);\n  const finalMessageDecoder = messageDecoder != null ? messageDecoder : decode;\n  const messagesObservable = (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.merge)(\n    messageSubject.pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((msg) => {\n        const parsedMessage = finalMessageDecoder(msg.payload);\n        const newMessage = __spreadProps(__spreadValues({}, parsedMessage), { from: msg.from });\n        if (isIgnorableChatMessage(newMessage)) {\n          return void 0;\n        }\n        return newMessage;\n      })\n    ),\n    chatObservable.pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([msg, participant]) => {\n        return __spreadProps(__spreadValues({}, msg), { from: participant });\n      })\n    )\n  ).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.scan)((acc, value) => {\n      var _a2;\n      if (!value) {\n        return acc;\n      }\n      if (\"id\" in value && acc.find((msg) => {\n        var _a3, _b2;\n        return ((_a3 = msg.from) == null ? void 0 : _a3.identity) === ((_b2 = value.from) == null ? void 0 : _b2.identity) && msg.id === value.id;\n      })) {\n        const replaceIndex = acc.findIndex((msg) => msg.id === value.id);\n        if (replaceIndex > -1) {\n          const originalMsg = acc[replaceIndex];\n          acc[replaceIndex] = __spreadProps(__spreadValues({}, value), {\n            timestamp: originalMsg.timestamp,\n            editTimestamp: (_a2 = value.editTimestamp) != null ? _a2 : value.timestamp\n          });\n        }\n        return [...acc];\n      }\n      return [...acc, value];\n    }, []),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(onDestroyObservable)\n  );\n  const isSending$ = new rxjs__WEBPACK_IMPORTED_MODULE_11__.BehaviorSubject(false);\n  const finalMessageEncoder = messageEncoder != null ? messageEncoder : encode;\n  const send = (message) => __async(this, null, function* () {\n    isSending$.next(true);\n    try {\n      const chatMessage = yield sendChatMessage(message);\n      const encodedLegacyMsg = finalMessageEncoder(__spreadProps(__spreadValues({}, chatMessage), {\n        ignore: serverSupportsChatApi()\n      }));\n      yield sendMessage(room.localParticipant, encodedLegacyMsg, {\n        reliable: true,\n        topic\n      });\n      return chatMessage;\n    } finally {\n      isSending$.next(false);\n    }\n  });\n  const update = (message, originalMessageOrId) => __async(this, null, function* () {\n    const timestamp = Date.now();\n    const originalMessage = typeof originalMessageOrId === \"string\" ? { id: originalMessageOrId, message: \"\", timestamp } : originalMessageOrId;\n    isSending$.next(true);\n    try {\n      const editedMessage = yield room.localParticipant.editChatMessage(message, originalMessage);\n      const encodedLegacyMessage = finalMessageEncoder(editedMessage);\n      yield sendMessage(room.localParticipant, encodedLegacyMessage, {\n        topic: updateTopic,\n        reliable: true\n      });\n      return editedMessage;\n    } finally {\n      isSending$.next(false);\n    }\n  });\n  function destroy() {\n    onDestroyObservable.next();\n    onDestroyObservable.complete();\n    topicSubjectMap.delete(room);\n  }\n  room.once(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Disconnected, destroy);\n  return {\n    messageObservable: messagesObservable,\n    isSendingObservable: isSending$,\n    send,\n    update\n  };\n}\nfunction isIgnorableChatMessage(msg) {\n  return msg.ignore == true;\n}\n\n// src/components/startAudio.ts\nfunction setupStartAudio() {\n  const handleStartAudioPlayback = (room) => __async(this, null, function* () {\n    log.info(\"Start Audio for room: \", room);\n    yield room.startAudio();\n  });\n  const className = prefixClass(\"start-audio-button\");\n  return { className, roomAudioPlaybackAllowedObservable, handleStartAudioPlayback };\n}\n\n// src/components/startVideo.ts\nfunction setupStartVideo() {\n  const handleStartVideoPlayback = (room) => __async(this, null, function* () {\n    log.info(\"Start Video for room: \", room);\n    yield room.startVideo();\n  });\n  const className = prefixClass(\"start-audio-button\");\n  return { className, roomVideoPlaybackAllowedObservable, handleStartVideoPlayback };\n}\n\n// src/components/chatToggle.ts\nfunction setupChatToggle() {\n  const className = [prefixClass(\"button\"), prefixClass(\"chat-toggle\")].join(\" \");\n  return { className };\n}\n\n// src/components/focusToggle.ts\nfunction setupFocusToggle() {\n  const className = [prefixClass(\"button\"), prefixClass(\"focus-toggle-button\")].join(\" \");\n  return { className };\n}\n\n// src/components/clearPinButton.ts\nfunction setupClearPinButton() {\n  const className = \"lk-clear-pin-button lk-button\";\n  return { className };\n}\n\n// src/components/room.ts\nfunction setupLiveKitRoom() {\n  const className = \"lk-room-container\";\n  return { className };\n}\n\n// src/observables/track.ts\n\n\nfunction trackObservable(track) {\n  const trackObserver = observeTrackEvents(\n    track,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Muted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Unmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Subscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Unsubscribed\n  );\n  return trackObserver;\n}\nfunction observeTrackEvents(track, ...events) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const onTrackUpdate = () => {\n      subscribe.next(track);\n    };\n    events.forEach((evt) => {\n      track.on(evt, onTrackUpdate);\n    });\n    const unsubscribe = () => {\n      events.forEach((evt) => {\n        track.off(evt, onTrackUpdate);\n      });\n    };\n    return unsubscribe;\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(track));\n  return observable;\n}\nfunction getTrackReferences(room, sources, onlySubscribedTracks = true) {\n  const localParticipant = room.localParticipant;\n  const allParticipants = [localParticipant, ...Array.from(room.remoteParticipants.values())];\n  const trackReferences = [];\n  allParticipants.forEach((participant) => {\n    sources.forEach((source) => {\n      const sourceReferences = Array.from(\n        participant.trackPublications.values()\n      ).filter(\n        (track) => track.source === source && // either return all or only the ones that are subscribed\n        (!onlySubscribedTracks || track.track)\n      ).map((track) => {\n        return {\n          participant,\n          publication: track,\n          source: track.source\n        };\n      });\n      trackReferences.push(...sourceReferences);\n    });\n  });\n  return { trackReferences, participants: allParticipants };\n}\nfunction getParticipantTrackRefs(participant, identifier, onlySubscribedTracks = false) {\n  const { sources, kind, name } = identifier;\n  const sourceReferences = Array.from(participant.trackPublications.values()).filter(\n    (pub) => (!sources || sources.includes(pub.source)) && (!kind || pub.kind === kind) && (!name || pub.trackName === name) && // either return all or only the ones that are subscribed\n    (!onlySubscribedTracks || pub.track)\n  ).map((track) => {\n    return {\n      participant,\n      publication: track,\n      source: track.source\n    };\n  });\n  return sourceReferences;\n}\nfunction trackReferencesObservable(room, sources, options) {\n  var _a, _b;\n  const additionalRoomEvents = (_a = options.additionalRoomEvents) != null ? _a : allParticipantRoomEvents;\n  const onlySubscribedTracks = (_b = options.onlySubscribed) != null ? _b : true;\n  const roomEvents = Array.from(\n    (/* @__PURE__ */ new Set([\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged,\n      ...additionalRoomEvents\n    ])).values()\n  );\n  const observable = observeRoomEvents(room, ...roomEvents).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((room2) => {\n      const data = getTrackReferences(room2, sources, onlySubscribedTracks);\n      log.debug(`TrackReference[] was updated. (length ${data.trackReferences.length})`, data);\n      return data;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(getTrackReferences(room, sources, onlySubscribedTracks))\n  );\n  return observable;\n}\nfunction participantTracksObservable(participant, trackIdentifier) {\n  const observable = observeParticipantEvents(participant, ...participantTrackEvents).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)((participant2) => {\n      const data = getParticipantTrackRefs(participant2, trackIdentifier);\n      log.debug(`TrackReference[] was updated. (length ${data.length})`, data);\n      return data;\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.startWith)(getParticipantTrackRefs(participant, trackIdentifier))\n  );\n  return observable;\n}\nfunction trackEventSelector(publication, event) {\n  const observable = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe) => {\n    const update = (...params) => {\n      subscribe.next(params);\n    };\n    publication.on(event, update);\n    const unsubscribe = () => {\n      publication.off(event, update);\n    };\n    return unsubscribe;\n  });\n  return observable;\n}\nfunction trackTranscriptionObserver(publication) {\n  return trackEventSelector(publication, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.TranscriptionReceived);\n}\nfunction trackSyncTimeObserver(track) {\n  return trackEventSelector(track, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.TimeSyncUpdate).pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(([timeUpdate]) => timeUpdate)\n  );\n}\n\n// src/observables/dom-event.ts\n\nfunction createInteractingObservable(htmlElement, inactiveAfter = 1e3) {\n  if (htmlElement === null) return (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.of)(false);\n  const move$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.fromEvent)(htmlElement, \"mousemove\", { passive: true }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__.map)(() => true));\n  const moveAndStop$ = move$.pipe(\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_17__.timeout)({\n      each: inactiveAfter,\n      with: () => (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.concat)((0,rxjs__WEBPACK_IMPORTED_MODULE_15__.of)(false), moveAndStop$.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_18__.skipUntil)(move$)))\n    }),\n    (0,rxjs__WEBPACK_IMPORTED_MODULE_19__.distinctUntilChanged)()\n  );\n  return moveAndStop$;\n}\n\n// src/persistent-storage/local-storage-helpers.ts\nfunction saveToLocalStorage(key, value) {\n  if (typeof localStorage === \"undefined\") {\n    log.error(\"Local storage is not available.\");\n    return;\n  }\n  try {\n    if (value) {\n      const nonEmptySettings = Object.fromEntries(\n        Object.entries(value).filter(([, value2]) => value2 !== \"\")\n      );\n      localStorage.setItem(key, JSON.stringify(nonEmptySettings));\n    }\n  } catch (error) {\n    log.error(`Error setting item to local storage: ${error}`);\n  }\n}\nfunction loadFromLocalStorage(key) {\n  if (typeof localStorage === \"undefined\") {\n    log.error(\"Local storage is not available.\");\n    return void 0;\n  }\n  try {\n    const item = localStorage.getItem(key);\n    if (!item) {\n      log.warn(`Item with key ${key} does not exist in local storage.`);\n      return void 0;\n    }\n    return JSON.parse(item);\n  } catch (error) {\n    log.error(`Error getting item from local storage: ${error}`);\n    return void 0;\n  }\n}\nfunction createLocalStorageInterface(key) {\n  return {\n    load: () => loadFromLocalStorage(key),\n    save: (value) => saveToLocalStorage(key, value)\n  };\n}\n\n// src/persistent-storage/user-choices.ts\nvar USER_CHOICES_KEY = `${cssPrefix}-user-choices`;\nvar defaultUserChoices = {\n  videoEnabled: true,\n  audioEnabled: true,\n  videoDeviceId: \"\",\n  audioDeviceId: \"\",\n  username: \"\"\n};\nvar { load, save } = createLocalStorageInterface(USER_CHOICES_KEY);\nfunction saveUserChoices(userChoices, preventSave = false) {\n  if (preventSave === true) {\n    return;\n  }\n  save(userChoices);\n}\nfunction loadUserChoices(defaults, preventLoad = false) {\n  var _a, _b, _c, _d, _e;\n  const fallback = {\n    videoEnabled: (_a = defaults == null ? void 0 : defaults.videoEnabled) != null ? _a : defaultUserChoices.videoEnabled,\n    audioEnabled: (_b = defaults == null ? void 0 : defaults.audioEnabled) != null ? _b : defaultUserChoices.audioEnabled,\n    videoDeviceId: (_c = defaults == null ? void 0 : defaults.videoDeviceId) != null ? _c : defaultUserChoices.videoDeviceId,\n    audioDeviceId: (_d = defaults == null ? void 0 : defaults.audioDeviceId) != null ? _d : defaultUserChoices.audioDeviceId,\n    username: (_e = defaults == null ? void 0 : defaults.username) != null ? _e : defaultUserChoices.username\n  };\n  if (preventLoad) {\n    return fallback;\n  } else {\n    const maybeLoadedObject = load();\n    const result = __spreadValues(__spreadValues({}, fallback), maybeLoadedObject != null ? maybeLoadedObject : {});\n    return result;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-core@0.11.9_livekit-client@2.5.9_tslib@2.7.0/node_modules/@livekit/components-core/dist/index.mjs\n");

/***/ })

};
;