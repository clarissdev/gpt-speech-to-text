"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey";
exports.ids = ["vendor-chunks/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/components-Y1IPllFz.mjs":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/components-Y1IPllFz.mjs ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ it),\n/* harmony export */   A: () => (/* binding */ ya),\n/* harmony export */   B: () => (/* binding */ Yt),\n/* harmony export */   C: () => (/* binding */ ca),\n/* harmony export */   D: () => (/* binding */ la),\n/* harmony export */   E: () => (/* binding */ Ht),\n/* harmony export */   F: () => (/* binding */ va),\n/* harmony export */   G: () => (/* binding */ Ea),\n/* harmony export */   H: () => (/* binding */ Bt),\n/* harmony export */   I: () => (/* binding */ Ke),\n/* harmony export */   J: () => (/* binding */ et),\n/* harmony export */   K: () => (/* binding */ D),\n/* harmony export */   L: () => (/* binding */ ka),\n/* harmony export */   M: () => (/* binding */ ma),\n/* harmony export */   N: () => (/* binding */ tt),\n/* harmony export */   O: () => (/* binding */ at),\n/* harmony export */   P: () => (/* binding */ jt),\n/* harmony export */   Q: () => (/* binding */ nt),\n/* harmony export */   R: () => (/* binding */ Ra),\n/* harmony export */   S: () => (/* binding */ oa),\n/* harmony export */   T: () => (/* binding */ ga),\n/* harmony export */   U: () => (/* binding */ rt),\n/* harmony export */   V: () => (/* binding */ Zt),\n/* harmony export */   W: () => (/* binding */ ct),\n/* harmony export */   X: () => (/* binding */ lt),\n/* harmony export */   Y: () => (/* binding */ ot),\n/* harmony export */   Z: () => (/* binding */ st),\n/* harmony export */   _: () => (/* binding */ se),\n/* harmony export */   a: () => (/* binding */ Ia),\n/* harmony export */   a0: () => (/* binding */ U),\n/* harmony export */   a1: () => (/* binding */ ut),\n/* harmony export */   b: () => (/* binding */ ht),\n/* harmony export */   c: () => (/* binding */ $),\n/* harmony export */   d: () => (/* binding */ sa),\n/* harmony export */   e: () => (/* binding */ ia),\n/* harmony export */   f: () => (/* binding */ ua),\n/* harmony export */   g: () => (/* binding */ ha),\n/* harmony export */   h: () => (/* binding */ wa),\n/* harmony export */   i: () => (/* binding */ pa),\n/* harmony export */   j: () => (/* binding */ Ca),\n/* harmony export */   k: () => (/* binding */ fe),\n/* harmony export */   l: () => (/* binding */ Sa),\n/* harmony export */   m: () => (/* binding */ R),\n/* harmony export */   n: () => (/* binding */ Dt),\n/* harmony export */   o: () => (/* binding */ Pa),\n/* harmony export */   p: () => (/* binding */ na),\n/* harmony export */   q: () => (/* binding */ ra),\n/* harmony export */   r: () => (/* binding */ dt),\n/* harmony export */   s: () => (/* binding */ fa),\n/* harmony export */   t: () => (/* binding */ ue),\n/* harmony export */   u: () => (/* binding */ q),\n/* harmony export */   v: () => (/* binding */ B),\n/* harmony export */   w: () => (/* binding */ da),\n/* harmony export */   x: () => (/* binding */ de),\n/* harmony export */   y: () => (/* binding */ Ma),\n/* harmony export */   z: () => (/* binding */ ba)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.2.14_react-dom@18.3.1_react@18.3.1__react@18.3.1_sass@1.80.3/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hooks-C6T19zG6.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/hooks-C6T19zG6.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.5.9/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contexts-BggYqn0S.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/contexts-BggYqn0S.mjs\");\n/* harmony import */ var _room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./room-BeQGUa5w.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/room-BeQGUa5w.mjs\");\n\n\n\n\n\n\nconst na = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function(a, n) {\n    const { buttonProps: r } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(a);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { ref: n, ...r }, a.children);\n  }\n), ra = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ room: a, ...n }, r) {\n    const c = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(a);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: r, ...n }, c);\n  }\n), ca = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function(a, n) {\n    const { mergedProps: r } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.b)({ props: a });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { ref: n, ...r }, a.children);\n  }\n), la = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function(a, n) {\n    const { buttonProps: r } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(a);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { ref: n, ...r }, a.children);\n  }\n), Ke = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708L11 10.293V4.5A1.5 1.5 0 0 0 9.5 3H3.707zM0 4.5a1.5 1.5 0 0 1 .943-1.393l9.532 9.533c-.262.224-.603.36-.975.36h-8A1.5 1.5 0 0 1 0 11.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"m15.2 3.6-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z\" })), et = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 4.5A1.5 1.5 0 0 1 1.5 3h8A1.5 1.5 0 0 1 11 4.5v7A1.5 1.5 0 0 1 9.5 13h-8A1.5 1.5 0 0 1 0 11.5zM15.2 3.6l-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z\" })), oa = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, viewBox: \"0 0 24 24\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"#FFF\",\n    d: \"M4.99 3.99a1 1 0 0 0-.697 1.717L10.586 12l-6.293 6.293a1 1 0 1 0 1.414 1.414L12 13.414l6.293 6.293a1 1 0 1 0 1.414-1.414L13.414 12l6.293-6.293a1 1 0 0 0-.727-1.717 1 1 0 0 0-.687.303L12 10.586 5.707 4.293a1 1 0 0 0-.717-.303z\"\n  }\n)), sa = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 18, fill: \"none\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M0 2.75A2.75 2.75 0 0 1 2.75 0h10.5A2.75 2.75 0 0 1 16 2.75v13.594a.75.75 0 0 1-1.234.572l-3.691-3.12a1.25 1.25 0 0 0-.807-.296H2.75A2.75 2.75 0 0 1 0 10.75v-8ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v8c0 .69.56 1.25 1.25 1.25h7.518c.65 0 1.279.23 1.775.65l2.457 2.077V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M3 4.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Z\",\n    clipRule: \"evenodd\"\n  }\n)), D = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentcolor\",\n    fillRule: \"evenodd\",\n    d: \"M5.293 2.293a1 1 0 0 1 1.414 0l4.823 4.823a1.25 1.25 0 0 1 0 1.768l-4.823 4.823a1 1 0 0 1-1.414-1.414L9.586 8 5.293 3.707a1 1 0 0 1 0-1.414z\",\n    clipRule: \"evenodd\"\n  }\n)), tt = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { stroke: \"currentColor\", strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 1.5 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M10 1.75h4.25m0 0V6m0-4.25L9 7M6 14.25H1.75m0 0V10m0 4.25L7 9\" }))), ia = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentcolor\",\n    fillRule: \"evenodd\",\n    d: \"M8.961.894C8.875-.298 7.125-.298 7.04.894c-.066.912-1.246 1.228-1.76.472-.67-.99-2.186-.115-1.664.96.399.824-.465 1.688-1.288 1.289-1.076-.522-1.95.994-.961 1.665.756.513.44 1.693-.472 1.759-1.192.086-1.192 1.836 0 1.922.912.066 1.228 1.246.472 1.76-.99.67-.115 2.186.96 1.664.824-.399 1.688.465 1.289 1.288-.522 1.076.994 1.95 1.665.961.513-.756 1.693-.44 1.759.472.086 1.192 1.836 1.192 1.922 0 .066-.912 1.246-1.228 1.76-.472.67.99 2.186.115 1.664-.96-.399-.824.465-1.688 1.288-1.289 1.076.522 1.95-.994.961-1.665-.756-.513-.44-1.693.472-1.759 1.192-.086 1.192-1.836 0-1.922-.912-.066-1.228-1.246-.472-1.76.99-.67.115-2.186-.96-1.664-.824.399-1.688-.465-1.289-1.288.522-1.076-.994-1.95-1.665-.961-.513.756-1.693.44-1.759-.472ZM8 13A5 5 0 1 0 8 3a5 5 0 0 0 0 10Z\",\n    clipRule: \"evenodd\"\n  }\n)), ua = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M2 2.75A2.75 2.75 0 0 1 4.75 0h6.5A2.75 2.75 0 0 1 14 2.75v10.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-.5a.75.75 0 0 1 1.5 0v.5c0 .69.56 1.25 1.25 1.25h6.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25h-6.5c-.69 0-1.25.56-1.25 1.25v.5a.75.75 0 0 1-1.5 0v-.5Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M8.78 7.47a.75.75 0 0 1 0 1.06l-2.25 2.25a.75.75 0 1 1-1.06-1.06l.97-.97H1.75a.75.75 0 0 1 0-1.5h4.69l-.97-.97a.75.75 0 0 1 1.06-1.06l2.25 2.25Z\",\n    clipRule: \"evenodd\"\n  }\n)), at = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentcolor\",\n    fillRule: \"evenodd\",\n    d: \"M4 6.104V4a4 4 0 1 1 8 0v2.104c1.154.326 2 1.387 2 2.646v4.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-4.5c0-1.259.846-2.32 2-2.646ZM5.5 4a2.5 2.5 0 0 1 5 0v2h-5V4Z\",\n    clipRule: \"evenodd\"\n  }\n)), nt = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12.227 11.52a5.477 5.477 0 0 0 1.246-2.97.5.5 0 0 0-.995-.1 4.478 4.478 0 0 1-.962 2.359l-1.07-1.07C10.794 9.247 11 8.647 11 8V3a3 3 0 0 0-6 0v1.293L1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708zM8 12.5c.683 0 1.33-.152 1.911-.425l.743.743c-.649.359-1.378.59-2.154.66V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .995-.098A4.5 4.5 0 0 0 8 12.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M8.743 10.907 5 7.164V8a3 3 0 0 0 3.743 2.907z\" })), rt = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fillRule: \"evenodd\",\n    d: \"M2.975 8.002a.5.5 0 0 1 .547.449 4.5 4.5 0 0 0 8.956 0 .5.5 0 1 1 .995.098A5.502 5.502 0 0 1 8.5 13.478V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .448-.547z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M5 3a3 3 0 1 1 6 0v5a3 3 0 0 1-6 0z\" })), ct = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentcolor\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" })), lt = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentcolor\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { opacity: 0.25 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }))), ot = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentcolor\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { opacity: 0.25 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\" }))), st = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"currentColor\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { opacity: 0.25 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z\" }))), se = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 20, height: 16, fill: \"none\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M0 2.75A2.75 2.75 0 0 1 2.75 0h14.5A2.75 2.75 0 0 1 20 2.75v10.5A2.75 2.75 0 0 1 17.25 16H2.75A2.75 2.75 0 0 1 0 13.25V2.75ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v10.5c0 .69.56 1.25 1.25 1.25h14.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M9.47 4.22a.75.75 0 0 1 1.06 0l2.25 2.25a.75.75 0 0 1-1.06 1.06l-.97-.97v4.69a.75.75 0 0 1-1.5 0V6.56l-.97.97a.75.75 0 0 1-1.06-1.06l2.25-2.25Z\",\n    clipRule: \"evenodd\"\n  }\n)), it = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 20, height: 16, fill: \"none\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { fill: \"currentColor\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M7.28 4.22a.75.75 0 0 0-1.06 1.06L8.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L10 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L11.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L10 6.94z\" }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fillRule: \"evenodd\",\n    d: \"M2.75 0A2.75 2.75 0 0 0 0 2.75v10.5A2.75 2.75 0 0 0 2.75 16h14.5A2.75 2.75 0 0 0 20 13.25V2.75A2.75 2.75 0 0 0 17.25 0zM1.5 2.75c0-.69.56-1.25 1.25-1.25h14.5c.69 0 1.25.56 1.25 1.25v10.5c0 .69-.56 1.25-1.25 1.25H2.75c-.69 0-1.25-.56-1.25-1.25z\",\n    clipRule: \"evenodd\"\n  }\n))), U = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M8 0a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0V.75A.75.75 0 0 1 8 0Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M8 12a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5A.75.75 0 0 1 8 12Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.7\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M12 1.072a.75.75 0 0 1 .274 1.024l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 12 1.072Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M6 11.464a.75.75 0 0 1 .274 1.025l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 6 11.464Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.6\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M14.928 4a.75.75 0 0 1-.274 1.025l-2.165 1.25a.75.75 0 1 1-.75-1.3l2.165-1.25A.75.75 0 0 1 14.928 4Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M4.536 10a.75.75 0 0 1-.275 1.024l-2.165 1.25a.75.75 0 0 1-.75-1.298l2.165-1.25A.75.75 0 0 1 4.536 10Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.5\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M16 8a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 16 8Z\",\n    clipRule: \"evenodd\"\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M4 8a.75.75 0 0 1-.75.75H.75a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 4 8Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.4\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M14.928 12a.75.75 0 0 1-1.024.274l-2.165-1.25a.75.75 0 0 1 .75-1.299l2.165 1.25A.75.75 0 0 1 14.928 12Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.9\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M4.536 6a.75.75 0 0 1-1.025.275l-2.165-1.25a.75.75 0 1 1 .75-1.3l2.165 1.25A.75.75 0 0 1 4.536 6Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.3\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M12 14.928a.75.75 0 0 1-1.024-.274l-1.25-2.165a.75.75 0 0 1 1.298-.75l1.25 2.165A.75.75 0 0 1 12 14.928Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.8\n  }\n), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    fillRule: \"evenodd\",\n    d: \"M6 4.536a.75.75 0 0 1-1.024-.275l-1.25-2.165a.75.75 0 1 1 1.299-.75l1.25 2.165A.75.75 0 0 1 6 4.536Z\",\n    clipRule: \"evenodd\",\n    opacity: 0.2\n  }\n)), ut = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", { stroke: \"currentColor\", strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 1.5 }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M13.25 7H9m0 0V2.75M9 7l5.25-5.25M2.75 9H7m0 0v4.25M7 9l-5.25 5.25\" }))), dt = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ trackRef: a, ...n }, r) {\n    const c = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a9)(), { mergedProps: s, inFocus: i } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.d)({\n      trackRef: a ?? c,\n      props: n\n    });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.aa.Consumer, null, (l) => l !== void 0 && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { ref: r, ...s }, n.children ? n.children : i ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ut, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(tt, null)));\n  }\n);\nfunction mt(t) {\n  return t !== void 0;\n}\nfunction R(...t) {\n  return (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_4__.m)(...t.filter(mt));\n}\nfunction $(t, a, n) {\n  return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(t, (r) => react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(r) && react__WEBPACK_IMPORTED_MODULE_0__.Children.only(t) ? (r.props.class && (a ?? (a = {}), a.class = (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_4__.c)(r.props.class, a.class), a.style = { ...r.props.style, ...a.style }), react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(r, { ...a, key: n })) : r);\n}\nfunction da(t) {\n  var a, n;\n  if (typeof window < \"u\" && typeof process < \"u\" && // eslint-disable-next-line turbo/no-undeclared-env-vars\n  (((a = process == null ? void 0 : process.env) == null ? void 0 : a.NODE_ENV) === \"dev\" || // eslint-disable-next-line turbo/no-undeclared-env-vars\n  ((n = process == null ? void 0 : process.env) == null ? void 0 : n.NODE_ENV) === \"development\")) {\n    const r = document.querySelector(\".lk-room-container\");\n    r && !getComputedStyle(r).getPropertyValue(\"--lk-has-imported-styles\") && _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.warn(\n      \"It looks like you're not using the `@livekit/components-styles package`. To render the UI with the default styling, please import it in your layout or page.\"\n    );\n  }\n}\nconst ma = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({\n    kind: a,\n    initialSelection: n,\n    onActiveDeviceChange: r,\n    onDeviceListChange: c,\n    onDeviceSelectError: s,\n    exactMatch: i,\n    track: l,\n    requestPermissions: o,\n    onError: u,\n    ...d\n  }, f) {\n    const m = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.w)(), p = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n      (w) => {\n        m && m.emit(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.MediaDevicesError, w), u == null || u(w);\n      },\n      [m, u]\n    ), { devices: E, activeDeviceId: h, setActiveMediaDevice: g, className: k } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.e)({\n      kind: a,\n      room: m,\n      track: l,\n      requestPermissions: o,\n      onError: p\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      n !== void 0 && g(n);\n    }, [g]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      typeof c == \"function\" && c(E);\n    }, [c, E]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      h && h !== \"\" && (r == null || r(h));\n    }, [h]);\n    const C = async (w) => {\n      try {\n        await g(w, { exact: i });\n      } catch (v) {\n        if (v instanceof Error)\n          s == null || s(v);\n        else\n          throw v;\n      }\n    }, b = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n      () => R(d, { className: k }, { className: \"lk-list\" }),\n      [k, d]\n    );\n    function S(w, v, M) {\n      return w === v || M === 0 && v === \"default\";\n    }\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", { ref: f, ...b }, E.map((w, v) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"li\",\n      {\n        key: w.deviceId,\n        id: w.deviceId,\n        \"data-lk-active\": S(w.deviceId, h, v),\n        \"aria-selected\": S(w.deviceId, h, v),\n        role: \"option\"\n      },\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"lk-button\", onClick: () => C(w.deviceId) }, w.label)\n    )));\n  }\n), fa = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ label: a = \"Allow Audio\", ...n }, r) {\n    const c = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.f)(), { mergedProps: s } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.f)({ room: c, props: n });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { ref: r, ...s }, a);\n  }\n), ha = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ label: a, ...n }, r) {\n    const c = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.f)(), { mergedProps: s, canPlayAudio: i } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.f)({ room: c, props: n }), { mergedProps: l, canPlayVideo: o } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.g)({ room: c, props: s }), { style: u, ...d } = l;\n    return u.display = i && o ? \"none\" : \"block\", /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { ref: r, style: u, ...d }, a ?? `Start ${i ? \"Video\" : \"Audio\"}`);\n  }\n);\nfunction ie(t, a) {\n  switch (t) {\n    case livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone:\n      return a ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(rt, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(nt, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera:\n      return a ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(et, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ke, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare:\n      return a ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(it, null) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(se, null);\n    default:\n      return;\n  }\n}\nfunction ft(t) {\n  switch (t) {\n    case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionQuality.Excellent:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ct, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionQuality.Good:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(lt, null);\n    case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionQuality.Poor:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ot, null);\n    default:\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(st, null);\n  }\n}\nconst ga = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ showIcon: a, ...n }, r) {\n  const { buttonProps: c, enabled: s } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.h)(n);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { ref: r, ...c }, (a ?? !0) && ie(n.source, s), n.children);\n}), ue = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function(a, n) {\n  const { className: r, quality: c } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(a), s = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({ ...R(a, { className: r }), \"data-lk-quality\": c }), [c, a, r]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: n, ...s }, a.children ?? ft(c));\n}), B = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ participant: a, ...n }, r) {\n    const c = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(a), { className: s, infoObserver: i } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ab)(c), [c]), { identity: l, name: o } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.j)(i, {\n      name: c.name,\n      identity: c.identity,\n      metadata: c.metadata\n    }), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => R(n, { className: s, \"data-lk-participant-name\": o }), [n, s, o]);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { ref: r, ...u }, o !== \"\" ? o : l, n.children);\n  }\n), de = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ trackRef: a, show: n = \"always\", ...r }, c) {\n    const { className: s, isMuted: i } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.k)(a), l = n === \"always\" || n === \"muted\" && i || n === \"unmuted\" && !i, o = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n      () => R(r, {\n        className: s\n      }),\n      [s, r]\n    );\n    return l ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: c, ...o, \"data-lk-muted\": i }, r.children ?? ie(a.source, !i)) : null;\n  }\n), ht = (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n  \"svg\",\n  {\n    width: 320,\n    height: 320,\n    viewBox: \"0 0 320 320\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ...t\n  },\n  /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"path\",\n    {\n      d: \"M160 180C204.182 180 240 144.183 240 100C240 55.8172 204.182 20 160 20C115.817 20 79.9997 55.8172 79.9997 100C79.9997 144.183 115.817 180 160 180Z\",\n      fill: \"white\",\n      fillOpacity: 0.25\n    }\n  ),\n  /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"path\",\n    {\n      d: \"M97.6542 194.614C103.267 191.818 109.841 192.481 115.519 195.141C129.025 201.466 144.1 205 159.999 205C175.899 205 190.973 201.466 204.48 195.141C210.158 192.481 216.732 191.818 222.345 194.614C262.703 214.719 291.985 253.736 298.591 300.062C300.15 310.997 291.045 320 280 320H39.9997C28.954 320 19.8495 310.997 21.4087 300.062C28.014 253.736 57.2966 214.72 97.6542 194.614Z\",\n      fill: \"white\",\n      fillOpacity: 0.25\n    }\n  )\n);\nfunction me(t, a = {}) {\n  const [n, r] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.X)(t)), [c, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n == null ? void 0 : n.isMuted), [i, l] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n == null ? void 0 : n.isSubscribed), [o, u] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n == null ? void 0 : n.track), [d, f] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"landscape\"), m = react__WEBPACK_IMPORTED_MODULE_0__.useRef(), { className: p, trackObserver: E } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.Y)(t), [\n    t.participant.sid ?? t.participant.identity,\n    t.source,\n    (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(t) && t.publication.trackSid\n  ]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const h = E.subscribe((g) => {\n      _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"update track\", g), r(g), s(g == null ? void 0 : g.isMuted), l(g == null ? void 0 : g.isSubscribed), u(g == null ? void 0 : g.track);\n    });\n    return () => h == null ? void 0 : h.unsubscribe();\n  }, [E]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var h, g;\n    return o && (m.current && o.detach(m.current), (h = a.element) != null && h.current && !((0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ac)(t.participant) && (o == null ? void 0 : o.kind) === \"audio\") && o.attach(a.element.current)), m.current = (g = a.element) == null ? void 0 : g.current, () => {\n      m.current && (o == null || o.detach(m.current));\n    };\n  }, [o, a.element]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var h, g;\n    if (typeof ((h = n == null ? void 0 : n.dimensions) == null ? void 0 : h.width) == \"number\" && typeof ((g = n == null ? void 0 : n.dimensions) == null ? void 0 : g.height) == \"number\") {\n      const k = n.dimensions.width > n.dimensions.height ? \"landscape\" : \"portrait\";\n      f(k);\n    }\n  }, [n]), {\n    publication: n,\n    isMuted: c,\n    isSubscribed: i,\n    track: o,\n    elementProps: R(a.props, {\n      className: p,\n      \"data-lk-local-participant\": t.participant.isLocal,\n      \"data-lk-source\": n == null ? void 0 : n.source,\n      ...(n == null ? void 0 : n.kind) === \"video\" && { \"data-lk-orientation\": d }\n    })\n  };\n}\nvar gt = \"Expected a function\", G = NaN, vt = \"[object Symbol]\", pt = /^\\s+|\\s+$/g, Et = /^[-+]0x[0-9a-f]+$/i, wt = /^0b[01]+$/i, kt = /^0o[0-7]+$/i, yt = parseInt, Mt = typeof _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ad == \"object\" && _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ad && _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ad.Object === Object && _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ad, Rt = typeof self == \"object\" && self && self.Object === Object && self, bt = Mt || Rt || Function(\"return this\")(), St = Object.prototype, Ct = St.toString, It = Math.max, Pt = Math.min, Z = function() {\n  return bt.Date.now();\n};\nfunction Tt(t, a, n) {\n  var r, c, s, i, l, o, u = 0, d = !1, f = !1, m = !0;\n  if (typeof t != \"function\")\n    throw new TypeError(gt);\n  a = Q(a) || 0, j(n) && (d = !!n.leading, f = \"maxWait\" in n, s = f ? It(Q(n.maxWait) || 0, a) : s, m = \"trailing\" in n ? !!n.trailing : m);\n  function p(v) {\n    var M = r, x = c;\n    return r = c = void 0, u = v, i = t.apply(x, M), i;\n  }\n  function E(v) {\n    return u = v, l = setTimeout(k, a), d ? p(v) : i;\n  }\n  function h(v) {\n    var M = v - o, x = v - u, W = a - M;\n    return f ? Pt(W, s - x) : W;\n  }\n  function g(v) {\n    var M = v - o, x = v - u;\n    return o === void 0 || M >= a || M < 0 || f && x >= s;\n  }\n  function k() {\n    var v = Z();\n    if (g(v))\n      return C(v);\n    l = setTimeout(k, h(v));\n  }\n  function C(v) {\n    return l = void 0, m && r ? p(v) : (r = c = void 0, i);\n  }\n  function b() {\n    l !== void 0 && clearTimeout(l), u = 0, r = o = c = l = void 0;\n  }\n  function S() {\n    return l === void 0 ? i : C(Z());\n  }\n  function w() {\n    var v = Z(), M = g(v);\n    if (r = arguments, c = this, o = v, M) {\n      if (l === void 0)\n        return E(o);\n      if (f)\n        return l = setTimeout(k, a), p(o);\n    }\n    return l === void 0 && (l = setTimeout(k, a)), i;\n  }\n  return w.cancel = b, w.flush = S, w;\n}\nfunction j(t) {\n  var a = typeof t;\n  return !!t && (a == \"object\" || a == \"function\");\n}\nfunction xt(t) {\n  return !!t && typeof t == \"object\";\n}\nfunction At(t) {\n  return typeof t == \"symbol\" || xt(t) && Ct.call(t) == vt;\n}\nfunction Q(t) {\n  if (typeof t == \"number\")\n    return t;\n  if (At(t))\n    return G;\n  if (j(t)) {\n    var a = typeof t.valueOf == \"function\" ? t.valueOf() : t;\n    t = j(a) ? a + \"\" : a;\n  }\n  if (typeof t != \"string\")\n    return t === 0 ? t : +t;\n  t = t.replace(pt, \"\");\n  var n = wt.test(t);\n  return n || kt.test(t) ? yt(t.slice(2), n ? 2 : 8) : Et.test(t) ? G : +t;\n}\nvar Nt = Tt;\nconst X = /* @__PURE__ */ (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ae)(Nt);\nfunction Lt(t) {\n  const a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(t);\n  a.current = t, (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(\n    () => () => {\n      a.current();\n    },\n    []\n  );\n}\nfunction Vt(t, a = 500, n) {\n  const r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  Lt(() => {\n    r.current && r.current.cancel();\n  });\n  const c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const s = X(t, a, n), i = (...l) => s(...l);\n    return i.cancel = () => {\n      s.cancel();\n    }, i.isPending = () => !!r.current, i.flush = () => s.flush(), i;\n  }, [t, a, n]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    r.current = X(t, a, n);\n  }, [t, a, n]), c;\n}\nfunction zt(t, a, n) {\n  const r = (u, d) => u === d, c = t instanceof Function ? t() : t, [s, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(c), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(c), o = Vt(\n    i,\n    a,\n    n\n  );\n  return r(l.current, c) || (o(c), l.current = c), [s, o];\n}\nfunction Ft({\n  threshold: t = 0,\n  root: a = null,\n  rootMargin: n = \"0%\",\n  freezeOnceVisible: r = !1,\n  initialIsIntersecting: c = !1,\n  onChange: s\n} = {}) {\n  var i;\n  const [l, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [u, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => ({\n    isIntersecting: c,\n    entry: void 0\n  })), f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  f.current = s;\n  const m = ((i = u.entry) == null ? void 0 : i.isIntersecting) && r;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!l || !(\"IntersectionObserver\" in window) || m)\n      return;\n    let h;\n    const g = new IntersectionObserver(\n      (k) => {\n        const C = Array.isArray(g.thresholds) ? g.thresholds : [g.thresholds];\n        k.forEach((b) => {\n          const S = b.isIntersecting && C.some((w) => b.intersectionRatio >= w);\n          d({ isIntersecting: S, entry: b }), f.current && f.current(S, b), S && r && h && (h(), h = void 0);\n        });\n      },\n      { threshold: t, root: a, rootMargin: n }\n    );\n    return g.observe(l), () => {\n      g.disconnect();\n    };\n  }, [\n    l,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    JSON.stringify(t),\n    a,\n    n,\n    m,\n    r\n  ]);\n  const p = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    var h;\n    !l && ((h = u.entry) != null && h.target) && !r && !m && p.current !== u.entry.target && (p.current = u.entry.target, d({ isIntersecting: c, entry: void 0 }));\n  }, [l, u.entry, r, m, c]);\n  const E = [\n    o,\n    !!u.isIntersecting,\n    u.entry\n  ];\n  return E.ref = E[0], E.isIntersecting = E[1], E.entry = E[2], E;\n}\nconst Zt = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({\n    onTrackClick: a,\n    onClick: n,\n    onSubscriptionStatusChanged: r,\n    trackRef: c,\n    manageSubscription: s,\n    ...i\n  }, l) {\n    const o = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.i)(c), u = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(l, () => u.current);\n    const d = Ft({ root: u.current }), [f] = zt(d, 3e3);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      s && o.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.RemoteTrackPublication && (f == null ? void 0 : f.isIntersecting) === !1 && (d == null ? void 0 : d.isIntersecting) === !1 && o.publication.setSubscribed(!1);\n    }, [f, o, s]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      s && o.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.RemoteTrackPublication && (d == null ? void 0 : d.isIntersecting) === !0 && o.publication.setSubscribed(!0);\n    }, [d, o, s]);\n    const {\n      elementProps: m,\n      publication: p,\n      isSubscribed: E\n    } = me(o, {\n      element: u,\n      props: i\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      r == null || r(!!E);\n    }, [E, r]);\n    const h = (g) => {\n      n == null || n(g), a == null || a({ participant: o == null ? void 0 : o.participant, track: p });\n    };\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", { ref: u, ...m, muted: !0, onClick: h });\n  }\n), q = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ trackRef: a, onSubscriptionStatusChanged: n, volume: r, muted: c, ...s }, i) {\n    const l = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.i)(a), o = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(i, () => o.current);\n    const {\n      elementProps: u,\n      isSubscribed: d,\n      track: f,\n      publication: m\n    } = me(l, {\n      element: o,\n      props: s\n    });\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      n == null || n(!!d);\n    }, [d, n]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      f === void 0 || r === void 0 || (f instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.RemoteAudioTrack ? f.setVolume(r) : _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.warn(\"Volume can only be set on remote audio tracks.\"));\n    }, [r, f]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n      m === void 0 || c === void 0 || (m instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.RemoteTrackPublication ? m.setEnabled(!c) : _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.warn(\"Can only call setEnabled on remote track publications.\"));\n    }, [c, m, f]), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"audio\", { ref: o, ...u });\n  }\n);\nfunction Ht(t) {\n  const a = !!(0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.B)();\n  return t.participant && !a ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.af.Provider, { value: t.participant }, t.children) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t.children);\n}\nfunction Bt(t) {\n  const a = !!(0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a9)();\n  return t.trackRef && !a ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ag.Provider, { value: t.trackRef }, t.children) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t.children);\n}\nconst jt = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({\n    trackRef: a,\n    children: n,\n    onParticipantClick: r,\n    disableSpeakingIndicator: c,\n    ...s\n  }, i) {\n    var p, E;\n    const l = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.i)(a), { elementProps: o } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.l)({\n      htmlProps: s,\n      disableSpeakingIndicator: c,\n      onParticipantClick: r,\n      trackRef: l\n    }), u = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(l.participant), d = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.j)(), f = (p = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ah)()) == null ? void 0 : p.autoSubscription, m = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n      (h) => {\n        l.source && !h && d && d.pin.dispatch && (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(l, d.pin.state) && d.pin.dispatch({ msg: \"clear_pin\" });\n      },\n      [l, d]\n    );\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: i, style: { position: \"relative\" }, ...o }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Bt, { trackRef: l }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ht, { participant: l.participant }, n ?? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(l) && (((E = l.publication) == null ? void 0 : E.kind) === \"video\" || l.source === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera || l.source === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare) ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      Zt,\n      {\n        trackRef: l,\n        onSubscriptionStatusChanged: m,\n        manageSubscription: f\n      }\n    ) : (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(l) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      q,\n      {\n        trackRef: l,\n        onSubscriptionStatusChanged: m\n      }\n    ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-placeholder\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ht, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata-item\" }, l.source === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, u && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(at, { style: { marginRight: \"0.25rem\" } }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      de,\n      {\n        trackRef: {\n          participant: l.participant,\n          source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone\n        },\n        show: \"muted\"\n      }\n    ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(B, null)) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(se, { style: { marginRight: \"0.25rem\" } }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(B, null, \"'s screen\"))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ue, { className: \"lk-participant-metadata-item\" }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(dt, { trackRef: l }))));\n  }\n);\nfunction va(t) {\n  const a = R(t, { className: \"lk-focus-layout\" });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ...a }, t.children);\n}\nfunction pa({ trackRef: t, ...a }) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(jt, { trackRef: t, ...a });\n}\nfunction fe({ tracks: t, ...a }) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t.map((n) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ag.Provider,\n    {\n      value: n,\n      key: (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.p)(n)\n    },\n    $(a.children)\n  )));\n}\nfunction Ot({\n  totalPageCount: t,\n  nextPage: a,\n  prevPage: n,\n  currentPage: r,\n  pagesContainer: c\n}) {\n  const [s, i] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    let l;\n    return c && (l = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ai)(c.current, 2e3).subscribe(\n      i\n    )), () => {\n      l && l.unsubscribe();\n    };\n  }, [c]), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-pagination-control\", \"data-lk-user-interaction\": s }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"lk-button\", onClick: n }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(D, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-pagination-count\" }, `${r} of ${t}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"lk-button\", onClick: a }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(D, null)));\n}\nconst _t = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ totalPageCount: a, currentPage: n }, r) {\n    const c = new Array(a).fill(\"\").map((s, i) => i + 1 === n ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { \"data-lk-active\": !0, key: i }) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { key: i }));\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: r, className: \"lk-pagination-indicator\" }, c);\n  }\n);\nfunction Ea({ tracks: t, ...a }) {\n  const n = react__WEBPACK_IMPORTED_MODULE_0__.createRef(), r = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => R(a, { className: \"lk-grid-layout\" }),\n    [a]\n  ), { layout: c } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.n)(n, t.length), s = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.o)(c.maxTiles, t);\n  return (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.p)(n, {\n    onLeftSwipe: s.nextPage,\n    onRightSwipe: s.prevPage\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: n, \"data-lk-pagination\": s.totalPageCount > 1, ...r }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(fe, { tracks: s.tracks }, a.children), t.length > c.maxTiles && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    _t,\n    {\n      totalPageCount: s.totalPageCount,\n      currentPage: s.currentPage\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ot, { pagesContainer: n, ...s })));\n}\nconst $t = 130, qt = 140, Y = 1, he = 16 / 10, Wt = (1 - he) * -1;\nfunction wa({ tracks: t, orientation: a, ...n }) {\n  const r = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), [c, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), { width: i, height: l } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.q)(r), o = a || (l >= i ? \"vertical\" : \"horizontal\"), u = o === \"vertical\" ? Math.max(i * Wt, $t) : Math.max(l * he, qt), d = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.aj)(), f = Math.max(o === \"vertical\" ? (l - d) / u : (i - d) / u, Y);\n  let m = Math.round(f);\n  Math.abs(f - c) < 0.5 ? m = Math.round(c) : c !== f && s(f);\n  const p = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.r)(t, m);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    r.current && (r.current.dataset.lkOrientation = o, r.current.style.setProperty(\"--lk-max-visible-tiles\", m.toString()));\n  }, [m, o]), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"aside\", { key: o, className: \"lk-carousel\", ref: r, ...n }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(fe, { tracks: p }, n.children));\n}\nfunction ka({\n  value: t,\n  onPinChange: a,\n  onWidgetChange: n,\n  children: r\n}) {\n  const c = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ak)(t);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"PinState Updated\", { state: c.pin.state }), a && c.pin.state && a(c.pin.state);\n  }, [c.pin.state, a]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"Widget Updated\", { widgetState: c.widget.state }), n && c.widget.state && n(c.widget.state);\n  }, [n, c.widget.state]), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.aa.Provider, { value: c }, r);\n}\nconst ya = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ trackRef: a, ...n }, r) {\n    const d = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.i)(a), f = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(d, { bands: 7, loPass: 300 });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"svg\",\n      {\n        ref: r,\n        width: \"100%\",\n        height: \"100%\",\n        viewBox: \"0 0 200 90\",\n        ...n,\n        className: \"lk-audio-visualizer\"\n      },\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", { x: \"0\", y: \"0\", width: \"100%\", height: \"100%\" }),\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n        \"g\",\n        {\n          style: {\n            transform: `translate(${(200 - 7 * 10) / 2}px, 0)`\n          }\n        },\n        f.map((m, p) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n          \"rect\",\n          {\n            key: p,\n            x: p * 10,\n            y: 90 / 2 - m * 50 / 2,\n            width: 6,\n            height: m * 50\n          }\n        ))\n      )\n    );\n  }\n);\nfunction Ma({ participants: t, ...a }) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t.map((n) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.af.Provider, { value: n, key: n.identity }, $(a.children))));\n}\nfunction Ra({ volume: t, muted: a }) {\n  const n = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(\n    [livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone, livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShareAudio, livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Unknown],\n    {\n      updateOnlyOn: [],\n      onlySubscribed: !0\n    }\n  ).filter((r) => !(0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ac)(r.participant) && r.publication.kind === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Kind.Audio);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: { display: \"none\" } }, n.map((r) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    q,\n    {\n      key: (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.p)(r),\n      trackRef: r,\n      volume: t,\n      muted: a\n    }\n  )));\n}\nconst ba = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ childrenPosition: a = \"before\", children: n, ...r }, c) {\n  const { name: s } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.v)();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { ref: c, ...r }, a === \"before\" && n, s, a === \"after\" && n);\n});\nfunction Dt(t) {\n  const a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => R(t, { className: \"lk-toast\" }), [t]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ...a }, t.children);\n}\nconst Ut = (t) => {\n  const a = [];\n  for (let n = 0; n < t; n++)\n    a.push([n, t - 1 - n]);\n  return a;\n}, J = (t) => [[Math.floor(t / 2)], [-1]], Gt = (t, a, n) => {\n  const [r, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [s, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([[]]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (t === \"thinking\")\n      i(J(a));\n    else if (t === \"connecting\" || t === \"initializing\") {\n      const o = [...Ut(a)];\n      i(o);\n    } else i(t === \"listening\" ? J(a) : t === void 0 ? [new Array(a).fill(0).map((o, u) => u)] : [[]]);\n    c(0);\n  }, [t, a]);\n  const l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    let o = performance.now();\n    const u = (d) => {\n      d - o >= n && (c((m) => m + 1), o = d), l.current = requestAnimationFrame(u);\n    };\n    return l.current = requestAnimationFrame(u), () => {\n      l.current !== null && cancelAnimationFrame(l.current);\n    };\n  }, [n, a, t, s.length]), s[r % s.length];\n}, Qt = /* @__PURE__ */ new Map([\n  [\"connecting\", 2e3],\n  [\"initializing\", 2e3],\n  [\"listening\", 500],\n  [\"thinking\", 150]\n]), Xt = (t, a) => {\n  if (t === void 0)\n    return 1e3;\n  let n = Qt.get(t);\n  if (n)\n    switch (t) {\n      case \"connecting\":\n        n /= a;\n        break;\n    }\n  return n;\n}, Yt = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ state: a, options: n, barCount: r = 15, trackRef: c, children: s, ...i }, l) {\n    const o = R(i, { className: \"lk-audio-bar-visualizer\" });\n    let u = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a9)();\n    c && (u = c);\n    const d = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(u, {\n      bands: r,\n      loPass: 100,\n      hiPass: 200\n    }), f = (n == null ? void 0 : n.minHeight) ?? 20, m = (n == null ? void 0 : n.maxHeight) ?? 100, p = Gt(\n      a,\n      r,\n      Xt(a, r) ?? 100\n    );\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: l, ...o, \"data-lk-va-state\": a }, d.map(\n      (E, h) => s ? $(s, {\n        \"data-lk-highlighted\": p.includes(h),\n        \"data-lk-bar-index\": h,\n        class: \"lk-audio-bar\",\n        style: { height: `${Math.min(m, Math.max(f, E * 100 + 5))}%` }\n      }) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n        \"span\",\n        {\n          key: h,\n          \"data-lk-highlighted\": p.includes(h),\n          \"data-lk-bar-index\": h,\n          className: `lk-audio-bar ${p.includes(h) && \"lk-highlighted\"}`,\n          style: {\n            // TODO transform animations would be more performant, however the border-radius gets distorted when using scale transforms. a 9-slice approach (or 3 in this case) could work\n            // transform: `scale(1, ${Math.min(maxHeight, Math.max(minHeight, volume))}`,\n            height: `${Math.min(m, Math.max(f, E * 100 + 5))}%`\n          }\n        }\n      )\n    ));\n  }\n), Sa = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({\n    children: a,\n    disableSpeakingIndicator: n,\n    onParticipantClick: r,\n    trackRef: c,\n    ...s\n  }, i) {\n    const l = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.i)(c), { elementProps: o } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.l)({\n      trackRef: l,\n      htmlProps: s,\n      disableSpeakingIndicator: n,\n      onParticipantClick: r\n    });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: i, style: { position: \"relative\", minHeight: \"160px\" }, ...o }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ag.Provider, { value: l }, a ?? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(l) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(q, { trackRef: l }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Yt, { barCount: 7, options: { minHeight: 8 } }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-participant-metadata-item\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(de, { trackRef: l }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(B, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ue, { className: \"lk-participant-metadata-item\" })))));\n  }\n);\nfunction Ca(t) {\n  const [a, n] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0), r = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(t.room);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    switch (r) {\n      case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Reconnecting:\n        n(\n          /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(U, { className: \"lk-spinner\" }), \" Reconnecting\")\n        );\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Connecting:\n        n(\n          /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(U, { className: \"lk-spinner\" }), \" Connecting\")\n        );\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Disconnected:\n        n(/* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \"Disconnected\"));\n        break;\n      default:\n        n(void 0);\n        break;\n    }\n  }, [r]), a ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Dt, { className: \"lk-toast-connection-state\" }, a) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n}\nconst Ia = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function({ entry: a, hideName: n = !1, hideTimestamp: r = !1, messageFormatter: c, ...s }, i) {\n    var f, m, p;\n    const l = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => c ? c(a.message) : a.message, [a.message, c]), o = !!a.editTimestamp, u = new Date(a.timestamp), d = navigator ? navigator.language : \"en-US\";\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"li\",\n      {\n        ref: i,\n        className: \"lk-chat-entry\",\n        title: u.toLocaleTimeString(d, { timeStyle: \"full\" }),\n        \"data-lk-message-origin\": (f = a.from) != null && f.isLocal ? \"local\" : \"remote\",\n        ...s\n      },\n      (!r || !n || o) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-meta-data\" }, !n && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", { className: \"lk-participant-name\" }, ((m = a.from) == null ? void 0 : m.name) ?? ((p = a.from) == null ? void 0 : p.identity)), (!r || o) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-timestamp\" }, o && \"edited \", u.toLocaleTimeString(d, { timeStyle: \"short\" }))),\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"lk-message-body\" }, l)\n    );\n  }\n);\nfunction Pa(t) {\n  return (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.al)(t, (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.am)()).map((a, n) => {\n    if (typeof a == \"string\")\n      return a;\n    {\n      const r = a.content.toString(), c = a.type === \"url\" ? /^http(s?):\\/\\//.test(r) ? r : `https://${r}` : `mailto:${r}`;\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", { className: \"lk-chat-link\", key: n, href: c, target: \"_blank\", rel: \"noreferrer\" }, r);\n    }\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/components-Y1IPllFz.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/contexts-BggYqn0S.mjs":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/contexts-BggYqn0S.mjs ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ Cs),\n/* harmony export */   A: () => (/* binding */ zo),\n/* harmony export */   B: () => (/* binding */ Eo),\n/* harmony export */   C: () => (/* binding */ oo),\n/* harmony export */   D: () => (/* binding */ ds),\n/* harmony export */   E: () => (/* binding */ es),\n/* harmony export */   F: () => (/* binding */ ks),\n/* harmony export */   G: () => (/* binding */ Uo),\n/* harmony export */   H: () => (/* binding */ ts),\n/* harmony export */   I: () => (/* binding */ rs),\n/* harmony export */   J: () => (/* binding */ Ko),\n/* harmony export */   K: () => (/* binding */ Qo),\n/* harmony export */   L: () => (/* binding */ Co),\n/* harmony export */   M: () => (/* binding */ Ho),\n/* harmony export */   N: () => (/* binding */ hs),\n/* harmony export */   O: () => (/* binding */ vs),\n/* harmony export */   P: () => (/* binding */ ms),\n/* harmony export */   Q: () => (/* binding */ ls),\n/* harmony export */   R: () => (/* binding */ $n),\n/* harmony export */   S: () => (/* binding */ os),\n/* harmony export */   T: () => (/* binding */ ss),\n/* harmony export */   U: () => (/* binding */ Bi),\n/* harmony export */   V: () => (/* binding */ ws),\n/* harmony export */   W: () => (/* binding */ Bo),\n/* harmony export */   X: () => (/* binding */ Rt),\n/* harmony export */   Y: () => (/* binding */ Yo),\n/* harmony export */   Z: () => (/* binding */ ps),\n/* harmony export */   _: () => (/* binding */ Ps),\n/* harmony export */   a: () => (/* binding */ As),\n/* harmony export */   a0: () => (/* binding */ qo),\n/* harmony export */   a1: () => (/* binding */ F),\n/* harmony export */   a2: () => (/* binding */ Ss),\n/* harmony export */   a3: () => (/* binding */ Es),\n/* harmony export */   a4: () => (/* binding */ xs),\n/* harmony export */   a5: () => (/* binding */ Wo),\n/* harmony export */   a6: () => (/* binding */ jo),\n/* harmony export */   a7: () => (/* binding */ is),\n/* harmony export */   a8: () => (/* binding */ Xo),\n/* harmony export */   a9: () => (/* binding */ Rn),\n/* harmony export */   aa: () => (/* binding */ Dn),\n/* harmony export */   ab: () => (/* binding */ fs),\n/* harmony export */   ac: () => (/* binding */ Oo),\n/* harmony export */   ad: () => (/* binding */ Sr),\n/* harmony export */   ae: () => (/* binding */ xr),\n/* harmony export */   af: () => (/* binding */ Nn),\n/* harmony export */   ag: () => (/* binding */ Mn),\n/* harmony export */   ah: () => (/* binding */ $s),\n/* harmony export */   ai: () => (/* binding */ Ts),\n/* harmony export */   aj: () => (/* binding */ Lo),\n/* harmony export */   ak: () => (/* binding */ Ls),\n/* harmony export */   al: () => (/* binding */ Ro),\n/* harmony export */   am: () => (/* binding */ Mo),\n/* harmony export */   an: () => (/* binding */ Io),\n/* harmony export */   ao: () => (/* binding */ Do),\n/* harmony export */   ap: () => (/* binding */ be),\n/* harmony export */   aq: () => (/* binding */ Fo),\n/* harmony export */   ar: () => (/* binding */ Os),\n/* harmony export */   as: () => (/* binding */ Ao),\n/* harmony export */   at: () => (/* binding */ _o),\n/* harmony export */   au: () => (/* binding */ No),\n/* harmony export */   av: () => (/* binding */ $o),\n/* harmony export */   aw: () => (/* binding */ Ds),\n/* harmony export */   ax: () => (/* binding */ _s),\n/* harmony export */   b: () => (/* binding */ bs),\n/* harmony export */   c: () => (/* binding */ Ms),\n/* harmony export */   d: () => (/* binding */ us),\n/* harmony export */   e: () => (/* binding */ Go),\n/* harmony export */   f: () => (/* binding */ Rs),\n/* harmony export */   g: () => (/* binding */ co),\n/* harmony export */   h: () => (/* binding */ cs),\n/* harmony export */   i: () => (/* binding */ Is),\n/* harmony export */   j: () => (/* binding */ xo),\n/* harmony export */   k: () => (/* binding */ gs),\n/* harmony export */   l: () => (/* binding */ _),\n/* harmony export */   m: () => (/* binding */ ko),\n/* harmony export */   n: () => (/* binding */ ji),\n/* harmony export */   o: () => (/* binding */ ao),\n/* harmony export */   p: () => (/* binding */ N),\n/* harmony export */   q: () => (/* binding */ Zo),\n/* harmony export */   r: () => (/* binding */ no),\n/* harmony export */   s: () => (/* binding */ ys),\n/* harmony export */   t: () => (/* binding */ On),\n/* harmony export */   u: () => (/* binding */ Ns),\n/* harmony export */   v: () => (/* binding */ ns),\n/* harmony export */   w: () => (/* binding */ To),\n/* harmony export */   x: () => (/* binding */ Jo),\n/* harmony export */   y: () => (/* binding */ as),\n/* harmony export */   z: () => (/* binding */ Vo)\n/* harmony export */ });\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.5.9/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.2.14_react-dom@18.3.1_react@18.3.1__react@18.3.1_sass@1.80.3/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nconst Ke = Math.min, ue = Math.max, ke = Math.round, te = (e) => ({\n  x: e,\n  y: e\n}), Bn = {\n  left: \"right\",\n  right: \"left\",\n  bottom: \"top\",\n  top: \"bottom\"\n}, Vn = {\n  start: \"end\",\n  end: \"start\"\n};\nfunction bt(e, t, n) {\n  return ue(e, Ke(t, n));\n}\nfunction Ne(e, t) {\n  return typeof e == \"function\" ? e(t) : e;\n}\nfunction oe(e) {\n  return e.split(\"-\")[0];\n}\nfunction $e(e) {\n  return e.split(\"-\")[1];\n}\nfunction jt(e) {\n  return e === \"x\" ? \"y\" : \"x\";\n}\nfunction Wt(e) {\n  return e === \"y\" ? \"height\" : \"width\";\n}\nfunction Ue(e) {\n  return [\"top\", \"bottom\"].includes(oe(e)) ? \"y\" : \"x\";\n}\nfunction Bt(e) {\n  return jt(Ue(e));\n}\nfunction Hn(e, t, n) {\n  n === void 0 && (n = !1);\n  const r = $e(e), i = Bt(e), o = Wt(i);\n  let s = i === \"x\" ? r === (n ? \"end\" : \"start\") ? \"right\" : \"left\" : r === \"start\" ? \"bottom\" : \"top\";\n  return t.reference[o] > t.floating[o] && (s = Oe(s)), [s, Oe(s)];\n}\nfunction zn(e) {\n  const t = Oe(e);\n  return [Qe(e), t, Qe(t)];\n}\nfunction Qe(e) {\n  return e.replace(/start|end/g, (t) => Vn[t]);\n}\nfunction Yn(e, t, n) {\n  const r = [\"left\", \"right\"], i = [\"right\", \"left\"], o = [\"top\", \"bottom\"], s = [\"bottom\", \"top\"];\n  switch (e) {\n    case \"top\":\n    case \"bottom\":\n      return n ? t ? i : r : t ? r : i;\n    case \"left\":\n    case \"right\":\n      return t ? o : s;\n    default:\n      return [];\n  }\n}\nfunction Gn(e, t, n, r) {\n  const i = $e(e);\n  let o = Yn(oe(e), n === \"start\", r);\n  return i && (o = o.map((s) => s + \"-\" + i), t && (o = o.concat(o.map(Qe)))), o;\n}\nfunction Oe(e) {\n  return e.replace(/left|right|bottom|top/g, (t) => Bn[t]);\n}\nfunction Kn(e) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...e\n  };\n}\nfunction Qn(e) {\n  return typeof e != \"number\" ? Kn(e) : {\n    top: e,\n    right: e,\n    bottom: e,\n    left: e\n  };\n}\nfunction Le(e) {\n  const {\n    x: t,\n    y: n,\n    width: r,\n    height: i\n  } = e;\n  return {\n    width: r,\n    height: i,\n    top: n,\n    left: t,\n    right: t + r,\n    bottom: n + i,\n    x: t,\n    y: n\n  };\n}\nfunction yt(e, t, n) {\n  let {\n    reference: r,\n    floating: i\n  } = e;\n  const o = Ue(t), s = Bt(t), a = Wt(s), c = oe(t), u = o === \"y\", l = r.x + r.width / 2 - i.width / 2, f = r.y + r.height / 2 - i.height / 2, h = r[a] / 2 - i[a] / 2;\n  let d;\n  switch (c) {\n    case \"top\":\n      d = {\n        x: l,\n        y: r.y - i.height\n      };\n      break;\n    case \"bottom\":\n      d = {\n        x: l,\n        y: r.y + r.height\n      };\n      break;\n    case \"right\":\n      d = {\n        x: r.x + r.width,\n        y: f\n      };\n      break;\n    case \"left\":\n      d = {\n        x: r.x - i.width,\n        y: f\n      };\n      break;\n    default:\n      d = {\n        x: r.x,\n        y: r.y\n      };\n  }\n  switch ($e(t)) {\n    case \"start\":\n      d[s] -= h * (n && u ? -1 : 1);\n      break;\n    case \"end\":\n      d[s] += h * (n && u ? -1 : 1);\n      break;\n  }\n  return d;\n}\nconst Jn = async (e, t, n) => {\n  const {\n    placement: r = \"bottom\",\n    strategy: i = \"absolute\",\n    middleware: o = [],\n    platform: s\n  } = n, a = o.filter(Boolean), c = await (s.isRTL == null ? void 0 : s.isRTL(t));\n  let u = await s.getElementRects({\n    reference: e,\n    floating: t,\n    strategy: i\n  }), {\n    x: l,\n    y: f\n  } = yt(u, r, c), h = r, d = {}, m = 0;\n  for (let p = 0; p < a.length; p++) {\n    const {\n      name: g,\n      fn: v\n    } = a[p], {\n      x: E,\n      y: P,\n      data: L,\n      reset: C\n    } = await v({\n      x: l,\n      y: f,\n      initialPlacement: r,\n      placement: h,\n      strategy: i,\n      middlewareData: d,\n      rects: u,\n      platform: s,\n      elements: {\n        reference: e,\n        floating: t\n      }\n    });\n    l = E ?? l, f = P ?? f, d = {\n      ...d,\n      [g]: {\n        ...d[g],\n        ...L\n      }\n    }, C && m <= 50 && (m++, typeof C == \"object\" && (C.placement && (h = C.placement), C.rects && (u = C.rects === !0 ? await s.getElementRects({\n      reference: e,\n      floating: t,\n      strategy: i\n    }) : C.rects), {\n      x: l,\n      y: f\n    } = yt(u, h, c)), p = -1);\n  }\n  return {\n    x: l,\n    y: f,\n    placement: h,\n    strategy: i,\n    middlewareData: d\n  };\n};\nasync function Vt(e, t) {\n  var n;\n  t === void 0 && (t = {});\n  const {\n    x: r,\n    y: i,\n    platform: o,\n    rects: s,\n    elements: a,\n    strategy: c\n  } = e, {\n    boundary: u = \"clippingAncestors\",\n    rootBoundary: l = \"viewport\",\n    elementContext: f = \"floating\",\n    altBoundary: h = !1,\n    padding: d = 0\n  } = Ne(t, e), m = Qn(d), g = a[h ? f === \"floating\" ? \"reference\" : \"floating\" : f], v = Le(await o.getClippingRect({\n    element: (n = await (o.isElement == null ? void 0 : o.isElement(g))) == null || n ? g : g.contextElement || await (o.getDocumentElement == null ? void 0 : o.getDocumentElement(a.floating)),\n    boundary: u,\n    rootBoundary: l,\n    strategy: c\n  })), E = f === \"floating\" ? {\n    ...s.floating,\n    x: r,\n    y: i\n  } : s.reference, P = await (o.getOffsetParent == null ? void 0 : o.getOffsetParent(a.floating)), L = await (o.isElement == null ? void 0 : o.isElement(P)) ? await (o.getScale == null ? void 0 : o.getScale(P)) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  }, C = Le(o.convertOffsetParentRelativeRectToViewportRelativeRect ? await o.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements: a,\n    rect: E,\n    offsetParent: P,\n    strategy: c\n  }) : E);\n  return {\n    top: (v.top - C.top + m.top) / L.y,\n    bottom: (C.bottom - v.bottom + m.bottom) / L.y,\n    left: (v.left - C.left + m.left) / L.x,\n    right: (C.right - v.right + m.right) / L.x\n  };\n}\nconst qn = function(e) {\n  return e === void 0 && (e = {}), {\n    name: \"flip\",\n    options: e,\n    async fn(t) {\n      var n, r;\n      const {\n        placement: i,\n        middlewareData: o,\n        rects: s,\n        initialPlacement: a,\n        platform: c,\n        elements: u\n      } = t, {\n        mainAxis: l = !0,\n        crossAxis: f = !0,\n        fallbackPlacements: h,\n        fallbackStrategy: d = \"bestFit\",\n        fallbackAxisSideDirection: m = \"none\",\n        flipAlignment: p = !0,\n        ...g\n      } = Ne(e, t);\n      if ((n = o.arrow) != null && n.alignmentOffset)\n        return {};\n      const v = oe(i), E = oe(a) === a, P = await (c.isRTL == null ? void 0 : c.isRTL(u.floating)), L = h || (E || !p ? [Oe(a)] : zn(a));\n      !h && m !== \"none\" && L.push(...Gn(a, p, m, P));\n      const C = [a, ...L], ie = await Vt(t, g), K = [];\n      let T = ((r = o.flip) == null ? void 0 : r.overflows) || [];\n      if (l && K.push(ie[v]), f) {\n        const S = Hn(i, s, P);\n        K.push(ie[S[0]], ie[S[1]]);\n      }\n      if (T = [...T, {\n        placement: i,\n        overflows: K\n      }], !K.every((S) => S <= 0)) {\n        var x, I;\n        const S = (((x = o.flip) == null ? void 0 : x.index) || 0) + 1, V = C[S];\n        if (V)\n          return {\n            data: {\n              index: S,\n              overflows: T\n            },\n            reset: {\n              placement: V\n            }\n          };\n        let X = (I = T.filter((Z) => Z.overflows[0] <= 0).sort((Z, ce) => Z.overflows[1] - ce.overflows[1])[0]) == null ? void 0 : I.placement;\n        if (!X)\n          switch (d) {\n            case \"bestFit\": {\n              var w;\n              const Z = (w = T.map((ce) => [ce.placement, ce.overflows.filter((ge) => ge > 0).reduce((ge, Un) => ge + Un, 0)]).sort((ce, ge) => ce[1] - ge[1])[0]) == null ? void 0 : w[0];\n              Z && (X = Z);\n              break;\n            }\n            case \"initialPlacement\":\n              X = a;\n              break;\n          }\n        if (i !== X)\n          return {\n            reset: {\n              placement: X\n            }\n          };\n      }\n      return {};\n    }\n  };\n};\nasync function Xn(e, t) {\n  const {\n    placement: n,\n    platform: r,\n    elements: i\n  } = e, o = await (r.isRTL == null ? void 0 : r.isRTL(i.floating)), s = oe(n), a = $e(n), c = Ue(n) === \"y\", u = [\"left\", \"top\"].includes(s) ? -1 : 1, l = o && c ? -1 : 1, f = Ne(t, e);\n  let {\n    mainAxis: h,\n    crossAxis: d,\n    alignmentAxis: m\n  } = typeof f == \"number\" ? {\n    mainAxis: f,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...f\n  };\n  return a && typeof m == \"number\" && (d = a === \"end\" ? m * -1 : m), c ? {\n    x: d * l,\n    y: h * u\n  } : {\n    x: h * u,\n    y: d * l\n  };\n}\nconst Zn = function(e) {\n  return e === void 0 && (e = 0), {\n    name: \"offset\",\n    options: e,\n    async fn(t) {\n      var n, r;\n      const {\n        x: i,\n        y: o,\n        placement: s,\n        middlewareData: a\n      } = t, c = await Xn(t, e);\n      return s === ((n = a.offset) == null ? void 0 : n.placement) && (r = a.arrow) != null && r.alignmentOffset ? {} : {\n        x: i + c.x,\n        y: o + c.y,\n        data: {\n          ...c,\n          placement: s\n        }\n      };\n    }\n  };\n}, er = function(e) {\n  return e === void 0 && (e = {}), {\n    name: \"shift\",\n    options: e,\n    async fn(t) {\n      const {\n        x: n,\n        y: r,\n        placement: i\n      } = t, {\n        mainAxis: o = !0,\n        crossAxis: s = !1,\n        limiter: a = {\n          fn: (g) => {\n            let {\n              x: v,\n              y: E\n            } = g;\n            return {\n              x: v,\n              y: E\n            };\n          }\n        },\n        ...c\n      } = Ne(e, t), u = {\n        x: n,\n        y: r\n      }, l = await Vt(t, c), f = Ue(oe(i)), h = jt(f);\n      let d = u[h], m = u[f];\n      if (o) {\n        const g = h === \"y\" ? \"top\" : \"left\", v = h === \"y\" ? \"bottom\" : \"right\", E = d + l[g], P = d - l[v];\n        d = bt(E, d, P);\n      }\n      if (s) {\n        const g = f === \"y\" ? \"top\" : \"left\", v = f === \"y\" ? \"bottom\" : \"right\", E = m + l[g], P = m - l[v];\n        m = bt(E, m, P);\n      }\n      const p = a.fn({\n        ...t,\n        [h]: d,\n        [f]: m\n      });\n      return {\n        ...p,\n        data: {\n          x: p.x - n,\n          y: p.y - r\n        }\n      };\n    }\n  };\n};\nfunction Fe() {\n  return typeof window < \"u\";\n}\nfunction ve(e) {\n  return Ht(e) ? (e.nodeName || \"\").toLowerCase() : \"#document\";\n}\nfunction U(e) {\n  var t;\n  return (e == null || (t = e.ownerDocument) == null ? void 0 : t.defaultView) || window;\n}\nfunction J(e) {\n  var t;\n  return (t = (Ht(e) ? e.ownerDocument : e.document) || window.document) == null ? void 0 : t.documentElement;\n}\nfunction Ht(e) {\n  return Fe() ? e instanceof Node || e instanceof U(e).Node : !1;\n}\nfunction H(e) {\n  return Fe() ? e instanceof Element || e instanceof U(e).Element : !1;\n}\nfunction G(e) {\n  return Fe() ? e instanceof HTMLElement || e instanceof U(e).HTMLElement : !1;\n}\nfunction wt(e) {\n  return !Fe() || typeof ShadowRoot > \"u\" ? !1 : e instanceof ShadowRoot || e instanceof U(e).ShadowRoot;\n}\nfunction Ee(e) {\n  const {\n    overflow: t,\n    overflowX: n,\n    overflowY: r,\n    display: i\n  } = z(e);\n  return /auto|scroll|overlay|hidden|clip/.test(t + r + n) && ![\"inline\", \"contents\"].includes(i);\n}\nfunction tr(e) {\n  return [\"table\", \"td\", \"th\"].includes(ve(e));\n}\nfunction je(e) {\n  return [\":popover-open\", \":modal\"].some((t) => {\n    try {\n      return e.matches(t);\n    } catch {\n      return !1;\n    }\n  });\n}\nfunction st(e) {\n  const t = at(), n = H(e) ? z(e) : e;\n  return n.transform !== \"none\" || n.perspective !== \"none\" || (n.containerType ? n.containerType !== \"normal\" : !1) || !t && (n.backdropFilter ? n.backdropFilter !== \"none\" : !1) || !t && (n.filter ? n.filter !== \"none\" : !1) || [\"transform\", \"perspective\", \"filter\"].some((r) => (n.willChange || \"\").includes(r)) || [\"paint\", \"layout\", \"strict\", \"content\"].some((r) => (n.contain || \"\").includes(r));\n}\nfunction nr(e) {\n  let t = ne(e);\n  for (; G(t) && !de(t); ) {\n    if (st(t))\n      return t;\n    if (je(t))\n      return null;\n    t = ne(t);\n  }\n  return null;\n}\nfunction at() {\n  return typeof CSS > \"u\" || !CSS.supports ? !1 : CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nfunction de(e) {\n  return [\"html\", \"body\", \"#document\"].includes(ve(e));\n}\nfunction z(e) {\n  return U(e).getComputedStyle(e);\n}\nfunction We(e) {\n  return H(e) ? {\n    scrollLeft: e.scrollLeft,\n    scrollTop: e.scrollTop\n  } : {\n    scrollLeft: e.scrollX,\n    scrollTop: e.scrollY\n  };\n}\nfunction ne(e) {\n  if (ve(e) === \"html\")\n    return e;\n  const t = (\n    // Step into the shadow DOM of the parent of a slotted node.\n    e.assignedSlot || // DOM Element detected.\n    e.parentNode || // ShadowRoot detected.\n    wt(e) && e.host || // Fallback.\n    J(e)\n  );\n  return wt(t) ? t.host : t;\n}\nfunction zt(e) {\n  const t = ne(e);\n  return de(t) ? e.ownerDocument ? e.ownerDocument.body : e.body : G(t) && Ee(t) ? t : zt(t);\n}\nfunction Je(e, t, n) {\n  var r;\n  t === void 0 && (t = []), n === void 0 && (n = !0);\n  const i = zt(e), o = i === ((r = e.ownerDocument) == null ? void 0 : r.body), s = U(i);\n  if (o) {\n    const a = qe(s);\n    return t.concat(s, s.visualViewport || [], Ee(i) ? i : [], a && n ? Je(a) : []);\n  }\n  return t.concat(i, Je(i, [], n));\n}\nfunction qe(e) {\n  return e.parent && Object.getPrototypeOf(e.parent) ? e.frameElement : null;\n}\nfunction Yt(e) {\n  const t = z(e);\n  let n = parseFloat(t.width) || 0, r = parseFloat(t.height) || 0;\n  const i = G(e), o = i ? e.offsetWidth : n, s = i ? e.offsetHeight : r, a = ke(n) !== o || ke(r) !== s;\n  return a && (n = o, r = s), {\n    width: n,\n    height: r,\n    $: a\n  };\n}\nfunction Gt(e) {\n  return H(e) ? e : e.contextElement;\n}\nfunction le(e) {\n  const t = Gt(e);\n  if (!G(t))\n    return te(1);\n  const n = t.getBoundingClientRect(), {\n    width: r,\n    height: i,\n    $: o\n  } = Yt(t);\n  let s = (o ? ke(n.width) : n.width) / r, a = (o ? ke(n.height) : n.height) / i;\n  return (!s || !Number.isFinite(s)) && (s = 1), (!a || !Number.isFinite(a)) && (a = 1), {\n    x: s,\n    y: a\n  };\n}\nconst rr = /* @__PURE__ */ te(0);\nfunction Kt(e) {\n  const t = U(e);\n  return !at() || !t.visualViewport ? rr : {\n    x: t.visualViewport.offsetLeft,\n    y: t.visualViewport.offsetTop\n  };\n}\nfunction ir(e, t, n) {\n  return t === void 0 && (t = !1), !n || t && n !== U(e) ? !1 : t;\n}\nfunction we(e, t, n, r) {\n  t === void 0 && (t = !1), n === void 0 && (n = !1);\n  const i = e.getBoundingClientRect(), o = Gt(e);\n  let s = te(1);\n  t && (r ? H(r) && (s = le(r)) : s = le(e));\n  const a = ir(o, n, r) ? Kt(o) : te(0);\n  let c = (i.left + a.x) / s.x, u = (i.top + a.y) / s.y, l = i.width / s.x, f = i.height / s.y;\n  if (o) {\n    const h = U(o), d = r && H(r) ? U(r) : r;\n    let m = h, p = qe(m);\n    for (; p && r && d !== m; ) {\n      const g = le(p), v = p.getBoundingClientRect(), E = z(p), P = v.left + (p.clientLeft + parseFloat(E.paddingLeft)) * g.x, L = v.top + (p.clientTop + parseFloat(E.paddingTop)) * g.y;\n      c *= g.x, u *= g.y, l *= g.x, f *= g.y, c += P, u += L, m = U(p), p = qe(m);\n    }\n  }\n  return Le({\n    width: l,\n    height: f,\n    x: c,\n    y: u\n  });\n}\nfunction or(e) {\n  let {\n    elements: t,\n    rect: n,\n    offsetParent: r,\n    strategy: i\n  } = e;\n  const o = i === \"fixed\", s = J(r), a = t ? je(t.floating) : !1;\n  if (r === s || a && o)\n    return n;\n  let c = {\n    scrollLeft: 0,\n    scrollTop: 0\n  }, u = te(1);\n  const l = te(0), f = G(r);\n  if ((f || !f && !o) && ((ve(r) !== \"body\" || Ee(s)) && (c = We(r)), G(r))) {\n    const h = we(r);\n    u = le(r), l.x = h.x + r.clientLeft, l.y = h.y + r.clientTop;\n  }\n  return {\n    width: n.width * u.x,\n    height: n.height * u.y,\n    x: n.x * u.x - c.scrollLeft * u.x + l.x,\n    y: n.y * u.y - c.scrollTop * u.y + l.y\n  };\n}\nfunction sr(e) {\n  return Array.from(e.getClientRects());\n}\nfunction Xe(e, t) {\n  const n = We(e).scrollLeft;\n  return t ? t.left + n : we(J(e)).left + n;\n}\nfunction ar(e) {\n  const t = J(e), n = We(e), r = e.ownerDocument.body, i = ue(t.scrollWidth, t.clientWidth, r.scrollWidth, r.clientWidth), o = ue(t.scrollHeight, t.clientHeight, r.scrollHeight, r.clientHeight);\n  let s = -n.scrollLeft + Xe(e);\n  const a = -n.scrollTop;\n  return z(r).direction === \"rtl\" && (s += ue(t.clientWidth, r.clientWidth) - i), {\n    width: i,\n    height: o,\n    x: s,\n    y: a\n  };\n}\nfunction cr(e, t) {\n  const n = U(e), r = J(e), i = n.visualViewport;\n  let o = r.clientWidth, s = r.clientHeight, a = 0, c = 0;\n  if (i) {\n    o = i.width, s = i.height;\n    const u = at();\n    (!u || u && t === \"fixed\") && (a = i.offsetLeft, c = i.offsetTop);\n  }\n  return {\n    width: o,\n    height: s,\n    x: a,\n    y: c\n  };\n}\nfunction ur(e, t) {\n  const n = we(e, !0, t === \"fixed\"), r = n.top + e.clientTop, i = n.left + e.clientLeft, o = G(e) ? le(e) : te(1), s = e.clientWidth * o.x, a = e.clientHeight * o.y, c = i * o.x, u = r * o.y;\n  return {\n    width: s,\n    height: a,\n    x: c,\n    y: u\n  };\n}\nfunction St(e, t, n) {\n  let r;\n  if (t === \"viewport\")\n    r = cr(e, n);\n  else if (t === \"document\")\n    r = ar(J(e));\n  else if (H(t))\n    r = ur(t, n);\n  else {\n    const i = Kt(e);\n    r = {\n      ...t,\n      x: t.x - i.x,\n      y: t.y - i.y\n    };\n  }\n  return Le(r);\n}\nfunction Qt(e, t) {\n  const n = ne(e);\n  return n === t || !H(n) || de(n) ? !1 : z(n).position === \"fixed\" || Qt(n, t);\n}\nfunction lr(e, t) {\n  const n = t.get(e);\n  if (n)\n    return n;\n  let r = Je(e, [], !1).filter((a) => H(a) && ve(a) !== \"body\"), i = null;\n  const o = z(e).position === \"fixed\";\n  let s = o ? ne(e) : e;\n  for (; H(s) && !de(s); ) {\n    const a = z(s), c = st(s);\n    !c && a.position === \"fixed\" && (i = null), (o ? !c && !i : !c && a.position === \"static\" && !!i && [\"absolute\", \"fixed\"].includes(i.position) || Ee(s) && !c && Qt(e, s)) ? r = r.filter((l) => l !== s) : i = a, s = ne(s);\n  }\n  return t.set(e, r), r;\n}\nfunction fr(e) {\n  let {\n    element: t,\n    boundary: n,\n    rootBoundary: r,\n    strategy: i\n  } = e;\n  const s = [...n === \"clippingAncestors\" ? je(t) ? [] : lr(t, this._c) : [].concat(n), r], a = s[0], c = s.reduce((u, l) => {\n    const f = St(t, l, i);\n    return u.top = ue(f.top, u.top), u.right = Ke(f.right, u.right), u.bottom = Ke(f.bottom, u.bottom), u.left = ue(f.left, u.left), u;\n  }, St(t, a, i));\n  return {\n    width: c.right - c.left,\n    height: c.bottom - c.top,\n    x: c.left,\n    y: c.top\n  };\n}\nfunction dr(e) {\n  const {\n    width: t,\n    height: n\n  } = Yt(e);\n  return {\n    width: t,\n    height: n\n  };\n}\nfunction pr(e, t, n) {\n  const r = G(t), i = J(t), o = n === \"fixed\", s = we(e, !0, o, t);\n  let a = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const c = te(0);\n  if (r || !r && !o)\n    if ((ve(t) !== \"body\" || Ee(i)) && (a = We(t)), r) {\n      const d = we(t, !0, o, t);\n      c.x = d.x + t.clientLeft, c.y = d.y + t.clientTop;\n    } else i && (c.x = Xe(i));\n  let u = 0, l = 0;\n  if (i && !r && !o) {\n    const d = i.getBoundingClientRect();\n    l = d.top + a.scrollTop, u = d.left + a.scrollLeft - // RTL <body> scrollbar.\n    Xe(i, d);\n  }\n  const f = s.left + a.scrollLeft - c.x - u, h = s.top + a.scrollTop - c.y - l;\n  return {\n    x: f,\n    y: h,\n    width: s.width,\n    height: s.height\n  };\n}\nfunction He(e) {\n  return z(e).position === \"static\";\n}\nfunction xt(e, t) {\n  if (!G(e) || z(e).position === \"fixed\")\n    return null;\n  if (t)\n    return t(e);\n  let n = e.offsetParent;\n  return J(e) === n && (n = n.ownerDocument.body), n;\n}\nfunction Jt(e, t) {\n  const n = U(e);\n  if (je(e))\n    return n;\n  if (!G(e)) {\n    let i = ne(e);\n    for (; i && !de(i); ) {\n      if (H(i) && !He(i))\n        return i;\n      i = ne(i);\n    }\n    return n;\n  }\n  let r = xt(e, t);\n  for (; r && tr(r) && He(r); )\n    r = xt(r, t);\n  return r && de(r) && He(r) && !st(r) ? n : r || nr(e) || n;\n}\nconst hr = async function(e) {\n  const t = this.getOffsetParent || Jt, n = this.getDimensions, r = await n(e.floating);\n  return {\n    reference: pr(e.reference, await t(e.floating), e.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: r.width,\n      height: r.height\n    }\n  };\n};\nfunction vr(e) {\n  return z(e).direction === \"rtl\";\n}\nconst mr = {\n  convertOffsetParentRelativeRectToViewportRelativeRect: or,\n  getDocumentElement: J,\n  getClippingRect: fr,\n  getOffsetParent: Jt,\n  getElementRects: hr,\n  getClientRects: sr,\n  getDimensions: dr,\n  getScale: le,\n  isElement: H,\n  isRTL: vr\n}, gr = Zn, br = er, yr = qn, wr = (e, t, n) => {\n  const r = /* @__PURE__ */ new Map(), i = {\n    platform: mr,\n    ...n\n  }, o = {\n    ...i.platform,\n    _c: r\n  };\n  return Jn(e, t, {\n    ...i,\n    platform: o\n  });\n};\nvar Sr = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction xr(e) {\n  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n}\nvar qt = { exports: {} };\n(function(e) {\n  (function(t, n) {\n    e.exports ? e.exports = n() : t.log = n();\n  })(Sr, function() {\n    var t = function() {\n    }, n = \"undefined\", r = typeof window !== n && typeof window.navigator !== n && /Trident\\/|MSIE /.test(window.navigator.userAgent), i = [\n      \"trace\",\n      \"debug\",\n      \"info\",\n      \"warn\",\n      \"error\"\n    ], o = {}, s = null;\n    function a(p, g) {\n      var v = p[g];\n      if (typeof v.bind == \"function\")\n        return v.bind(p);\n      try {\n        return Function.prototype.bind.call(v, p);\n      } catch {\n        return function() {\n          return Function.prototype.apply.apply(v, [p, arguments]);\n        };\n      }\n    }\n    function c() {\n      console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();\n    }\n    function u(p) {\n      return p === \"debug\" && (p = \"log\"), typeof console === n ? !1 : p === \"trace\" && r ? c : console[p] !== void 0 ? a(console, p) : console.log !== void 0 ? a(console, \"log\") : t;\n    }\n    function l() {\n      for (var p = this.getLevel(), g = 0; g < i.length; g++) {\n        var v = i[g];\n        this[v] = g < p ? t : this.methodFactory(v, p, this.name);\n      }\n      if (this.log = this.debug, typeof console === n && p < this.levels.SILENT)\n        return \"No console available for logging\";\n    }\n    function f(p) {\n      return function() {\n        typeof console !== n && (l.call(this), this[p].apply(this, arguments));\n      };\n    }\n    function h(p, g, v) {\n      return u(p) || f.apply(this, arguments);\n    }\n    function d(p, g) {\n      var v = this, E, P, L, C = \"loglevel\";\n      typeof p == \"string\" ? C += \":\" + p : typeof p == \"symbol\" && (C = void 0);\n      function ie(w) {\n        var S = (i[w] || \"silent\").toUpperCase();\n        if (!(typeof window === n || !C)) {\n          try {\n            window.localStorage[C] = S;\n            return;\n          } catch {\n          }\n          try {\n            window.document.cookie = encodeURIComponent(C) + \"=\" + S + \";\";\n          } catch {\n          }\n        }\n      }\n      function K() {\n        var w;\n        if (!(typeof window === n || !C)) {\n          try {\n            w = window.localStorage[C];\n          } catch {\n          }\n          if (typeof w === n)\n            try {\n              var S = window.document.cookie, V = encodeURIComponent(C), X = S.indexOf(V + \"=\");\n              X !== -1 && (w = /^([^;]+)/.exec(\n                S.slice(X + V.length + 1)\n              )[1]);\n            } catch {\n            }\n          return v.levels[w] === void 0 && (w = void 0), w;\n        }\n      }\n      function T() {\n        if (!(typeof window === n || !C)) {\n          try {\n            window.localStorage.removeItem(C);\n          } catch {\n          }\n          try {\n            window.document.cookie = encodeURIComponent(C) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch {\n          }\n        }\n      }\n      function x(w) {\n        var S = w;\n        if (typeof S == \"string\" && v.levels[S.toUpperCase()] !== void 0 && (S = v.levels[S.toUpperCase()]), typeof S == \"number\" && S >= 0 && S <= v.levels.SILENT)\n          return S;\n        throw new TypeError(\"log.setLevel() called with invalid level: \" + w);\n      }\n      v.name = p, v.levels = {\n        TRACE: 0,\n        DEBUG: 1,\n        INFO: 2,\n        WARN: 3,\n        ERROR: 4,\n        SILENT: 5\n      }, v.methodFactory = g || h, v.getLevel = function() {\n        return L ?? P ?? E;\n      }, v.setLevel = function(w, S) {\n        return L = x(w), S !== !1 && ie(L), l.call(v);\n      }, v.setDefaultLevel = function(w) {\n        P = x(w), K() || v.setLevel(w, !1);\n      }, v.resetLevel = function() {\n        L = null, T(), l.call(v);\n      }, v.enableAll = function(w) {\n        v.setLevel(v.levels.TRACE, w);\n      }, v.disableAll = function(w) {\n        v.setLevel(v.levels.SILENT, w);\n      }, v.rebuild = function() {\n        if (s !== v && (E = x(s.getLevel())), l.call(v), s === v)\n          for (var w in o)\n            o[w].rebuild();\n      }, E = x(\n        s ? s.getLevel() : \"WARN\"\n      );\n      var I = K();\n      I != null && (L = x(I)), l.call(v);\n    }\n    s = new d(), s.getLogger = function(g) {\n      if (typeof g != \"symbol\" && typeof g != \"string\" || g === \"\")\n        throw new TypeError(\"You must supply a name when creating a logger.\");\n      var v = o[g];\n      return v || (v = o[g] = new d(\n        g,\n        s.methodFactory\n      )), v;\n    };\n    var m = typeof window !== n ? window.log : void 0;\n    return s.noConflict = function() {\n      return typeof window !== n && window.log === s && (window.log = m), s;\n    }, s.getLoggers = function() {\n      return o;\n    }, s.default = s, s;\n  });\n})(qt);\nvar Er = qt.exports;\nconst Tr = /* @__PURE__ */ xr(Er);\nvar Ze = function(e, t) {\n  return Ze = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(n, r) {\n    n.__proto__ = r;\n  } || function(n, r) {\n    for (var i in r) Object.prototype.hasOwnProperty.call(r, i) && (n[i] = r[i]);\n  }, Ze(e, t);\n};\nfunction q(e, t) {\n  if (typeof t != \"function\" && t !== null)\n    throw new TypeError(\"Class extends value \" + String(t) + \" is not a constructor or null\");\n  Ze(e, t);\n  function n() {\n    this.constructor = e;\n  }\n  e.prototype = t === null ? Object.create(t) : (n.prototype = t.prototype, new n());\n}\nfunction Cr(e, t, n, r) {\n  function i(o) {\n    return o instanceof n ? o : new n(function(s) {\n      s(o);\n    });\n  }\n  return new (n || (n = Promise))(function(o, s) {\n    function a(l) {\n      try {\n        u(r.next(l));\n      } catch (f) {\n        s(f);\n      }\n    }\n    function c(l) {\n      try {\n        u(r.throw(l));\n      } catch (f) {\n        s(f);\n      }\n    }\n    function u(l) {\n      l.done ? o(l.value) : i(l.value).then(a, c);\n    }\n    u((r = r.apply(e, t || [])).next());\n  });\n}\nfunction Xt(e, t) {\n  var n = { label: 0, sent: function() {\n    if (o[0] & 1) throw o[1];\n    return o[1];\n  }, trys: [], ops: [] }, r, i, o, s = Object.create((typeof Iterator == \"function\" ? Iterator : Object).prototype);\n  return s.next = a(0), s.throw = a(1), s.return = a(2), typeof Symbol == \"function\" && (s[Symbol.iterator] = function() {\n    return this;\n  }), s;\n  function a(u) {\n    return function(l) {\n      return c([u, l]);\n    };\n  }\n  function c(u) {\n    if (r) throw new TypeError(\"Generator is already executing.\");\n    for (; s && (s = 0, u[0] && (n = 0)), n; ) try {\n      if (r = 1, i && (o = u[0] & 2 ? i.return : u[0] ? i.throw || ((o = i.return) && o.call(i), 0) : i.next) && !(o = o.call(i, u[1])).done) return o;\n      switch (i = 0, o && (u = [u[0] & 2, o.value]), u[0]) {\n        case 0:\n        case 1:\n          o = u;\n          break;\n        case 4:\n          return n.label++, { value: u[1], done: !1 };\n        case 5:\n          n.label++, i = u[1], u = [0];\n          continue;\n        case 7:\n          u = n.ops.pop(), n.trys.pop();\n          continue;\n        default:\n          if (o = n.trys, !(o = o.length > 0 && o[o.length - 1]) && (u[0] === 6 || u[0] === 2)) {\n            n = 0;\n            continue;\n          }\n          if (u[0] === 3 && (!o || u[1] > o[0] && u[1] < o[3])) {\n            n.label = u[1];\n            break;\n          }\n          if (u[0] === 6 && n.label < o[1]) {\n            n.label = o[1], o = u;\n            break;\n          }\n          if (o && n.label < o[2]) {\n            n.label = o[2], n.ops.push(u);\n            break;\n          }\n          o[2] && n.ops.pop(), n.trys.pop();\n          continue;\n      }\n      u = t.call(e, n);\n    } catch (l) {\n      u = [6, l], i = 0;\n    } finally {\n      r = o = 0;\n    }\n    if (u[0] & 5) throw u[1];\n    return { value: u[0] ? u[1] : void 0, done: !0 };\n  }\n}\nfunction pe(e) {\n  var t = typeof Symbol == \"function\" && Symbol.iterator, n = t && e[t], r = 0;\n  if (n) return n.call(e);\n  if (e && typeof e.length == \"number\") return {\n    next: function() {\n      return e && r >= e.length && (e = void 0), { value: e && e[r++], done: !e };\n    }\n  };\n  throw new TypeError(t ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction he(e, t) {\n  var n = typeof Symbol == \"function\" && e[Symbol.iterator];\n  if (!n) return e;\n  var r = n.call(e), i, o = [], s;\n  try {\n    for (; (t === void 0 || t-- > 0) && !(i = r.next()).done; ) o.push(i.value);\n  } catch (a) {\n    s = { error: a };\n  } finally {\n    try {\n      i && !i.done && (n = r.return) && n.call(r);\n    } finally {\n      if (s) throw s.error;\n    }\n  }\n  return o;\n}\nfunction Se(e, t, n) {\n  if (n || arguments.length === 2) for (var r = 0, i = t.length, o; r < i; r++)\n    (o || !(r in t)) && (o || (o = Array.prototype.slice.call(t, 0, r)), o[r] = t[r]);\n  return e.concat(o || Array.prototype.slice.call(t));\n}\nfunction fe(e) {\n  return this instanceof fe ? (this.v = e, this) : new fe(e);\n}\nfunction Pr(e, t, n) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var r = n.apply(e, t || []), i, o = [];\n  return i = Object.create((typeof AsyncIterator == \"function\" ? AsyncIterator : Object).prototype), a(\"next\"), a(\"throw\"), a(\"return\", s), i[Symbol.asyncIterator] = function() {\n    return this;\n  }, i;\n  function s(d) {\n    return function(m) {\n      return Promise.resolve(m).then(d, f);\n    };\n  }\n  function a(d, m) {\n    r[d] && (i[d] = function(p) {\n      return new Promise(function(g, v) {\n        o.push([d, p, g, v]) > 1 || c(d, p);\n      });\n    }, m && (i[d] = m(i[d])));\n  }\n  function c(d, m) {\n    try {\n      u(r[d](m));\n    } catch (p) {\n      h(o[0][3], p);\n    }\n  }\n  function u(d) {\n    d.value instanceof fe ? Promise.resolve(d.value.v).then(l, f) : h(o[0][2], d);\n  }\n  function l(d) {\n    c(\"next\", d);\n  }\n  function f(d) {\n    c(\"throw\", d);\n  }\n  function h(d, m) {\n    d(m), o.shift(), o.length && c(o[0][0], o[0][1]);\n  }\n}\nfunction Ar(e) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var t = e[Symbol.asyncIterator], n;\n  return t ? t.call(e) : (e = typeof pe == \"function\" ? pe(e) : e[Symbol.iterator](), n = {}, r(\"next\"), r(\"throw\"), r(\"return\"), n[Symbol.asyncIterator] = function() {\n    return this;\n  }, n);\n  function r(o) {\n    n[o] = e[o] && function(s) {\n      return new Promise(function(a, c) {\n        s = e[o](s), i(a, c, s.done, s.value);\n      });\n    };\n  }\n  function i(o, s, a, c) {\n    Promise.resolve(c).then(function(u) {\n      o({ value: u, done: a });\n    }, s);\n  }\n}\nfunction A(e) {\n  return typeof e == \"function\";\n}\nfunction ct(e) {\n  var t = function(r) {\n    Error.call(r), r.stack = new Error().stack;\n  }, n = e(t);\n  return n.prototype = Object.create(Error.prototype), n.prototype.constructor = n, n;\n}\nvar ze = ct(function(e) {\n  return function(n) {\n    e(this), this.message = n ? n.length + ` errors occurred during unsubscription:\n` + n.map(function(r, i) {\n      return i + 1 + \") \" + r.toString();\n    }).join(`\n  `) : \"\", this.name = \"UnsubscriptionError\", this.errors = n;\n  };\n});\nfunction _e(e, t) {\n  if (e) {\n    var n = e.indexOf(t);\n    0 <= n && e.splice(n, 1);\n  }\n}\nvar Te = function() {\n  function e(t) {\n    this.initialTeardown = t, this.closed = !1, this._parentage = null, this._finalizers = null;\n  }\n  return e.prototype.unsubscribe = function() {\n    var t, n, r, i, o;\n    if (!this.closed) {\n      this.closed = !0;\n      var s = this._parentage;\n      if (s)\n        if (this._parentage = null, Array.isArray(s))\n          try {\n            for (var a = pe(s), c = a.next(); !c.done; c = a.next()) {\n              var u = c.value;\n              u.remove(this);\n            }\n          } catch (p) {\n            t = { error: p };\n          } finally {\n            try {\n              c && !c.done && (n = a.return) && n.call(a);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n        else\n          s.remove(this);\n      var l = this.initialTeardown;\n      if (A(l))\n        try {\n          l();\n        } catch (p) {\n          o = p instanceof ze ? p.errors : [p];\n        }\n      var f = this._finalizers;\n      if (f) {\n        this._finalizers = null;\n        try {\n          for (var h = pe(f), d = h.next(); !d.done; d = h.next()) {\n            var m = d.value;\n            try {\n              Et(m);\n            } catch (p) {\n              o = o ?? [], p instanceof ze ? o = Se(Se([], he(o)), he(p.errors)) : o.push(p);\n            }\n          }\n        } catch (p) {\n          r = { error: p };\n        } finally {\n          try {\n            d && !d.done && (i = h.return) && i.call(h);\n          } finally {\n            if (r) throw r.error;\n          }\n        }\n      }\n      if (o)\n        throw new ze(o);\n    }\n  }, e.prototype.add = function(t) {\n    var n;\n    if (t && t !== this)\n      if (this.closed)\n        Et(t);\n      else {\n        if (t instanceof e) {\n          if (t.closed || t._hasParent(this))\n            return;\n          t._addParent(this);\n        }\n        (this._finalizers = (n = this._finalizers) !== null && n !== void 0 ? n : []).push(t);\n      }\n  }, e.prototype._hasParent = function(t) {\n    var n = this._parentage;\n    return n === t || Array.isArray(n) && n.includes(t);\n  }, e.prototype._addParent = function(t) {\n    var n = this._parentage;\n    this._parentage = Array.isArray(n) ? (n.push(t), n) : n ? [n, t] : t;\n  }, e.prototype._removeParent = function(t) {\n    var n = this._parentage;\n    n === t ? this._parentage = null : Array.isArray(n) && _e(n, t);\n  }, e.prototype.remove = function(t) {\n    var n = this._finalizers;\n    n && _e(n, t), t instanceof e && t._removeParent(this);\n  }, e.EMPTY = function() {\n    var t = new e();\n    return t.closed = !0, t;\n  }(), e;\n}(), Zt = Te.EMPTY;\nfunction en(e) {\n  return e instanceof Te || e && \"closed\" in e && A(e.remove) && A(e.add) && A(e.unsubscribe);\n}\nfunction Et(e) {\n  A(e) ? e() : e.unsubscribe();\n}\nvar tn = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: void 0,\n  useDeprecatedSynchronousErrorHandling: !1,\n  useDeprecatedNextContext: !1\n}, nn = {\n  setTimeout: function(e, t) {\n    for (var n = [], r = 2; r < arguments.length; r++)\n      n[r - 2] = arguments[r];\n    return setTimeout.apply(void 0, Se([e, t], he(n)));\n  },\n  clearTimeout: function(e) {\n    var t = nn.delegate;\n    return ((t == null ? void 0 : t.clearTimeout) || clearTimeout)(e);\n  },\n  delegate: void 0\n};\nfunction rn(e) {\n  nn.setTimeout(function() {\n    throw e;\n  });\n}\nfunction Ie() {\n}\nfunction Ae(e) {\n  e();\n}\nvar ut = function(e) {\n  q(t, e);\n  function t(n) {\n    var r = e.call(this) || this;\n    return r.isStopped = !1, n ? (r.destination = n, en(n) && n.add(r)) : r.destination = _r, r;\n  }\n  return t.create = function(n, r, i) {\n    return new et(n, r, i);\n  }, t.prototype.next = function(n) {\n    this.isStopped || this._next(n);\n  }, t.prototype.error = function(n) {\n    this.isStopped || (this.isStopped = !0, this._error(n));\n  }, t.prototype.complete = function() {\n    this.isStopped || (this.isStopped = !0, this._complete());\n  }, t.prototype.unsubscribe = function() {\n    this.closed || (this.isStopped = !0, e.prototype.unsubscribe.call(this), this.destination = null);\n  }, t.prototype._next = function(n) {\n    this.destination.next(n);\n  }, t.prototype._error = function(n) {\n    try {\n      this.destination.error(n);\n    } finally {\n      this.unsubscribe();\n    }\n  }, t.prototype._complete = function() {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }, t;\n}(Te), kr = Function.prototype.bind;\nfunction Ye(e, t) {\n  return kr.call(e, t);\n}\nvar Or = function() {\n  function e(t) {\n    this.partialObserver = t;\n  }\n  return e.prototype.next = function(t) {\n    var n = this.partialObserver;\n    if (n.next)\n      try {\n        n.next(t);\n      } catch (r) {\n        Ce(r);\n      }\n  }, e.prototype.error = function(t) {\n    var n = this.partialObserver;\n    if (n.error)\n      try {\n        n.error(t);\n      } catch (r) {\n        Ce(r);\n      }\n    else\n      Ce(t);\n  }, e.prototype.complete = function() {\n    var t = this.partialObserver;\n    if (t.complete)\n      try {\n        t.complete();\n      } catch (n) {\n        Ce(n);\n      }\n  }, e;\n}(), et = function(e) {\n  q(t, e);\n  function t(n, r, i) {\n    var o = e.call(this) || this, s;\n    if (A(n) || !n)\n      s = {\n        next: n ?? void 0,\n        error: r ?? void 0,\n        complete: i ?? void 0\n      };\n    else {\n      var a;\n      o && tn.useDeprecatedNextContext ? (a = Object.create(n), a.unsubscribe = function() {\n        return o.unsubscribe();\n      }, s = {\n        next: n.next && Ye(n.next, a),\n        error: n.error && Ye(n.error, a),\n        complete: n.complete && Ye(n.complete, a)\n      }) : s = n;\n    }\n    return o.destination = new Or(s), o;\n  }\n  return t;\n}(ut);\nfunction Ce(e) {\n  rn(e);\n}\nfunction Lr(e) {\n  throw e;\n}\nvar _r = {\n  closed: !0,\n  next: Ie,\n  error: Lr,\n  complete: Ie\n}, lt = function() {\n  return typeof Symbol == \"function\" && Symbol.observable || \"@@observable\";\n}();\nfunction ft(e) {\n  return e;\n}\nfunction Ir(e) {\n  return e.length === 0 ? ft : e.length === 1 ? e[0] : function(n) {\n    return e.reduce(function(r, i) {\n      return i(r);\n    }, n);\n  };\n}\nvar O = function() {\n  function e(t) {\n    t && (this._subscribe = t);\n  }\n  return e.prototype.lift = function(t) {\n    var n = new e();\n    return n.source = this, n.operator = t, n;\n  }, e.prototype.subscribe = function(t, n, r) {\n    var i = this, o = Mr(t) ? t : new et(t, n, r);\n    return Ae(function() {\n      var s = i, a = s.operator, c = s.source;\n      o.add(a ? a.call(o, c) : c ? i._subscribe(o) : i._trySubscribe(o));\n    }), o;\n  }, e.prototype._trySubscribe = function(t) {\n    try {\n      return this._subscribe(t);\n    } catch (n) {\n      t.error(n);\n    }\n  }, e.prototype.forEach = function(t, n) {\n    var r = this;\n    return n = Tt(n), new n(function(i, o) {\n      var s = new et({\n        next: function(a) {\n          try {\n            t(a);\n          } catch (c) {\n            o(c), s.unsubscribe();\n          }\n        },\n        error: o,\n        complete: i\n      });\n      r.subscribe(s);\n    });\n  }, e.prototype._subscribe = function(t) {\n    var n;\n    return (n = this.source) === null || n === void 0 ? void 0 : n.subscribe(t);\n  }, e.prototype[lt] = function() {\n    return this;\n  }, e.prototype.pipe = function() {\n    for (var t = [], n = 0; n < arguments.length; n++)\n      t[n] = arguments[n];\n    return Ir(t)(this);\n  }, e.prototype.toPromise = function(t) {\n    var n = this;\n    return t = Tt(t), new t(function(r, i) {\n      var o;\n      n.subscribe(function(s) {\n        return o = s;\n      }, function(s) {\n        return i(s);\n      }, function() {\n        return r(o);\n      });\n    });\n  }, e.create = function(t) {\n    return new e(t);\n  }, e;\n}();\nfunction Tt(e) {\n  var t;\n  return (t = e ?? tn.Promise) !== null && t !== void 0 ? t : Promise;\n}\nfunction Dr(e) {\n  return e && A(e.next) && A(e.error) && A(e.complete);\n}\nfunction Mr(e) {\n  return e && e instanceof ut || Dr(e) && en(e);\n}\nfunction Rr(e) {\n  return A(e == null ? void 0 : e.lift);\n}\nfunction B(e) {\n  return function(t) {\n    if (Rr(t))\n      return t.lift(function(n) {\n        try {\n          return e(n, this);\n        } catch (r) {\n          this.error(r);\n        }\n      });\n    throw new TypeError(\"Unable to lift unknown Observable type\");\n  };\n}\nfunction j(e, t, n, r, i) {\n  return new Nr(e, t, n, r, i);\n}\nvar Nr = function(e) {\n  q(t, e);\n  function t(n, r, i, o, s, a) {\n    var c = e.call(this, n) || this;\n    return c.onFinalize = s, c.shouldUnsubscribe = a, c._next = r ? function(u) {\n      try {\n        r(u);\n      } catch (l) {\n        n.error(l);\n      }\n    } : e.prototype._next, c._error = o ? function(u) {\n      try {\n        o(u);\n      } catch (l) {\n        n.error(l);\n      } finally {\n        this.unsubscribe();\n      }\n    } : e.prototype._error, c._complete = i ? function() {\n      try {\n        i();\n      } catch (u) {\n        n.error(u);\n      } finally {\n        this.unsubscribe();\n      }\n    } : e.prototype._complete, c;\n  }\n  return t.prototype.unsubscribe = function() {\n    var n;\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      var r = this.closed;\n      e.prototype.unsubscribe.call(this), !r && ((n = this.onFinalize) === null || n === void 0 || n.call(this));\n    }\n  }, t;\n}(ut), $r = ct(function(e) {\n  return function() {\n    e(this), this.name = \"ObjectUnsubscribedError\", this.message = \"object unsubscribed\";\n  };\n}), re = function(e) {\n  q(t, e);\n  function t() {\n    var n = e.call(this) || this;\n    return n.closed = !1, n.currentObservers = null, n.observers = [], n.isStopped = !1, n.hasError = !1, n.thrownError = null, n;\n  }\n  return t.prototype.lift = function(n) {\n    var r = new Ct(this, this);\n    return r.operator = n, r;\n  }, t.prototype._throwIfClosed = function() {\n    if (this.closed)\n      throw new $r();\n  }, t.prototype.next = function(n) {\n    var r = this;\n    Ae(function() {\n      var i, o;\n      if (r._throwIfClosed(), !r.isStopped) {\n        r.currentObservers || (r.currentObservers = Array.from(r.observers));\n        try {\n          for (var s = pe(r.currentObservers), a = s.next(); !a.done; a = s.next()) {\n            var c = a.value;\n            c.next(n);\n          }\n        } catch (u) {\n          i = { error: u };\n        } finally {\n          try {\n            a && !a.done && (o = s.return) && o.call(s);\n          } finally {\n            if (i) throw i.error;\n          }\n        }\n      }\n    });\n  }, t.prototype.error = function(n) {\n    var r = this;\n    Ae(function() {\n      if (r._throwIfClosed(), !r.isStopped) {\n        r.hasError = r.isStopped = !0, r.thrownError = n;\n        for (var i = r.observers; i.length; )\n          i.shift().error(n);\n      }\n    });\n  }, t.prototype.complete = function() {\n    var n = this;\n    Ae(function() {\n      if (n._throwIfClosed(), !n.isStopped) {\n        n.isStopped = !0;\n        for (var r = n.observers; r.length; )\n          r.shift().complete();\n      }\n    });\n  }, t.prototype.unsubscribe = function() {\n    this.isStopped = this.closed = !0, this.observers = this.currentObservers = null;\n  }, Object.defineProperty(t.prototype, \"observed\", {\n    get: function() {\n      var n;\n      return ((n = this.observers) === null || n === void 0 ? void 0 : n.length) > 0;\n    },\n    enumerable: !1,\n    configurable: !0\n  }), t.prototype._trySubscribe = function(n) {\n    return this._throwIfClosed(), e.prototype._trySubscribe.call(this, n);\n  }, t.prototype._subscribe = function(n) {\n    return this._throwIfClosed(), this._checkFinalizedStatuses(n), this._innerSubscribe(n);\n  }, t.prototype._innerSubscribe = function(n) {\n    var r = this, i = this, o = i.hasError, s = i.isStopped, a = i.observers;\n    return o || s ? Zt : (this.currentObservers = null, a.push(n), new Te(function() {\n      r.currentObservers = null, _e(a, n);\n    }));\n  }, t.prototype._checkFinalizedStatuses = function(n) {\n    var r = this, i = r.hasError, o = r.thrownError, s = r.isStopped;\n    i ? n.error(o) : s && n.complete();\n  }, t.prototype.asObservable = function() {\n    var n = new O();\n    return n.source = this, n;\n  }, t.create = function(n, r) {\n    return new Ct(n, r);\n  }, t;\n}(O), Ct = function(e) {\n  q(t, e);\n  function t(n, r) {\n    var i = e.call(this) || this;\n    return i.destination = n, i.source = r, i;\n  }\n  return t.prototype.next = function(n) {\n    var r, i;\n    (i = (r = this.destination) === null || r === void 0 ? void 0 : r.next) === null || i === void 0 || i.call(r, n);\n  }, t.prototype.error = function(n) {\n    var r, i;\n    (i = (r = this.destination) === null || r === void 0 ? void 0 : r.error) === null || i === void 0 || i.call(r, n);\n  }, t.prototype.complete = function() {\n    var n, r;\n    (r = (n = this.destination) === null || n === void 0 ? void 0 : n.complete) === null || r === void 0 || r.call(n);\n  }, t.prototype._subscribe = function(n) {\n    var r, i;\n    return (i = (r = this.source) === null || r === void 0 ? void 0 : r.subscribe(n)) !== null && i !== void 0 ? i : Zt;\n  }, t;\n}(re), on = function(e) {\n  q(t, e);\n  function t(n) {\n    var r = e.call(this) || this;\n    return r._value = n, r;\n  }\n  return Object.defineProperty(t.prototype, \"value\", {\n    get: function() {\n      return this.getValue();\n    },\n    enumerable: !1,\n    configurable: !0\n  }), t.prototype._subscribe = function(n) {\n    var r = e.prototype._subscribe.call(this, n);\n    return !r.closed && n.next(this._value), r;\n  }, t.prototype.getValue = function() {\n    var n = this, r = n.hasError, i = n.thrownError, o = n._value;\n    if (r)\n      throw i;\n    return this._throwIfClosed(), o;\n  }, t.prototype.next = function(n) {\n    e.prototype.next.call(this, this._value = n);\n  }, t;\n}(re), Ur = {\n  now: function() {\n    return Date.now();\n  },\n  delegate: void 0\n}, Fr = function(e) {\n  q(t, e);\n  function t(n, r) {\n    return e.call(this) || this;\n  }\n  return t.prototype.schedule = function(n, r) {\n    return this;\n  }, t;\n}(Te), Pt = {\n  setInterval: function(e, t) {\n    for (var n = [], r = 2; r < arguments.length; r++)\n      n[r - 2] = arguments[r];\n    return setInterval.apply(void 0, Se([e, t], he(n)));\n  },\n  clearInterval: function(e) {\n    return clearInterval(e);\n  },\n  delegate: void 0\n}, jr = function(e) {\n  q(t, e);\n  function t(n, r) {\n    var i = e.call(this, n, r) || this;\n    return i.scheduler = n, i.work = r, i.pending = !1, i;\n  }\n  return t.prototype.schedule = function(n, r) {\n    var i;\n    if (r === void 0 && (r = 0), this.closed)\n      return this;\n    this.state = n;\n    var o = this.id, s = this.scheduler;\n    return o != null && (this.id = this.recycleAsyncId(s, o, r)), this.pending = !0, this.delay = r, this.id = (i = this.id) !== null && i !== void 0 ? i : this.requestAsyncId(s, this.id, r), this;\n  }, t.prototype.requestAsyncId = function(n, r, i) {\n    return i === void 0 && (i = 0), Pt.setInterval(n.flush.bind(n, this), i);\n  }, t.prototype.recycleAsyncId = function(n, r, i) {\n    if (i === void 0 && (i = 0), i != null && this.delay === i && this.pending === !1)\n      return r;\n    r != null && Pt.clearInterval(r);\n  }, t.prototype.execute = function(n, r) {\n    if (this.closed)\n      return new Error(\"executing a cancelled action\");\n    this.pending = !1;\n    var i = this._execute(n, r);\n    if (i)\n      return i;\n    this.pending === !1 && this.id != null && (this.id = this.recycleAsyncId(this.scheduler, this.id, null));\n  }, t.prototype._execute = function(n, r) {\n    var i = !1, o;\n    try {\n      this.work(n);\n    } catch (s) {\n      i = !0, o = s || new Error(\"Scheduled action threw falsy error\");\n    }\n    if (i)\n      return this.unsubscribe(), o;\n  }, t.prototype.unsubscribe = function() {\n    if (!this.closed) {\n      var n = this, r = n.id, i = n.scheduler, o = i.actions;\n      this.work = this.state = this.scheduler = null, this.pending = !1, _e(o, this), r != null && (this.id = this.recycleAsyncId(i, r, null)), this.delay = null, e.prototype.unsubscribe.call(this);\n    }\n  }, t;\n}(Fr), At = function() {\n  function e(t, n) {\n    n === void 0 && (n = e.now), this.schedulerActionCtor = t, this.now = n;\n  }\n  return e.prototype.schedule = function(t, n, r) {\n    return n === void 0 && (n = 0), new this.schedulerActionCtor(this, t).schedule(r, n);\n  }, e.now = Ur.now, e;\n}(), Wr = function(e) {\n  q(t, e);\n  function t(n, r) {\n    r === void 0 && (r = At.now);\n    var i = e.call(this, n, r) || this;\n    return i.actions = [], i._active = !1, i;\n  }\n  return t.prototype.flush = function(n) {\n    var r = this.actions;\n    if (this._active) {\n      r.push(n);\n      return;\n    }\n    var i;\n    this._active = !0;\n    do\n      if (i = n.execute(n.state, n.delay))\n        break;\n    while (n = r.shift());\n    if (this._active = !1, i) {\n      for (; n = r.shift(); )\n        n.unsubscribe();\n      throw i;\n    }\n  }, t;\n}(At), Br = new Wr(jr), Vr = new O(function(e) {\n  return e.complete();\n});\nfunction Hr(e) {\n  return e && A(e.schedule);\n}\nfunction sn(e) {\n  return e[e.length - 1];\n}\nfunction Be(e) {\n  return Hr(sn(e)) ? e.pop() : void 0;\n}\nfunction zr(e, t) {\n  return typeof sn(e) == \"number\" ? e.pop() : t;\n}\nvar dt = function(e) {\n  return e && typeof e.length == \"number\" && typeof e != \"function\";\n};\nfunction an(e) {\n  return A(e == null ? void 0 : e.then);\n}\nfunction cn(e) {\n  return A(e[lt]);\n}\nfunction un(e) {\n  return Symbol.asyncIterator && A(e == null ? void 0 : e[Symbol.asyncIterator]);\n}\nfunction ln(e) {\n  return new TypeError(\"You provided \" + (e !== null && typeof e == \"object\" ? \"an invalid object\" : \"'\" + e + \"'\") + \" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\");\n}\nfunction Yr() {\n  return typeof Symbol != \"function\" || !Symbol.iterator ? \"@@iterator\" : Symbol.iterator;\n}\nvar fn = Yr();\nfunction dn(e) {\n  return A(e == null ? void 0 : e[fn]);\n}\nfunction pn(e) {\n  return Pr(this, arguments, function() {\n    var n, r, i, o;\n    return Xt(this, function(s) {\n      switch (s.label) {\n        case 0:\n          n = e.getReader(), s.label = 1;\n        case 1:\n          s.trys.push([1, , 9, 10]), s.label = 2;\n        case 2:\n          return [4, fe(n.read())];\n        case 3:\n          return r = s.sent(), i = r.value, o = r.done, o ? [4, fe(void 0)] : [3, 5];\n        case 4:\n          return [2, s.sent()];\n        case 5:\n          return [4, fe(i)];\n        case 6:\n          return [4, s.sent()];\n        case 7:\n          return s.sent(), [3, 2];\n        case 8:\n          return [3, 10];\n        case 9:\n          return n.releaseLock(), [7];\n        case 10:\n          return [2];\n      }\n    });\n  });\n}\nfunction hn(e) {\n  return A(e == null ? void 0 : e.getReader);\n}\nfunction Y(e) {\n  if (e instanceof O)\n    return e;\n  if (e != null) {\n    if (cn(e))\n      return Gr(e);\n    if (dt(e))\n      return Kr(e);\n    if (an(e))\n      return Qr(e);\n    if (un(e))\n      return vn(e);\n    if (dn(e))\n      return Jr(e);\n    if (hn(e))\n      return qr(e);\n  }\n  throw ln(e);\n}\nfunction Gr(e) {\n  return new O(function(t) {\n    var n = e[lt]();\n    if (A(n.subscribe))\n      return n.subscribe(t);\n    throw new TypeError(\"Provided object does not correctly implement Symbol.observable\");\n  });\n}\nfunction Kr(e) {\n  return new O(function(t) {\n    for (var n = 0; n < e.length && !t.closed; n++)\n      t.next(e[n]);\n    t.complete();\n  });\n}\nfunction Qr(e) {\n  return new O(function(t) {\n    e.then(function(n) {\n      t.closed || (t.next(n), t.complete());\n    }, function(n) {\n      return t.error(n);\n    }).then(null, rn);\n  });\n}\nfunction Jr(e) {\n  return new O(function(t) {\n    var n, r;\n    try {\n      for (var i = pe(e), o = i.next(); !o.done; o = i.next()) {\n        var s = o.value;\n        if (t.next(s), t.closed)\n          return;\n      }\n    } catch (a) {\n      n = { error: a };\n    } finally {\n      try {\n        o && !o.done && (r = i.return) && r.call(i);\n      } finally {\n        if (n) throw n.error;\n      }\n    }\n    t.complete();\n  });\n}\nfunction vn(e) {\n  return new O(function(t) {\n    Xr(e, t).catch(function(n) {\n      return t.error(n);\n    });\n  });\n}\nfunction qr(e) {\n  return vn(pn(e));\n}\nfunction Xr(e, t) {\n  var n, r, i, o;\n  return Cr(this, void 0, void 0, function() {\n    var s, a;\n    return Xt(this, function(c) {\n      switch (c.label) {\n        case 0:\n          c.trys.push([0, 5, 6, 11]), n = Ar(e), c.label = 1;\n        case 1:\n          return [4, n.next()];\n        case 2:\n          if (r = c.sent(), !!r.done) return [3, 4];\n          if (s = r.value, t.next(s), t.closed)\n            return [2];\n          c.label = 3;\n        case 3:\n          return [3, 1];\n        case 4:\n          return [3, 11];\n        case 5:\n          return a = c.sent(), i = { error: a }, [3, 11];\n        case 6:\n          return c.trys.push([6, , 9, 10]), r && !r.done && (o = n.return) ? [4, o.call(n)] : [3, 8];\n        case 7:\n          c.sent(), c.label = 8;\n        case 8:\n          return [3, 10];\n        case 9:\n          if (i) throw i.error;\n          return [7];\n        case 10:\n          return [7];\n        case 11:\n          return t.complete(), [2];\n      }\n    });\n  });\n}\nfunction ee(e, t, n, r, i) {\n  r === void 0 && (r = 0), i === void 0 && (i = !1);\n  var o = t.schedule(function() {\n    n(), i ? e.add(this.schedule(null, r)) : this.unsubscribe();\n  }, r);\n  if (e.add(o), !i)\n    return o;\n}\nfunction mn(e, t) {\n  return t === void 0 && (t = 0), B(function(n, r) {\n    n.subscribe(j(r, function(i) {\n      return ee(r, e, function() {\n        return r.next(i);\n      }, t);\n    }, function() {\n      return ee(r, e, function() {\n        return r.complete();\n      }, t);\n    }, function(i) {\n      return ee(r, e, function() {\n        return r.error(i);\n      }, t);\n    }));\n  });\n}\nfunction gn(e, t) {\n  return t === void 0 && (t = 0), B(function(n, r) {\n    r.add(e.schedule(function() {\n      return n.subscribe(r);\n    }, t));\n  });\n}\nfunction Zr(e, t) {\n  return Y(e).pipe(gn(t), mn(t));\n}\nfunction ei(e, t) {\n  return Y(e).pipe(gn(t), mn(t));\n}\nfunction ti(e, t) {\n  return new O(function(n) {\n    var r = 0;\n    return t.schedule(function() {\n      r === e.length ? n.complete() : (n.next(e[r++]), n.closed || this.schedule());\n    });\n  });\n}\nfunction ni(e, t) {\n  return new O(function(n) {\n    var r;\n    return ee(n, t, function() {\n      r = e[fn](), ee(n, t, function() {\n        var i, o, s;\n        try {\n          i = r.next(), o = i.value, s = i.done;\n        } catch (a) {\n          n.error(a);\n          return;\n        }\n        s ? n.complete() : n.next(o);\n      }, 0, !0);\n    }), function() {\n      return A(r == null ? void 0 : r.return) && r.return();\n    };\n  });\n}\nfunction bn(e, t) {\n  if (!e)\n    throw new Error(\"Iterable cannot be null\");\n  return new O(function(n) {\n    ee(n, t, function() {\n      var r = e[Symbol.asyncIterator]();\n      ee(n, t, function() {\n        r.next().then(function(i) {\n          i.done ? n.complete() : n.next(i.value);\n        });\n      }, 0, !0);\n    });\n  });\n}\nfunction ri(e, t) {\n  return bn(pn(e), t);\n}\nfunction ii(e, t) {\n  if (e != null) {\n    if (cn(e))\n      return Zr(e, t);\n    if (dt(e))\n      return ti(e, t);\n    if (an(e))\n      return ei(e, t);\n    if (un(e))\n      return bn(e, t);\n    if (dn(e))\n      return ni(e, t);\n    if (hn(e))\n      return ri(e, t);\n  }\n  throw ln(e);\n}\nfunction pt(e, t) {\n  return t ? ii(e, t) : Y(e);\n}\nfunction kt() {\n  for (var e = [], t = 0; t < arguments.length; t++)\n    e[t] = arguments[t];\n  var n = Be(e);\n  return pt(e, n);\n}\nfunction oi(e) {\n  return e instanceof Date && !isNaN(e);\n}\nvar si = ct(function(e) {\n  return function(n) {\n    n === void 0 && (n = null), e(this), this.message = \"Timeout has occurred\", this.name = \"TimeoutError\", this.info = n;\n  };\n});\nfunction ai(e, t) {\n  var n = oi(e) ? { first: e } : typeof e == \"number\" ? { each: e } : e, r = n.first, i = n.each, o = n.with, s = o === void 0 ? ci : o, a = n.scheduler, c = a === void 0 ? Br : a, u = n.meta, l = u === void 0 ? null : u;\n  if (r == null && i == null)\n    throw new TypeError(\"No timeout provided.\");\n  return B(function(f, h) {\n    var d, m, p = null, g = 0, v = function(E) {\n      m = ee(h, c, function() {\n        try {\n          d.unsubscribe(), Y(s({\n            meta: l,\n            lastValue: p,\n            seen: g\n          })).subscribe(h);\n        } catch (P) {\n          h.error(P);\n        }\n      }, E);\n    };\n    d = f.subscribe(j(h, function(E) {\n      m == null || m.unsubscribe(), g++, h.next(p = E), i > 0 && v(i);\n    }, void 0, void 0, function() {\n      m != null && m.closed || m == null || m.unsubscribe(), p = null;\n    })), !g && v(r != null ? typeof r == \"number\" ? r : +r - c.now() : i);\n  });\n}\nfunction ci(e) {\n  throw new si(e);\n}\nfunction k(e, t) {\n  return B(function(n, r) {\n    var i = 0;\n    n.subscribe(j(r, function(o) {\n      r.next(e.call(t, o, i++));\n    }));\n  });\n}\nvar ui = Array.isArray;\nfunction li(e, t) {\n  return ui(t) ? e.apply(void 0, Se([], he(t))) : e(t);\n}\nfunction fi(e) {\n  return k(function(t) {\n    return li(e, t);\n  });\n}\nfunction di(e, t, n, r, i, o, s, a) {\n  var c = [], u = 0, l = 0, f = !1, h = function() {\n    f && !c.length && !u && t.complete();\n  }, d = function(p) {\n    return u < r ? m(p) : c.push(p);\n  }, m = function(p) {\n    u++;\n    var g = !1;\n    Y(n(p, l++)).subscribe(j(t, function(v) {\n      t.next(v);\n    }, function() {\n      g = !0;\n    }, void 0, function() {\n      if (g)\n        try {\n          u--;\n          for (var v = function() {\n            var E = c.shift();\n            s || m(E);\n          }; c.length && u < r; )\n            v();\n          h();\n        } catch (E) {\n          t.error(E);\n        }\n    }));\n  };\n  return e.subscribe(j(t, d, function() {\n    f = !0, h();\n  })), function() {\n  };\n}\nfunction ht(e, t, n) {\n  return n === void 0 && (n = 1 / 0), A(t) ? ht(function(r, i) {\n    return k(function(o, s) {\n      return t(r, o, i, s);\n    })(Y(e(r, i)));\n  }, n) : (typeof t == \"number\" && (n = t), B(function(r, i) {\n    return di(r, i, e, n);\n  }));\n}\nfunction yn(e) {\n  return e === void 0 && (e = 1 / 0), ht(ft, e);\n}\nfunction pi() {\n  return yn(1);\n}\nfunction De() {\n  for (var e = [], t = 0; t < arguments.length; t++)\n    e[t] = arguments[t];\n  return pi()(pt(e, Be(e)));\n}\nvar hi = [\"addListener\", \"removeListener\"], vi = [\"addEventListener\", \"removeEventListener\"], mi = [\"on\", \"off\"];\nfunction tt(e, t, n, r) {\n  if (A(n) && (r = n, n = void 0), r)\n    return tt(e, t, n).pipe(fi(r));\n  var i = he(yi(e) ? vi.map(function(a) {\n    return function(c) {\n      return e[a](t, c, n);\n    };\n  }) : gi(e) ? hi.map(Ot(e, t)) : bi(e) ? mi.map(Ot(e, t)) : [], 2), o = i[0], s = i[1];\n  if (!o && dt(e))\n    return ht(function(a) {\n      return tt(a, t, n);\n    })(Y(e));\n  if (!o)\n    throw new TypeError(\"Invalid event target\");\n  return new O(function(a) {\n    var c = function() {\n      for (var u = [], l = 0; l < arguments.length; l++)\n        u[l] = arguments[l];\n      return a.next(1 < u.length ? u : u[0]);\n    };\n    return o(c), function() {\n      return s(c);\n    };\n  });\n}\nfunction Ot(e, t) {\n  return function(n) {\n    return function(r) {\n      return e[n](t, r);\n    };\n  };\n}\nfunction gi(e) {\n  return A(e.addListener) && A(e.removeListener);\n}\nfunction bi(e) {\n  return A(e.on) && A(e.off);\n}\nfunction yi(e) {\n  return A(e.addEventListener) && A(e.removeEventListener);\n}\nfunction wi() {\n  for (var e = [], t = 0; t < arguments.length; t++)\n    e[t] = arguments[t];\n  var n = Be(e), r = zr(e, 1 / 0), i = e;\n  return i.length ? i.length === 1 ? Y(i[0]) : yn(r)(pt(i, n)) : Vr;\n}\nfunction vt(e, t) {\n  return B(function(n, r) {\n    var i = 0;\n    n.subscribe(j(r, function(o) {\n      return e.call(t, o, i++) && r.next(o);\n    }));\n  });\n}\nfunction Si(e, t, n, r, i) {\n  return function(o, s) {\n    var a = n, c = t, u = 0;\n    o.subscribe(j(s, function(l) {\n      var f = u++;\n      c = a ? e(c, l, f) : (a = !0, l), s.next(c);\n    }, i));\n  };\n}\nfunction xi(e, t) {\n  return t === void 0 && (t = ft), e = e ?? Ei, B(function(n, r) {\n    var i, o = !0;\n    n.subscribe(j(r, function(s) {\n      var a = t(s);\n      (o || !e(i, a)) && (o = !1, i = a, r.next(s));\n    }));\n  });\n}\nfunction Ei(e, t) {\n  return e === t;\n}\nfunction Ti(e) {\n  return B(function(t, n) {\n    try {\n      t.subscribe(n);\n    } finally {\n      n.add(e);\n    }\n  });\n}\nfunction Ci(e, t) {\n  return B(Si(e, t, arguments.length >= 2, !0));\n}\nfunction Pi(e) {\n  return B(function(t, n) {\n    var r = !1, i = j(n, function() {\n      i == null || i.unsubscribe(), r = !0;\n    }, Ie);\n    Y(e).subscribe(i), t.subscribe(j(n, function(o) {\n      return r && n.next(o);\n    }));\n  });\n}\nfunction M() {\n  for (var e = [], t = 0; t < arguments.length; t++)\n    e[t] = arguments[t];\n  var n = Be(e);\n  return B(function(r, i) {\n    (n ? De(e, r, n) : De(e, r)).subscribe(i);\n  });\n}\nfunction wn(e, t) {\n  return B(function(n, r) {\n    var i = null, o = 0, s = !1, a = function() {\n      return s && !i && r.complete();\n    };\n    n.subscribe(j(r, function(c) {\n      i == null || i.unsubscribe();\n      var u = 0, l = o++;\n      Y(e(c, l)).subscribe(i = j(r, function(f) {\n        return r.next(t ? t(c, f, l, u++) : f);\n      }, function() {\n        i = null, a();\n      }));\n    }, function() {\n      s = !0, a();\n    }));\n  });\n}\nfunction Lt(e) {\n  return B(function(t, n) {\n    Y(e).subscribe(j(n, function() {\n      return n.complete();\n    }, Ie)), !n.closed && t.subscribe(n);\n  });\n}\nvar Ai = Object.defineProperty, ki = Object.defineProperties, Oi = Object.getOwnPropertyDescriptors, _t = Object.getOwnPropertySymbols, Li = Object.prototype.hasOwnProperty, _i = Object.prototype.propertyIsEnumerable, It = (e, t, n) => t in e ? Ai(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[t] = n, Q = (e, t) => {\n  for (var n in t || (t = {}))\n    Li.call(t, n) && It(e, n, t[n]);\n  if (_t)\n    for (var n of _t(t))\n      _i.call(t, n) && It(e, n, t[n]);\n  return e;\n}, ye = (e, t) => ki(e, Oi(t)), W = (e, t, n) => new Promise((r, i) => {\n  var o = (c) => {\n    try {\n      a(n.next(c));\n    } catch (u) {\n      i(u);\n    }\n  }, s = (c) => {\n    try {\n      a(n.throw(c));\n    } catch (u) {\n      i(u);\n    }\n  }, a = (c) => c.done ? r(c.value) : Promise.resolve(c.value).then(o, s);\n  a((n = n.apply(e, t)).next());\n}), Sn = \"lk\";\nfunction F(e) {\n  return typeof e > \"u\" ? !1 : Ii(e) || Di(e);\n}\nfunction Ii(e) {\n  var t;\n  return e ? e.hasOwnProperty(\"participant\") && e.hasOwnProperty(\"source\") && e.hasOwnProperty(\"track\") && typeof ((t = e.publication) == null ? void 0 : t.track) < \"u\" : !1;\n}\nfunction Di(e) {\n  return e ? e.hasOwnProperty(\"participant\") && e.hasOwnProperty(\"source\") && e.hasOwnProperty(\"publication\") && typeof e.publication < \"u\" : !1;\n}\nfunction xe(e) {\n  return e ? e.hasOwnProperty(\"participant\") && e.hasOwnProperty(\"source\") && typeof e.publication > \"u\" : !1;\n}\nfunction N(e) {\n  if (typeof e == \"string\" || typeof e == \"number\")\n    return `${e}`;\n  if (xe(e))\n    return `${e.participant.identity}_${e.source}_placeholder`;\n  if (F(e))\n    return `${e.participant.identity}_${e.publication.source}_${e.publication.trackSid}`;\n  throw new Error(`Can't generate a id for the given track reference: ${e}`);\n}\nfunction Ao(e, t) {\n  return e === void 0 || t === void 0 ? !1 : F(e) && F(t) ? e.publication.trackSid === t.publication.trackSid : N(e) === N(t);\n}\nfunction ko(e, t) {\n  return typeof t > \"u\" ? !1 : F(e) ? t.some(\n    (n) => n.participant.identity === e.participant.identity && F(n) && n.publication.trackSid === e.publication.trackSid\n  ) : xe(e) ? t.some(\n    (n) => n.participant.identity === e.participant.identity && xe(n) && n.source === e.source\n  ) : !1;\n}\nfunction Mi(e, t) {\n  return xe(e) && F(t) && t.participant.identity === e.participant.identity && t.source === e.source;\n}\nfunction Oo(e) {\n  return e instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant;\n}\nfunction Lo() {\n  const e = document.createElement(\"p\");\n  e.style.width = \"100%\", e.style.height = \"200px\";\n  const t = document.createElement(\"div\");\n  t.style.position = \"absolute\", t.style.top = \"0px\", t.style.left = \"0px\", t.style.visibility = \"hidden\", t.style.width = \"200px\", t.style.height = \"150px\", t.style.overflow = \"hidden\", t.appendChild(e), document.body.appendChild(t);\n  const n = e.offsetWidth;\n  t.style.overflow = \"scroll\";\n  let r = e.offsetWidth;\n  return n === r && (r = t.clientWidth), document.body.removeChild(t), n - r;\n}\nfunction _o() {\n  return typeof document < \"u\";\n}\nfunction Ri(e) {\n  e = Q({}, e);\n  const t = \"(?:(?:[a-z]+:)?//)?\", n = \"(?:\\\\S+(?::\\\\S*)?@)?\", r = new RegExp(\n    \"(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}\",\n    \"g\"\n  ).source, u = `(?:${t}|www\\\\.)${n}(?:localhost|${r}|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\\\\.?)(?::\\\\d{2,5})?(?:[/?#][^\\\\s\"]*)?`;\n  return e.exact ? new RegExp(`(?:^${u}$)`, \"i\") : new RegExp(u, \"ig\");\n}\nvar Dt = \"[^\\\\.\\\\s@:](?:[^\\\\s@:]*[^\\\\s@:\\\\.])?@[^\\\\.\\\\s@]+(?:\\\\.[^\\\\.\\\\s@]+)*\";\nfunction Ni({ exact: e } = {}) {\n  return e ? new RegExp(`^${Dt}$`) : new RegExp(Dt, \"g\");\n}\nfunction Io(e, t) {\n  return W(this, null, function* () {\n    const { x: n, y: r } = yield wr(e, t, {\n      placement: \"top\",\n      middleware: [gr(6), yr(), br({ padding: 5 })]\n    });\n    return { x: n, y: r };\n  });\n}\nfunction Do(e, t) {\n  return !e.contains(t.target);\n}\nvar Mo = () => ({\n  email: Ni(),\n  url: Ri({})\n});\nfunction Ro(e, t) {\n  const n = Object.entries(t).map(\n    ([o, s], a) => Array.from(e.matchAll(s)).map(({ index: c, 0: u }) => ({\n      type: o,\n      weight: a,\n      content: u,\n      index: c ?? 0\n    }))\n  ).flat().sort((o, s) => {\n    const a = o.index - s.index;\n    return a !== 0 ? a : o.weight - s.weight;\n  }).filter(({ index: o }, s, a) => {\n    if (s === 0) return !0;\n    const c = a[s - 1];\n    return c.index + c.content.length <= o;\n  }), r = [];\n  let i = 0;\n  for (const { type: o, content: s, index: a } of n)\n    a > i && r.push(e.substring(i, a)), r.push({ type: o, content: s }), i = a + s.length;\n  return e.length > i && r.push(e.substring(i)), r;\n}\nvar $i = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionQualityChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantPermissionsChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantNameChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantAttributesChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged\n], xn = [\n  ...$i,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished\n], Ui = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n], Fi = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n], En = [\n  ...Fi,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n  livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n], _ = Tr.getLogger(\"lk-components-js\");\n_.setDefaultLevel(\"WARN\");\nfunction No(e, t = {}) {\n  var n;\n  _.setLevel(e), (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)((n = t.liveKitClientLogLevel) != null ? n : e);\n}\nfunction $o(e, t = {}) {\n  var n;\n  const r = _.methodFactory;\n  _.methodFactory = (i, o, s) => {\n    const a = r(i, o, s), c = livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel[i], u = c >= o && c < livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel.silent;\n    return (l, f) => {\n      f ? a(l, f) : a(l), u && e(c, l, f);\n    };\n  }, _.setLevel(_.getLevel()), (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogExtension)((n = t.liveKitClientLogExtension) != null ? n : e);\n}\nvar Uo = [\n  {\n    columns: 1,\n    rows: 1\n  },\n  {\n    columns: 1,\n    rows: 2,\n    orientation: \"portrait\"\n  },\n  {\n    columns: 2,\n    rows: 1,\n    orientation: \"landscape\"\n  },\n  {\n    columns: 2,\n    rows: 2,\n    minWidth: 560\n  },\n  {\n    columns: 3,\n    rows: 3,\n    minWidth: 700\n  },\n  {\n    columns: 4,\n    rows: 4,\n    minWidth: 960\n  },\n  {\n    columns: 5,\n    rows: 5,\n    minWidth: 1100\n  }\n];\nfunction ji(e, t, n, r) {\n  if (e.length < 1)\n    throw new Error(\"At least one grid layout definition must be provided.\");\n  const i = Wi(e);\n  if (n <= 0 || r <= 0)\n    return i[0];\n  let o = 0;\n  const s = n / r > 1 ? \"landscape\" : \"portrait\";\n  let a = i.find((c, u, l) => {\n    o = u;\n    const f = l.findIndex((h, d) => {\n      const m = !h.orientation || h.orientation === s, p = d > u, g = h.maxTiles === c.maxTiles;\n      return p && g && m;\n    }) !== -1;\n    return c.maxTiles >= t && !f;\n  });\n  if (a === void 0)\n    if (a = i[i.length - 1], a)\n      _.warn(\n        `No layout found for: participantCount: ${t}, width/height: ${n}/${r} fallback to biggest available layout (${a}).`\n      );\n    else\n      throw new Error(\"No layout or fallback layout found.\");\n  if ((n < a.minWidth || r < a.minHeight) && o > 0) {\n    const c = i[o - 1];\n    a = ji(\n      i.slice(0, o),\n      c.maxTiles,\n      n,\n      r\n    );\n  }\n  return a;\n}\nfunction Wi(e) {\n  return [...e].map((t) => {\n    var n, r;\n    return {\n      name: `${t.columns}x${t.rows}`,\n      columns: t.columns,\n      rows: t.rows,\n      maxTiles: t.columns * t.rows,\n      minWidth: (n = t.minWidth) != null ? n : 0,\n      minHeight: (r = t.minHeight) != null ? r : 0,\n      orientation: t.orientation\n    };\n  }).sort((t, n) => t.maxTiles !== n.maxTiles ? t.maxTiles - n.maxTiles : t.minWidth !== 0 || n.minWidth !== 0 ? t.minWidth - n.minWidth : t.minHeight !== 0 || n.minHeight !== 0 ? t.minHeight - n.minHeight : 0);\n}\nfunction Fo() {\n  return typeof navigator < \"u\" && navigator.mediaDevices && !!navigator.mediaDevices.getDisplayMedia;\n}\nfunction jo(e, t) {\n  var n;\n  return ye(Q({}, e), {\n    receivedAtMediaTimestamp: (n = t.rtpTimestamp) != null ? n : 0,\n    receivedAt: t.timestamp\n  });\n}\nfunction Wo(e, t, n) {\n  return [...e, ...t].reduceRight((r, i) => (r.find((o) => o.id === i.id) || r.unshift(i), r), []).slice(0 - n);\n}\nvar Tn = [], Cn = {\n  showChat: !1,\n  unreadMessages: 0,\n  showSettings: !1\n};\nfunction Bi(e) {\n  return typeof e == \"object\";\n}\nfunction Bo(e) {\n  return Array.isArray(e) && e.filter(Bi).length > 0;\n}\nfunction Pn(e, t) {\n  return t.audioLevel - e.audioLevel;\n}\nfunction An(e, t) {\n  return e.isSpeaking === t.isSpeaking ? 0 : e.isSpeaking ? -1 : 1;\n}\nfunction kn(e, t) {\n  var n, r, i, o;\n  return e.lastSpokeAt !== void 0 || t.lastSpokeAt !== void 0 ? ((r = (n = t.lastSpokeAt) == null ? void 0 : n.getTime()) != null ? r : 0) - ((o = (i = e.lastSpokeAt) == null ? void 0 : i.getTime()) != null ? o : 0) : 0;\n}\nfunction Me(e, t) {\n  var n, r, i, o;\n  return ((r = (n = e.joinedAt) == null ? void 0 : n.getTime()) != null ? r : 0) - ((o = (i = t.joinedAt) == null ? void 0 : i.getTime()) != null ? o : 0);\n}\nfunction Vi(e, t) {\n  return F(e) ? F(t) ? 0 : -1 : F(t) ? 1 : 0;\n}\nfunction Hi(e, t) {\n  const n = e.participant.isCameraEnabled, r = t.participant.isCameraEnabled;\n  return n !== r ? n ? -1 : 1 : 0;\n}\nfunction Vo(e) {\n  const t = [], n = [], r = [], i = [];\n  e.forEach((a) => {\n    a.participant.isLocal && a.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera ? t.push(a) : a.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare ? n.push(a) : a.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera ? r.push(a) : i.push(a);\n  });\n  const o = zi(n), s = Yi(r);\n  return [...t, ...o, ...s, ...i];\n}\nfunction zi(e) {\n  const t = [], n = [];\n  return e.forEach((i) => {\n    i.participant.isLocal ? t.push(i) : n.push(i);\n  }), t.sort((i, o) => Me(i.participant, o.participant)), n.sort((i, o) => Me(i.participant, o.participant)), [...n, ...t];\n}\nfunction Yi(e) {\n  const t = [], n = [];\n  return e.forEach((r) => {\n    r.participant.isLocal ? t.push(r) : n.push(r);\n  }), n.sort((r, i) => r.participant.isSpeaking && i.participant.isSpeaking ? Pn(r.participant, i.participant) : r.participant.isSpeaking !== i.participant.isSpeaking ? An(r.participant, i.participant) : r.participant.lastSpokeAt !== i.participant.lastSpokeAt ? kn(r.participant, i.participant) : F(r) !== F(i) ? Vi(r, i) : r.participant.isCameraEnabled !== i.participant.isCameraEnabled ? Hi(r, i) : Me(r.participant, i.participant)), [...t, ...n];\n}\nfunction Ho(e) {\n  const t = [...e];\n  t.sort((r, i) => {\n    if (r.isSpeaking && i.isSpeaking)\n      return Pn(r, i);\n    if (r.isSpeaking !== i.isSpeaking)\n      return An(r, i);\n    if (r.lastSpokeAt !== i.lastSpokeAt)\n      return kn(r, i);\n    const o = r.videoTrackPublications.size > 0, s = i.videoTrackPublications.size > 0;\n    return o !== s ? o ? -1 : 1 : Me(r, i);\n  });\n  const n = t.find((r) => r instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant);\n  if (n) {\n    const r = t.indexOf(n);\n    r >= 0 && (t.splice(r, 1), t.length > 0 ? t.splice(0, 0, n) : t.push(n));\n  }\n  return t;\n}\nfunction Gi(e, t) {\n  return e.reduce(\n    (n, r, i) => i % t === 0 ? [...n, [r]] : [...n.slice(0, -1), [...n.slice(-1)[0], r]],\n    []\n  );\n}\nfunction Mt(e, t) {\n  const n = Math.max(e.length, t.length);\n  return new Array(n).fill([]).map((r, i) => [e[i], t[i]]);\n}\nfunction Re(e, t, n) {\n  return e.filter((r) => !t.map((i) => n(i)).includes(n(r)));\n}\nfunction nt(e) {\n  return e.map((t) => typeof t == \"string\" || typeof t == \"number\" ? `${t}` : N(t));\n}\nfunction Ki(e, t) {\n  return {\n    dropped: Re(e, t, N),\n    added: Re(t, e, N)\n  };\n}\nfunction Qi(e) {\n  return e.added.length !== 0 || e.dropped.length !== 0;\n}\nfunction rt(e, t) {\n  const n = t.findIndex(\n    (r) => N(r) === N(e)\n  );\n  if (n === -1)\n    throw new Error(\n      `Element not part of the array: ${N(\n        e\n      )} not in ${nt(t)}`\n    );\n  return n;\n}\nfunction Ji(e, t, n) {\n  const r = rt(e, n), i = rt(t, n);\n  return n.splice(r, 1, t), n.splice(i, 1, e), n;\n}\nfunction qi(e, t) {\n  const n = rt(e, t);\n  return t.splice(n, 1), t;\n}\nfunction Xi(e, t) {\n  return [...t, e];\n}\nfunction Ge(e, t) {\n  return Gi(e, t);\n}\nfunction zo(e, t, n) {\n  let r = Zi(e, t);\n  if (r.length < t.length) {\n    const s = Re(t, r, N);\n    r = [...r, ...s];\n  }\n  const i = Ge(r, n), o = Ge(t, n);\n  if (Mt(i, o).forEach(([s, a], c) => {\n    if (s && a) {\n      const u = Ge(r, n)[c], l = Ki(u, a);\n      Qi(l) && (_.debug(\n        `Detected visual changes on page: ${c}, current: ${nt(\n          s\n        )}, next: ${nt(a)}`,\n        { changes: l }\n      ), l.added.length === l.dropped.length && Mt(l.added, l.dropped).forEach(([f, h]) => {\n        if (f && h)\n          r = Ji(f, h, r);\n        else\n          throw new Error(\n            `For a swap action we need a addition and a removal one is missing: ${f}, ${h}`\n          );\n      }), l.added.length === 0 && l.dropped.length > 0 && l.dropped.forEach((f) => {\n        r = qi(f, r);\n      }), l.added.length > 0 && l.dropped.length === 0 && l.added.forEach((f) => {\n        r = Xi(f, r);\n      }));\n    }\n  }), r.length > t.length) {\n    const s = Re(r, t, N);\n    r = r.filter(\n      (a) => !s.map(N).includes(N(a))\n    );\n  }\n  return r;\n}\nfunction Zi(e, t) {\n  return e.map((n) => {\n    const r = t.find(\n      (i) => (\n        // If the IDs match or ..\n        N(n) === N(i) || // ... if the current item is a placeholder and the new item is the track reference can replace it.\n        typeof n != \"number\" && xe(n) && F(i) && Mi(n, i)\n      )\n    );\n    return r ?? n;\n  });\n}\nfunction $(e) {\n  return `${Sn}-${e}`;\n}\nfunction Yo(e) {\n  const t = Rt(e), n = On(e.participant).pipe(\n    k(() => Rt(e)),\n    M(t)\n  );\n  return { className: $(\n    e.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera || e.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare ? \"participant-media-video\" : \"participant-media-audio\"\n  ), trackObserver: n };\n}\nfunction Rt(e) {\n  if (F(e))\n    return e.publication;\n  {\n    const { source: t, name: n, participant: r } = e;\n    if (t && n)\n      return r.getTrackPublications().find((i) => i.source === t && i.trackName === n);\n    if (n)\n      return r.getTrackPublicationByName(n);\n    if (t)\n      return r.getTrackPublication(t);\n    throw new Error(\"At least one of source and name needs to be defined\");\n  }\n}\nfunction se(e, ...t) {\n  return new O((r) => {\n    const i = () => {\n      r.next(e);\n    };\n    return t.forEach((s) => {\n      e.on(s, i);\n    }), () => {\n      t.forEach((s) => {\n        e.off(s, i);\n      });\n    };\n  }).pipe(M(e));\n}\nfunction ae(e, t) {\n  return new O((r) => {\n    const i = (...s) => {\n      r.next(s);\n    };\n    return e.on(t, i), () => {\n      e.off(t, i);\n    };\n  });\n}\nfunction Go(e) {\n  return ae(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe(\n    k(([t]) => t),\n    M(e.state)\n  );\n}\nfunction Ko(e) {\n  return se(\n    e,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    k((n) => ({ name: n.name, metadata: n.metadata }))\n  );\n}\nfunction Qo(e) {\n  return ae(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged).pipe(\n    k(([t]) => t)\n  );\n}\nfunction Jo(e, t, n = !0) {\n  var r;\n  const i = () => W(this, null, function* () {\n    try {\n      const a = yield livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(e, n);\n      o.next(a);\n    } catch (a) {\n      t == null || t(a);\n    }\n  }), o = new re(), s = o.pipe(\n    Ti(() => {\n      var a;\n      (a = navigator == null ? void 0 : navigator.mediaDevices) == null || a.removeEventListener(\"devicechange\", i);\n    })\n  );\n  if (typeof window < \"u\") {\n    if (!window.isSecureContext)\n      throw new Error(\n        \"Accessing media devices is available only in secure contexts (HTTPS and localhost), in some or all supporting browsers. See: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices\"\n      );\n    (r = navigator == null ? void 0 : navigator.mediaDevices) == null || r.addEventListener(\"devicechange\", i);\n  }\n  return De(\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(e, n).catch((a) => (t == null || t(a), [])),\n    s\n  );\n}\nfunction eo(e) {\n  return ae(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.DataReceived);\n}\nfunction to(e) {\n  return ae(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ChatMessage);\n}\nfunction no(e) {\n  return se(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged).pipe(\n    k((n) => ({ canPlayAudio: n.canPlaybackAudio }))\n  );\n}\nfunction ro(e) {\n  return se(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.VideoPlaybackStatusChanged).pipe(\n    k((n) => ({ canPlayVideo: n.canPlaybackVideo }))\n  );\n}\nfunction io(e, t) {\n  return ae(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveDeviceChanged).pipe(\n    vt(([n]) => n === t),\n    k(([n, r]) => (_.debug(\"activeDeviceObservable | RoomEvent.ActiveDeviceChanged\", { kind: n, deviceId: r }), r)),\n    M(e.getActiveDevice(t))\n  );\n}\nfunction qo(e, t) {\n  return ae(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantEncryptionStatusChanged).pipe(\n    vt(\n      ([, n]) => (t == null ? void 0 : t.identity) === (n == null ? void 0 : n.identity) || !n && (t == null ? void 0 : t.identity) === e.localParticipant.identity\n    ),\n    k(([n]) => n),\n    M(\n      t instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant ? t.isE2EEEnabled : !!(t != null && t.isEncrypted)\n    )\n  );\n}\nfunction Xo(e) {\n  return ae(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RecordingStatusChanged).pipe(\n    k(([t]) => t),\n    M(e.isRecording)\n  );\n}\nfunction me(e, ...t) {\n  return new O((r) => {\n    const i = () => {\n      r.next(e);\n    };\n    return t.forEach((s) => {\n      e.on(s, i);\n    }), () => {\n      t.forEach((s) => {\n        e.off(s, i);\n      });\n    };\n  }).pipe(M(e));\n}\nfunction On(e) {\n  return me(\n    e,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n    // ParticipantEvent.IsSpeakingChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.MediaDevicesError,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n    // ParticipantEvent.ConnectionQualityChanged,\n  ).pipe(\n    k((n) => {\n      const { isMicrophoneEnabled: r, isCameraEnabled: i, isScreenShareEnabled: o } = n, s = n.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone), a = n.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera);\n      return {\n        isCameraEnabled: i,\n        isMicrophoneEnabled: r,\n        isScreenShareEnabled: o,\n        cameraTrack: a,\n        microphoneTrack: s,\n        participant: n\n      };\n    })\n  );\n}\nfunction oo(e) {\n  return e ? me(\n    e,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantNameChanged\n  ).pipe(\n    k(({ name: n, identity: r, metadata: i }) => ({\n      name: n,\n      identity: r,\n      metadata: i\n    })),\n    M({\n      name: e.name,\n      identity: e.identity,\n      metadata: e.metadata\n    })\n  ) : void 0;\n}\nfunction so(e) {\n  return Ve(\n    e,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged\n  ).pipe(\n    k(([n]) => n),\n    M(e.connectionQuality)\n  );\n}\nfunction Ve(e, t) {\n  return new O((r) => {\n    const i = (...s) => {\n      r.next(s);\n    };\n    return e.on(t, i), () => {\n      e.off(t, i);\n    };\n  });\n}\nfunction ao(e) {\n  var t, n, r, i;\n  return me(\n    e.participant,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n  ).pipe(\n    k((o) => {\n      var s, a;\n      const c = (s = e.publication) != null ? s : o.getTrackPublication(e.source);\n      return (a = c == null ? void 0 : c.isMuted) != null ? a : !0;\n    }),\n    M(\n      (i = (r = (t = e.publication) == null ? void 0 : t.isMuted) != null ? r : (n = e.participant.getTrackPublication(e.source)) == null ? void 0 : n.isMuted) != null ? i : !0\n    )\n  );\n}\nfunction Zo(e) {\n  return Ve(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged).pipe(\n    k(([t]) => t)\n  );\n}\nfunction es(e, t = {}) {\n  var n;\n  let r;\n  const i = new O((c) => (r = c, () => a.unsubscribe())).pipe(M(Array.from(e.remoteParticipants.values()))), o = (n = t.additionalRoomEvents) != null ? n : xn, s = Array.from(\n    /* @__PURE__ */ new Set([\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n      ...o\n    ])\n  ), a = se(e, ...s).subscribe(\n    (c) => r == null ? void 0 : r.next(Array.from(c.remoteParticipants.values()))\n  );\n  return e.remoteParticipants.size > 0 && (r == null || r.next(Array.from(e.remoteParticipants.values()))), i;\n}\nfunction ts(e, t, n = {}) {\n  var r;\n  const i = (r = n.additionalEvents) != null ? r : En;\n  return se(\n    e,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    wn((s) => {\n      const a = s.getParticipantByIdentity(t);\n      return a ? me(a, ...i) : new O((c) => c.next(void 0));\n    }),\n    M(e.getParticipantByIdentity(t))\n  );\n}\nfunction ns(e) {\n  return Ve(\n    e,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged\n  ).pipe(\n    k(() => e.permissions),\n    M(e.permissions)\n  );\n}\nfunction rs(e, { kind: t, identity: n }, r = {}) {\n  var i;\n  const o = (i = r.additionalEvents) != null ? i : En, s = (c) => {\n    let u = !0;\n    return t && (u = u && c.kind === t), n && (u = u && c.identity === n), u;\n  };\n  return se(\n    e,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged\n  ).pipe(\n    wn((c) => {\n      const u = Array.from(c.remoteParticipants.values()).find(\n        (l) => s(l)\n      );\n      return u ? me(u, ...o) : new O((l) => l.next(void 0));\n    }),\n    M(Array.from(e.remoteParticipants.values()).find((c) => s(c)))\n  );\n}\nfunction is(e) {\n  return typeof e > \"u\" ? new O() : Ve(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.AttributesChanged).pipe(\n    k(([t]) => ({\n      changed: t,\n      attributes: e.attributes\n    })),\n    M({ changed: e.attributes, attributes: e.attributes })\n  );\n}\nfunction os(e, t, n, r, i) {\n  const { localParticipant: o } = t, s = (f, h) => {\n    let d = !1;\n    switch (f) {\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n        d = h.isCameraEnabled;\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n        d = h.isMicrophoneEnabled;\n        break;\n      case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n        d = h.isScreenShareEnabled;\n        break;\n    }\n    return d;\n  }, a = On(o).pipe(\n    k((f) => s(e, f.participant)),\n    M(s(e, o))\n  ), c = new re(), u = (f, h) => W(this, null, function* () {\n    try {\n      switch (h ?? (h = n), c.next(!0), e) {\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n          return yield o.setCameraEnabled(\n            f ?? !o.isCameraEnabled,\n            h,\n            r\n          ), o.isCameraEnabled;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n          return yield o.setMicrophoneEnabled(\n            f ?? !o.isMicrophoneEnabled,\n            h,\n            r\n          ), o.isMicrophoneEnabled;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n          return yield o.setScreenShareEnabled(\n            f ?? !o.isScreenShareEnabled,\n            h,\n            r\n          ), o.isScreenShareEnabled;\n        default:\n          throw new TypeError(\"Tried to toggle unsupported source\");\n      }\n    } catch (d) {\n      if (i && d instanceof Error) {\n        i == null || i(d);\n        return;\n      } else\n        throw d;\n    } finally {\n      c.next(!1);\n    }\n  });\n  return {\n    className: $(\"button\"),\n    toggle: u,\n    enabledObserver: a,\n    pendingObserver: c.asObservable()\n  };\n}\nfunction ss() {\n  let e = !1;\n  const t = new re(), n = new re(), r = (o) => W(this, null, function* () {\n    n.next(!0), e = o ?? !e, t.next(e), n.next(!1);\n  });\n  return {\n    className: $(\"button\"),\n    toggle: r,\n    enabledObserver: t.asObservable(),\n    pendingObserver: n.asObservable()\n  };\n}\nfunction as(e, t, n) {\n  const r = new on(void 0), i = t ? io(t, e) : r.asObservable(), o = (a, ...c) => W(this, [a, ...c], function* (u, l = {}) {\n    var f, h, d;\n    if (t) {\n      _.debug(`Switching active device of kind \"${e}\" with id ${u}.`), yield t.switchActiveDevice(e, u, l.exact);\n      const m = (f = t.getActiveDevice(e)) != null ? f : u;\n      m !== u && u !== \"default\" && _.info(\n        `We tried to select the device with id (${u}), but the browser decided to select the device with id (${m}) instead.`\n      );\n      let p;\n      e === \"audioinput\" ? p = (h = t.localParticipant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone)) == null ? void 0 : h.track : e === \"videoinput\" && (p = (d = t.localParticipant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera)) == null ? void 0 : d.track);\n      const g = u === \"default\" && !p || u === \"default\" && (p == null ? void 0 : p.mediaStreamTrack.label.startsWith(\"Default\"));\n      r.next(g ? u : m);\n    } else if (n) {\n      yield n.setDeviceId(l.exact ? { exact: u } : u);\n      const m = yield n.getDeviceId();\n      r.next(\n        u === \"default\" && n.mediaStreamTrack.label.startsWith(\"Default\") ? u : m\n      );\n    } else r.value !== u && (_.warn(\n      \"device switch skipped, please provide either a room or a local track to switch on. \"\n    ), r.next(u));\n  });\n  return {\n    className: $(\"media-device-select\"),\n    activeDeviceObservable: i,\n    setActiveMediaDevice: o\n  };\n}\nfunction cs(e) {\n  const t = (r) => {\n    e.disconnect(r);\n  };\n  return { className: $(\"disconnect-button\"), disconnect: t };\n}\nfunction us(e) {\n  const t = $(\"connection-quality\"), n = so(e);\n  return { className: t, connectionQualityObserver: n };\n}\nfunction ls(e) {\n  let t = \"track-muted-indicator-camera\";\n  switch (e.source) {\n    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n      t = \"track-muted-indicator-camera\";\n      break;\n    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n      t = \"track-muted-indicator-microphone\";\n      break;\n  }\n  const n = $(t), r = ao(e);\n  return { className: n, mediaMutedObserver: r };\n}\nfunction fs(e) {\n  return { className: \"lk-participant-name\", infoObserver: oo(e) };\n}\nfunction ds() {\n  return {\n    className: $(\"participant-tile\")\n  };\n}\nvar Nt = {\n  CHAT: \"lk-chat-topic\",\n  CHAT_UPDATE: \"lk-chat-update-topic\"\n};\nfunction it(e, t) {\n  return W(this, arguments, function* (n, r, i = {}) {\n    const { reliable: o, destinationIdentities: s, topic: a } = i;\n    yield n.publishData(r, {\n      destinationIdentities: s,\n      topic: a,\n      reliable: o\n    });\n  });\n}\nfunction co(e, t, n) {\n  const r = Array.isArray(t) ? t : [t], i = eo(e).pipe(\n    vt(\n      ([, , , c]) => t === void 0 || c !== void 0 && r.includes(c)\n    ),\n    k(([c, u, , l]) => {\n      const f = {\n        payload: c,\n        topic: l,\n        from: u\n      };\n      return n == null || n(f), f;\n    })\n  );\n  let o;\n  const s = new O((c) => {\n    o = c;\n  });\n  return { messageObservable: i, isSendingObservable: s, send: (c, ...u) => W(this, [c, ...u], function* (l, f = {}) {\n    o.next(!0);\n    try {\n      yield it(e.localParticipant, l, Q({ topic: r[0] }, f));\n    } finally {\n      o.next(!1);\n    }\n  }) };\n}\nfunction uo(e) {\n  return { chatObservable: to(e), send: (i) => W(this, null, function* () {\n    return yield e.localParticipant.sendChatMessage(i);\n  }), edit: (i, o) => W(this, null, function* () {\n    return yield e.localParticipant.editChatMessage(i, o);\n  }) };\n}\nvar lo = new TextEncoder(), fo = new TextDecoder(), Pe = /* @__PURE__ */ new Map(), po = (e) => lo.encode(JSON.stringify(e)), ho = (e) => JSON.parse(fo.decode(e));\nfunction ps(e, t) {\n  var n, r;\n  const i = new re(), o = () => {\n    var T, x, I;\n    return ((T = e.serverInfo) == null ? void 0 : T.edition) === 1 || !!((x = e.serverInfo) != null && x.version) && (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.compareVersions)((I = e.serverInfo) == null ? void 0 : I.version, \"1.17.2\") > 0;\n  }, { messageDecoder: s, messageEncoder: a, channelTopic: c, updateChannelTopic: u } = t ?? {}, l = c ?? Nt.CHAT, f = u ?? Nt.CHAT_UPDATE;\n  let h = !1;\n  Pe.has(e) || (h = !0);\n  const d = (n = Pe.get(e)) != null ? n : /* @__PURE__ */ new Map(), m = (r = d.get(l)) != null ? r : new re();\n  if (d.set(l, m), Pe.set(e, d), h) {\n    const { messageObservable: T } = co(e, [l, f]);\n    T.pipe(Lt(i)).subscribe(m);\n  }\n  const { chatObservable: p, send: g } = uo(e), v = s ?? ho, E = wi(\n    m.pipe(\n      k((T) => {\n        const x = v(T.payload), I = ye(Q({}, x), { from: T.from });\n        if (!vo(I))\n          return I;\n      })\n    ),\n    p.pipe(\n      k(([T, x]) => ye(Q({}, T), { from: x }))\n    )\n  ).pipe(\n    Ci((T, x) => {\n      var I;\n      if (!x)\n        return T;\n      if (\"id\" in x && T.find((w) => {\n        var S, V;\n        return ((S = w.from) == null ? void 0 : S.identity) === ((V = x.from) == null ? void 0 : V.identity) && w.id === x.id;\n      })) {\n        const w = T.findIndex((S) => S.id === x.id);\n        if (w > -1) {\n          const S = T[w];\n          T[w] = ye(Q({}, x), {\n            timestamp: S.timestamp,\n            editTimestamp: (I = x.editTimestamp) != null ? I : x.timestamp\n          });\n        }\n        return [...T];\n      }\n      return [...T, x];\n    }, []),\n    Lt(i)\n  ), P = new on(!1), L = a ?? po, C = (T) => W(this, null, function* () {\n    P.next(!0);\n    try {\n      const x = yield g(T), I = L(ye(Q({}, x), {\n        ignore: o()\n      }));\n      return yield it(e.localParticipant, I, {\n        reliable: !0,\n        topic: l\n      }), x;\n    } finally {\n      P.next(!1);\n    }\n  }), ie = (T, x) => W(this, null, function* () {\n    const I = Date.now(), w = typeof x == \"string\" ? { id: x, message: \"\", timestamp: I } : x;\n    P.next(!0);\n    try {\n      const S = yield e.localParticipant.editChatMessage(T, w), V = L(S);\n      return yield it(e.localParticipant, V, {\n        topic: f,\n        reliable: !0\n      }), S;\n    } finally {\n      P.next(!1);\n    }\n  });\n  function K() {\n    i.next(), i.complete(), Pe.delete(e);\n  }\n  return e.once(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Disconnected, K), {\n    messageObservable: E,\n    isSendingObservable: P,\n    send: C,\n    update: ie\n  };\n}\nfunction vo(e) {\n  return e.ignore == !0;\n}\nfunction hs() {\n  const e = (n) => W(this, null, function* () {\n    _.info(\"Start Audio for room: \", n), yield n.startAudio();\n  });\n  return { className: $(\"start-audio-button\"), roomAudioPlaybackAllowedObservable: no, handleStartAudioPlayback: e };\n}\nfunction vs() {\n  const e = (n) => W(this, null, function* () {\n    _.info(\"Start Video for room: \", n), yield n.startVideo();\n  });\n  return { className: $(\"start-audio-button\"), roomVideoPlaybackAllowedObservable: ro, handleStartVideoPlayback: e };\n}\nfunction ms() {\n  return { className: [$(\"button\"), $(\"chat-toggle\")].join(\" \") };\n}\nfunction gs() {\n  return { className: [$(\"button\"), $(\"focus-toggle-button\")].join(\" \") };\n}\nfunction bs() {\n  return { className: \"lk-clear-pin-button lk-button\" };\n}\nfunction ys() {\n  return { className: \"lk-room-container\" };\n}\nfunction $t(e, t, n = !0) {\n  const i = [e.localParticipant, ...Array.from(e.remoteParticipants.values())], o = [];\n  return i.forEach((s) => {\n    t.forEach((a) => {\n      const c = Array.from(\n        s.trackPublications.values()\n      ).filter(\n        (u) => u.source === a && // either return all or only the ones that are subscribed\n        (!n || u.track)\n      ).map((u) => ({\n        participant: s,\n        publication: u,\n        source: u.source\n      }));\n      o.push(...c);\n    });\n  }), { trackReferences: o, participants: i };\n}\nfunction Ut(e, t, n = !1) {\n  const { sources: r, kind: i, name: o } = t;\n  return Array.from(e.trackPublications.values()).filter(\n    (a) => (!r || r.includes(a.source)) && (!i || a.kind === i) && (!o || a.trackName === o) && // either return all or only the ones that are subscribed\n    (!n || a.track)\n  ).map((a) => ({\n    participant: e,\n    publication: a,\n    source: a.source\n  }));\n}\nfunction ws(e, t, n) {\n  var r, i;\n  const o = (r = n.additionalRoomEvents) != null ? r : xn, s = (i = n.onlySubscribed) != null ? i : !0, a = Array.from(\n    (/* @__PURE__ */ new Set([\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n      livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged,\n      ...o\n    ])).values()\n  );\n  return se(e, ...a).pipe(\n    k((u) => {\n      const l = $t(u, t, s);\n      return _.debug(`TrackReference[] was updated. (length ${l.trackReferences.length})`, l), l;\n    }),\n    M($t(e, t, s))\n  );\n}\nfunction Ss(e, t) {\n  return me(e, ...Ui).pipe(\n    k((r) => {\n      const i = Ut(r, t);\n      return _.debug(`TrackReference[] was updated. (length ${i.length})`, i), i;\n    }),\n    M(Ut(e, t))\n  );\n}\nfunction Ln(e, t) {\n  return new O((r) => {\n    const i = (...s) => {\n      r.next(s);\n    };\n    return e.on(t, i), () => {\n      e.off(t, i);\n    };\n  });\n}\nfunction xs(e) {\n  return Ln(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.TranscriptionReceived);\n}\nfunction Es(e) {\n  return Ln(e, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.TimeSyncUpdate).pipe(\n    k(([t]) => t)\n  );\n}\nfunction Ts(e, t = 1e3) {\n  if (e === null) return kt(!1);\n  const n = tt(e, \"mousemove\", { passive: !0 }).pipe(k(() => !0)), r = n.pipe(\n    ai({\n      each: t,\n      with: () => De(kt(!1), r.pipe(Pi(n)))\n    }),\n    xi()\n  );\n  return r;\n}\nfunction mo(e, t) {\n  if (typeof localStorage > \"u\") {\n    _.error(\"Local storage is not available.\");\n    return;\n  }\n  try {\n    if (t) {\n      const n = Object.fromEntries(\n        Object.entries(t).filter(([, r]) => r !== \"\")\n      );\n      localStorage.setItem(e, JSON.stringify(n));\n    }\n  } catch (n) {\n    _.error(`Error setting item to local storage: ${n}`);\n  }\n}\nfunction go(e) {\n  if (typeof localStorage > \"u\") {\n    _.error(\"Local storage is not available.\");\n    return;\n  }\n  try {\n    const t = localStorage.getItem(e);\n    if (!t) {\n      _.warn(`Item with key ${e} does not exist in local storage.`);\n      return;\n    }\n    return JSON.parse(t);\n  } catch (t) {\n    _.error(`Error getting item from local storage: ${t}`);\n    return;\n  }\n}\nfunction bo(e) {\n  return {\n    load: () => go(e),\n    save: (t) => mo(e, t)\n  };\n}\nvar yo = `${Sn}-user-choices`, be = {\n  videoEnabled: !0,\n  audioEnabled: !0,\n  videoDeviceId: \"\",\n  audioDeviceId: \"\",\n  username: \"\"\n}, { load: wo, save: So } = bo(yo);\nfunction Cs(e, t = !1) {\n  t !== !0 && So(e);\n}\nfunction Ps(e, t = !1) {\n  var n, r, i, o, s;\n  const a = {\n    videoEnabled: (n = e == null ? void 0 : e.videoEnabled) != null ? n : be.videoEnabled,\n    audioEnabled: (r = e == null ? void 0 : e.audioEnabled) != null ? r : be.audioEnabled,\n    videoDeviceId: (i = e == null ? void 0 : e.videoDeviceId) != null ? i : be.videoDeviceId,\n    audioDeviceId: (o = e == null ? void 0 : e.audioDeviceId) != null ? o : be.audioDeviceId,\n    username: (s = e == null ? void 0 : e.username) != null ? s : be.username\n  };\n  if (t)\n    return a;\n  {\n    const c = wo();\n    return Q(Q({}, a), c ?? {});\n  }\n}\nfunction _n(e, t) {\n  if (t.msg === \"show_chat\")\n    return { ...e, showChat: !0, unreadMessages: 0 };\n  if (t.msg === \"hide_chat\")\n    return { ...e, showChat: !1 };\n  if (t.msg === \"toggle_chat\") {\n    const n = { ...e, showChat: !e.showChat };\n    return n.showChat === !0 && (n.unreadMessages = 0), n;\n  } else return t.msg === \"unread_msg\" ? { ...e, unreadMessages: t.count } : t.msg === \"toggle_settings\" ? { ...e, showSettings: !e.showSettings } : { ...e };\n}\nfunction In(e, t) {\n  return t.msg === \"set_pin\" ? [t.trackReference] : t.msg === \"clear_pin\" ? [] : { ...e };\n}\nconst Dn = react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction As() {\n  const e = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Dn);\n  if (!e)\n    throw Error(\"Tried to access LayoutContext context outside a LayoutContextProvider provider.\");\n  return e;\n}\nfunction ks(e) {\n  const t = xo();\n  if (e ?? (e = t), !e)\n    throw Error(\"Tried to access LayoutContext context outside a LayoutContextProvider provider.\");\n  return e;\n}\nfunction Os() {\n  const [e, t] = react__WEBPACK_IMPORTED_MODULE_1__.useReducer(In, Tn), [n, r] = react__WEBPACK_IMPORTED_MODULE_1__.useReducer(_n, Cn);\n  return {\n    pin: { dispatch: t, state: e },\n    widget: { dispatch: r, state: n }\n  };\n}\nfunction Ls(e) {\n  const [t, n] = react__WEBPACK_IMPORTED_MODULE_1__.useReducer(In, Tn), [r, i] = react__WEBPACK_IMPORTED_MODULE_1__.useReducer(_n, Cn);\n  return e ?? {\n    pin: { dispatch: n, state: t },\n    widget: { dispatch: i, state: r }\n  };\n}\nfunction xo() {\n  return react__WEBPACK_IMPORTED_MODULE_1__.useContext(Dn);\n}\nconst Mn = react__WEBPACK_IMPORTED_MODULE_1__.createContext(\n  void 0\n);\nfunction _s() {\n  const e = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Mn);\n  if (!e)\n    throw Error(\"tried to access track context outside of track context provider\");\n  return e;\n}\nfunction Rn() {\n  return react__WEBPACK_IMPORTED_MODULE_1__.useContext(Mn);\n}\nfunction Is(e) {\n  const t = Rn(), n = e ?? t;\n  if (!n)\n    throw new Error(\n      \"No TrackRef, make sure you are inside a TrackRefContext or pass the TrackRef explicitly\"\n    );\n  return n;\n}\nconst Nn = react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction Ds() {\n  const e = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Nn);\n  if (!e)\n    throw Error(\"tried to access participant context outside of participant context provider\");\n  return e;\n}\nfunction Eo() {\n  return react__WEBPACK_IMPORTED_MODULE_1__.useContext(Nn);\n}\nfunction Ms(e) {\n  const t = Eo(), n = Rn(), r = e ?? t ?? (n == null ? void 0 : n.participant);\n  if (!r)\n    throw new Error(\n      \"No participant provided, make sure you are inside a participant context or pass the participant explicitly\"\n    );\n  return r;\n}\nconst $n = react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction Rs() {\n  const e = react__WEBPACK_IMPORTED_MODULE_1__.useContext($n);\n  if (!e)\n    throw Error(\"tried to access room context outside of livekit room component\");\n  return e;\n}\nfunction To() {\n  return react__WEBPACK_IMPORTED_MODULE_1__.useContext($n);\n}\nfunction Ns(e) {\n  const t = To(), n = e ?? t;\n  if (!n)\n    throw new Error(\n      \"No room provided, make sure you are inside a Room context or pass the room explicitly\"\n    );\n  return n;\n}\nconst Co = react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction $s(e) {\n  const t = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Co);\n  if (e === !0) {\n    if (t)\n      return t;\n    throw Error(\"tried to access feature context, but none is present\");\n  }\n  return t;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L2Rpc3QvY29udGV4dHMtQmdnWXFuMFMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUUEsTUFBTUEsS0FBTSxLQUFLLEtBQ1hDLEtBQU0sS0FBSyxLQUNYQyxLQUFRLEtBQUssT0FFYkMsS0FBZSxDQUFBQyxPQUFNO0FBQUEsRUFDekIsR0FBR0E7QUFBQSxFQUNILEdBQUdBO0FBQ0wsSUFDTUMsS0FBa0I7QUFBQSxFQUN0QixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixLQUFLO0FBQ1AsR0FDTUMsS0FBdUI7QUFBQSxFQUMzQixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQ1A7QUFDQSxTQUFTQyxHQUFNQyxHQUFPQyxHQUFPQyxHQUFLO0FBQ2hDLFNBQU9ULEdBQUlPLEdBQU9SLEdBQUlTLEdBQU9DLENBQUcsQ0FBQztBQUNuQztBQUNBLFNBQVNDLEdBQVNGLEdBQU9HLEdBQU87QUFDOUIsU0FBTyxPQUFPSCxLQUFVLGFBQWFBLEVBQU1HLENBQUssSUFBSUg7QUFDdEQ7QUFDQSxTQUFTSSxHQUFRQyxHQUFXO0FBQzFCLFNBQU9BLEVBQVUsTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUMvQjtBQUNBLFNBQVNDLEdBQWFELEdBQVc7QUFDL0IsU0FBT0EsRUFBVSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQy9CO0FBQ0EsU0FBU0UsR0FBZ0JDLEdBQU07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QUFBLGdCQUFBQSxFQUFjO0FBQ2xELE1BQUksQ0FBQ3h2QjtBQUNILFVBQU0sSUFBSTtBQUFBLE1BQ1I7QUFBQTtBQUdHLFNBQUFBO0FBQ1Q7QUN2Q2EsTUFBQXl2QixLQUFjcEIsZ0RBQW1CLENBQW1CLE1BQVM7QUFPbkUsU0FBU3FCLEtBQWlCO0FBQ3pCLFFBQUFDLElBQU10Qiw2Q0FBZ0IsQ0FBQ29CLEVBQVc7QUFDeEMsTUFBSSxDQUFDRTtBQUNILFVBQU0sTUFBTSxnRUFBZ0U7QUFFdkUsU0FBQUE7QUFDVDtBQU1PLFNBQVNDLEtBQXNCO0FBQzdCLFNBQUF2Qiw2Q0FBZ0IsQ0FBQ29CLEVBQVc7QUFDckM7QUFPTyxTQUFTSSxHQUFjaFEsR0FBYTtBQUN6QyxRQUFNM0gsSUFBVTBYLE1BQ1ZodUIsSUFBSWllLEtBQVEzSDtBQUNsQixNQUFJLENBQUN0VztBQUNILFVBQU0sSUFBSTtBQUFBLE1BQ1I7QUFBQTtBQUdHLFNBQUFBO0FBQ1Q7QUM3QmEsTUFBQWt1QixLQUFtQnpCLGdEQUFtQixDQUEyQixNQUFTO0FBS2hGLFNBQVMwQixHQUFxQ0MsR0FBZ0M7QUFDN0UsUUFBQUwsSUFBTXRCLDZDQUFnQixDQUFDeUIsRUFBZ0I7QUFDN0MsTUFBSUUsTUFBWSxJQUFNO0FBQ3BCLFFBQUlMO0FBQ0ssYUFBQUE7QUFFUCxVQUFNLE1BQU0sc0RBQXNEO0FBQUEsRUFFdEU7QUFDTyxTQUFBQTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL0BmbG9hdGluZy11aSt1dGlsc0AwLjIuOC9ub2RlX21vZHVsZXMvQGZsb2F0aW5nLXVpL3V0aWxzL2Rpc3QvZmxvYXRpbmctdWkudXRpbHMubWpzPzQxYTMiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL0BmbG9hdGluZy11aStjb3JlQDEuNi4wL25vZGVfbW9kdWxlcy9AZmxvYXRpbmctdWkvY29yZS9kaXN0L2Zsb2F0aW5nLXVpLmNvcmUubWpzPzVjNmUiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL0BmbG9hdGluZy11aSt1dGlsc0AwLjIuOC9ub2RlX21vZHVsZXMvQGZsb2F0aW5nLXVpL3V0aWxzL2Rpc3QvZmxvYXRpbmctdWkudXRpbHMuZG9tLm1qcz8wNjIwIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9AZmxvYXRpbmctdWkrZG9tQDEuNi4xMS9ub2RlX21vZHVsZXMvQGZsb2F0aW5nLXVpL2RvbS9kaXN0L2Zsb2F0aW5nLXVpLmRvbS5tanM/MzQ0ZCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vbG9nbGV2ZWxAMS45LjEvbm9kZV9tb2R1bGVzL2xvZ2xldmVsL2xpYi9sb2dsZXZlbC5qcz8zNDU5Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS90c2xpYkAyLjcuMC9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcz9mYTg0Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanM/YzdhNyIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzPzNjNGIiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcz85MzRjIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyclJlbW92ZS5qcz81NWI3Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanM/Y2Q2NCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzP2JkZjAiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXIuanM/ZTIyNiIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvci5qcz9mMDZkIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanM/ZTMwYiIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9lcnJvckNvbnRleHQuanM/MDYwMyIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcz8wNDgyIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcz82ZDFiIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzP2Y1MjMiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcz8xNTBhIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzPzgxN2UiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbGlmdC5qcz85YTZhIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzPzc5Y2MiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanM/ZTFmMSIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3ViamVjdC5qcz9hZDU0Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3QuanM/M2Y5NyIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlci5qcz8xZTY3Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzPzVkNDUiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9pbnRlcnZhbFByb3ZpZGVyLmpzPzg3MTIiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcz9kNGMwIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TY2hlZHVsZXIuanM/Zjk2NyIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jU2NoZWR1bGVyLmpzP2E1NDEiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9hc3luYy5qcz8xNTdkIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5LmpzP2Y2NWMiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanM/MTZlNSIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcmdzLmpzPzU0NTMiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanM/YmJlMCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanM/OGQxZCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlLmpzPzJiNDkiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBc3luY0l0ZXJhYmxlLmpzPzQ3MTUiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcz80ZGZiIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanM/MjM4YSIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzPzM5YTciLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanM/MjczMCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbm5lckZyb20uanM/MGQwOCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9leGVjdXRlU2NoZWR1bGUuanM/ZjQ3NyIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPbi5qcz8yYzA1Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanM/YzhjNCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcz9hNmQzIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVQcm9taXNlLmpzP2EyYzIiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5LmpzPzU5MGMiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzPzI4MjIiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFzeW5jSXRlcmFibGUuanM/OWNhNCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzP2RkZDgiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZWQuanM/MmU3NSIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tLmpzPzQwY2MiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvb2YuanM/MjM3NCIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0RhdGUuanM/ZDZjNiIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXQuanM/YWY2MSIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcz83Yjk3Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL21hcE9uZU9yTWFueUFyZ3MuanM/MTgzNSIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlSW50ZXJuYWxzLmpzPzZkNmIiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcC5qcz9jOGY5Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VBbGwuanM/ZmE2NyIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdEFsbC5qcz8zMGM3Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdC5qcz80ODBmIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcz9kNGEyIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlLmpzPzhhZDciLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9maWx0ZXIuanM/OTE5YiIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW5JbnRlcm5hbHMuanM/NDBlYSIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxDaGFuZ2VkLmpzP2UyNzgiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9maW5hbGl6ZS5qcz9hN2Q5Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2Nhbi5qcz9mNmIyIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFVudGlsLmpzPzFlMzEiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzLy5wbnBtL3J4anNANy44LjEvbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zdGFydFdpdGguanM/YmE4ZSIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvLnBucG0vcnhqc0A3LjguMS9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcC5qcz82OGI1Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy8ucG5wbS9yeGpzQDcuOC4xL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVVudGlsLmpzPzA4MGYiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29yZS9kaXN0L2luZGV4Lm1qcz8wNzg4Iiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL0BsaXZla2l0L2NvbXBvbmVudHMtcmVhY3Qvc3JjL2NvbnRleHQvY2hhdC1jb250ZXh0LnRzP2ZiMjQiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9zcmMvY29udGV4dC9waW4tY29udGV4dC50cz84ZWZmIiwid2VicGFjazovL2xpdmVraXQtbWVldC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl2ZWtpdCtjb21wb25lbnRzLXJlYWN0QDIuNi41X0BsaXZla2l0K2tyaXNwLW5vaXNlLWZpbHRlckAwLjIuMTJfbGl2ZWtpdC1jbGllbnRAMi41LjlfX2xpdmVfbGF2Nmd5Yjd6NjYzanhsbmVpeDVwc2VwZXkvbm9kZV9tb2R1bGVzL0BsaXZla2l0L2NvbXBvbmVudHMtcmVhY3Qvc3JjL2NvbnRleHQvbGF5b3V0LWNvbnRleHQudHM/YjQ5YiIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L3NyYy9jb250ZXh0L3RyYWNrLXJlZmVyZW5jZS1jb250ZXh0LnRzP2NiMmYiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9zcmMvY29udGV4dC9wYXJ0aWNpcGFudC1jb250ZXh0LnRzPzUyMmQiLCJ3ZWJwYWNrOi8vbGl2ZWtpdC1tZWV0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXZla2l0K2NvbXBvbmVudHMtcmVhY3RAMi42LjVfQGxpdmVraXQra3Jpc3Atbm9pc2UtZmlsdGVyQDAuMi4xMl9saXZla2l0LWNsaWVudEAyLjUuOV9fbGl2ZV9sYXY2Z3liN3o2NjNqeGxuZWl4NXBzZXBleS9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1yZWFjdC9zcmMvY29udGV4dC9yb29tLWNvbnRleHQudHM/NDhhMSIsIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L3NyYy9jb250ZXh0L2ZlYXR1cmUtY29udGV4dC50cz83ZDQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3VzdG9tIHBvc2l0aW9uaW5nIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL3ZpcnR1YWwtZWxlbWVudHNcbiAqL1xuXG5jb25zdCBzaWRlcyA9IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J107XG5jb25zdCBhbGlnbm1lbnRzID0gWydzdGFydCcsICdlbmQnXTtcbmNvbnN0IHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovc2lkZXMucmVkdWNlKChhY2MsIHNpZGUpID0+IGFjYy5jb25jYXQoc2lkZSwgc2lkZSArIFwiLVwiICsgYWxpZ25tZW50c1swXSwgc2lkZSArIFwiLVwiICsgYWxpZ25tZW50c1sxXSksIFtdKTtcbmNvbnN0IG1pbiA9IE1hdGgubWluO1xuY29uc3QgbWF4ID0gTWF0aC5tYXg7XG5jb25zdCByb3VuZCA9IE1hdGgucm91bmQ7XG5jb25zdCBmbG9vciA9IE1hdGguZmxvb3I7XG5jb25zdCBjcmVhdGVDb29yZHMgPSB2ID0+ICh7XG4gIHg6IHYsXG4gIHk6IHZcbn0pO1xuY29uc3Qgb3Bwb3NpdGVTaWRlTWFwID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICBib3R0b206ICd0b3AnLFxuICB0b3A6ICdib3R0b20nXG59O1xuY29uc3Qgb3Bwb3NpdGVBbGlnbm1lbnRNYXAgPSB7XG4gIHN0YXJ0OiAnZW5kJyxcbiAgZW5kOiAnc3RhcnQnXG59O1xuZnVuY3Rpb24gY2xhbXAoc3RhcnQsIHZhbHVlLCBlbmQpIHtcbiAgcmV0dXJuIG1heChzdGFydCwgbWluKHZhbHVlLCBlbmQpKTtcbn1cbmZ1bmN0aW9uIGV2YWx1YXRlKHZhbHVlLCBwYXJhbSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8gdmFsdWUocGFyYW0pIDogdmFsdWU7XG59XG5mdW5jdGlvbiBnZXRTaWRlKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG59XG5mdW5jdGlvbiBnZXRBbGlnbm1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcbn1cbmZ1bmN0aW9uIGdldE9wcG9zaXRlQXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59XG5mdW5jdGlvbiBnZXRBeGlzTGVuZ3RoKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbn1cbmZ1bmN0aW9uIGdldFNpZGVBeGlzKHBsYWNlbWVudCkge1xuICByZXR1cm4gWyd0b3AnLCAnYm90dG9tJ10uaW5jbHVkZXMoZ2V0U2lkZShwbGFjZW1lbnQpKSA/ICd5JyA6ICd4Jztcbn1cbmZ1bmN0aW9uIGdldEFsaWdubWVudEF4aXMocGxhY2VtZW50KSB7XG4gIHJldHVybiBnZXRPcHBvc2l0ZUF4aXMoZ2V0U2lkZUF4aXMocGxhY2VtZW50KSk7XG59XG5mdW5jdGlvbiBnZXRBbGlnbm1lbnRTaWRlcyhwbGFjZW1lbnQsIHJlY3RzLCBydGwpIHtcbiAgaWYgKHJ0bCA9PT0gdm9pZCAwKSB7XG4gICAgcnRsID0gZmFsc2U7XG4gIH1cbiAgY29uc3QgYWxpZ25tZW50ID0gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCk7XG4gIGNvbnN0IGFsaWdubWVudEF4aXMgPSBnZXRBbGlnbm1lbnRBeGlzKHBsYWNlbWVudCk7XG4gIGNvbnN0IGxlbmd0aCA9IGdldEF4aXNMZW5ndGgoYWxpZ25tZW50QXhpcyk7XG4gIGxldCBtYWluQWxpZ25tZW50U2lkZSA9IGFsaWdubWVudEF4aXMgPT09ICd4JyA/IGFsaWdubWVudCA9PT0gKHJ0bCA/ICdlbmQnIDogJ3N0YXJ0JykgPyAncmlnaHQnIDogJ2xlZnQnIDogYWxpZ25tZW50ID09PSAnc3RhcnQnID8gJ2JvdHRvbScgOiAndG9wJztcbiAgaWYgKHJlY3RzLnJlZmVyZW5jZVtsZW5ndGhdID4gcmVjdHMuZmxvYXRpbmdbbGVuZ3RoXSkge1xuICAgIG1haW5BbGlnbm1lbnRTaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpbkFsaWdubWVudFNpZGUpO1xuICB9XG4gIHJldHVybiBbbWFpbkFsaWdubWVudFNpZGUsIGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5BbGlnbm1lbnRTaWRlKV07XG59XG5mdW5jdGlvbiBnZXRFeHBhbmRlZFBsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGNvbnN0IG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cbmZ1bmN0aW9uIGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBhbGlnbm1lbnQgPT4gb3Bwb3NpdGVBbGlnbm1lbnRNYXBbYWxpZ25tZW50XSk7XG59XG5mdW5jdGlvbiBnZXRTaWRlTGlzdChzaWRlLCBpc1N0YXJ0LCBydGwpIHtcbiAgY29uc3QgbHIgPSBbJ2xlZnQnLCAncmlnaHQnXTtcbiAgY29uc3QgcmwgPSBbJ3JpZ2h0JywgJ2xlZnQnXTtcbiAgY29uc3QgdGIgPSBbJ3RvcCcsICdib3R0b20nXTtcbiAgY29uc3QgYnQgPSBbJ2JvdHRvbScsICd0b3AnXTtcbiAgc3dpdGNoIChzaWRlKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgaWYgKHJ0bCkgcmV0dXJuIGlzU3RhcnQgPyBybCA6IGxyO1xuICAgICAgcmV0dXJuIGlzU3RhcnQgPyBsciA6IHJsO1xuICAgIGNhc2UgJ2xlZnQnOlxuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJldHVybiBpc1N0YXJ0ID8gdGIgOiBidDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFtdO1xuICB9XG59XG5mdW5jdGlvbiBnZXRPcHBvc2l0ZUF4aXNQbGFjZW1lbnRzKHBsYWNlbWVudCwgZmxpcEFsaWdubWVudCwgZGlyZWN0aW9uLCBydGwpIHtcbiAgY29uc3QgYWxpZ25tZW50ID0gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCk7XG4gIGxldCBsaXN0ID0gZ2V0U2lkZUxpc3QoZ2V0U2lkZShwbGFjZW1lbnQpLCBkaXJlY3Rpb24gPT09ICdzdGFydCcsIHJ0bCk7XG4gIGlmIChhbGlnbm1lbnQpIHtcbiAgICBsaXN0ID0gbGlzdC5tYXAoc2lkZSA9PiBzaWRlICsgXCItXCIgKyBhbGlnbm1lbnQpO1xuICAgIGlmIChmbGlwQWxpZ25tZW50KSB7XG4gICAgICBsaXN0ID0gbGlzdC5jb25jYXQobGlzdC5tYXAoZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxpc3Q7XG59XG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgc2lkZSA9PiBvcHBvc2l0ZVNpZGVNYXBbc2lkZV0pO1xufVxuZnVuY3Rpb24gZXhwYW5kUGFkZGluZ09iamVjdChwYWRkaW5nKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwLFxuICAgIC4uLnBhZGRpbmdcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFBhZGRpbmdPYmplY3QocGFkZGluZykge1xuICByZXR1cm4gdHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gZXhwYW5kUGFkZGluZ09iamVjdChwYWRkaW5nKSA6IHtcbiAgICB0b3A6IHBhZGRpbmcsXG4gICAgcmlnaHQ6IHBhZGRpbmcsXG4gICAgYm90dG9tOiBwYWRkaW5nLFxuICAgIGxlZnQ6IHBhZGRpbmdcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdCkge1xuICBjb25zdCB7XG4gICAgeCxcbiAgICB5LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodFxuICB9ID0gcmVjdDtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgdG9wOiB5LFxuICAgIGxlZnQ6IHgsXG4gICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICBib3R0b206IHkgKyBoZWlnaHQsXG4gICAgeCxcbiAgICB5XG4gIH07XG59XG5cbmV4cG9ydCB7IGFsaWdubWVudHMsIGNsYW1wLCBjcmVhdGVDb29yZHMsIGV2YWx1YXRlLCBleHBhbmRQYWRkaW5nT2JqZWN0LCBmbG9vciwgZ2V0QWxpZ25tZW50LCBnZXRBbGlnbm1lbnRBeGlzLCBnZXRBbGlnbm1lbnRTaWRlcywgZ2V0QXhpc0xlbmd0aCwgZ2V0RXhwYW5kZWRQbGFjZW1lbnRzLCBnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVBeGlzLCBnZXRPcHBvc2l0ZUF4aXNQbGFjZW1lbnRzLCBnZXRPcHBvc2l0ZVBsYWNlbWVudCwgZ2V0UGFkZGluZ09iamVjdCwgZ2V0U2lkZSwgZ2V0U2lkZUF4aXMsIG1heCwgbWluLCBwbGFjZW1lbnRzLCByZWN0VG9DbGllbnRSZWN0LCByb3VuZCwgc2lkZXMgfTtcbiIsImltcG9ydCB7IGdldFNpZGVBeGlzLCBnZXRBbGlnbm1lbnRBeGlzLCBnZXRBeGlzTGVuZ3RoLCBnZXRTaWRlLCBnZXRBbGlnbm1lbnQsIGV2YWx1YXRlLCBnZXRQYWRkaW5nT2JqZWN0LCByZWN0VG9DbGllbnRSZWN0LCBtaW4sIGNsYW1wLCBwbGFjZW1lbnRzLCBnZXRBbGlnbm1lbnRTaWRlcywgZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQsIGdldE9wcG9zaXRlUGxhY2VtZW50LCBnZXRFeHBhbmRlZFBsYWNlbWVudHMsIGdldE9wcG9zaXRlQXhpc1BsYWNlbWVudHMsIHNpZGVzLCBtYXgsIGdldE9wcG9zaXRlQXhpcyB9IGZyb20gJ0BmbG9hdGluZy11aS91dGlscyc7XG5leHBvcnQgeyByZWN0VG9DbGllbnRSZWN0IH0gZnJvbSAnQGZsb2F0aW5nLXVpL3V0aWxzJztcblxuZnVuY3Rpb24gY29tcHV0ZUNvb3Jkc0Zyb21QbGFjZW1lbnQoX3JlZiwgcGxhY2VtZW50LCBydGwpIHtcbiAgbGV0IHtcbiAgICByZWZlcmVuY2UsXG4gICAgZmxvYXRpbmdcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHNpZGVBeGlzID0gZ2V0U2lkZUF4aXMocGxhY2VtZW50KTtcbiAgY29uc3QgYWxpZ25tZW50QXhpcyA9IGdldEFsaWdubWVudEF4aXMocGxhY2VtZW50KTtcbiAgY29uc3QgYWxpZ25MZW5ndGggPSBnZXRBeGlzTGVuZ3RoKGFsaWdubWVudEF4aXMpO1xuICBjb25zdCBzaWRlID0gZ2V0U2lkZShwbGFjZW1lbnQpO1xuICBjb25zdCBpc1ZlcnRpY2FsID0gc2lkZUF4aXMgPT09ICd5JztcbiAgY29uc3QgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGZsb2F0aW5nLndpZHRoIC8gMjtcbiAgY29uc3QgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBmbG9hdGluZy5oZWlnaHQgLyAyO1xuICBjb25zdCBjb21tb25BbGlnbiA9IHJlZmVyZW5jZVthbGlnbkxlbmd0aF0gLyAyIC0gZmxvYXRpbmdbYWxpZ25MZW5ndGhdIC8gMjtcbiAgbGV0IGNvb3JkcztcbiAgc3dpdGNoIChzaWRlKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIGNvb3JkcyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBmbG9hdGluZy5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgY29vcmRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICBjb29yZHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICBjb29yZHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZmxvYXRpbmcud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgY29vcmRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnlcbiAgICAgIH07XG4gIH1cbiAgc3dpdGNoIChnZXRBbGlnbm1lbnQocGxhY2VtZW50KSkge1xuICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgIGNvb3Jkc1thbGlnbm1lbnRBeGlzXSAtPSBjb21tb25BbGlnbiAqIChydGwgJiYgaXNWZXJ0aWNhbCA/IC0xIDogMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlbmQnOlxuICAgICAgY29vcmRzW2FsaWdubWVudEF4aXNdICs9IGNvbW1vbkFsaWduICogKHJ0bCAmJiBpc1ZlcnRpY2FsID8gLTEgOiAxKTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBjb29yZHM7XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGB4YCBhbmQgYHlgIGNvb3JkaW5hdGVzIHRoYXQgd2lsbCBwbGFjZSB0aGUgZmxvYXRpbmcgZWxlbWVudFxuICogbmV4dCB0byBhIGdpdmVuIHJlZmVyZW5jZSBlbGVtZW50LlxuICpcbiAqIFRoaXMgZXhwb3J0IGRvZXMgbm90IGhhdmUgYW55IGBwbGF0Zm9ybWAgaW50ZXJmYWNlIGxvZ2ljLiBZb3Ugd2lsbCBuZWVkIHRvXG4gKiB3cml0ZSBvbmUgZm9yIHRoZSBwbGF0Zm9ybSB5b3UgYXJlIHVzaW5nIEZsb2F0aW5nIFVJIHdpdGguXG4gKi9cbmNvbnN0IGNvbXB1dGVQb3NpdGlvbiA9IGFzeW5jIChyZWZlcmVuY2UsIGZsb2F0aW5nLCBjb25maWcpID0+IHtcbiAgY29uc3Qge1xuICAgIHBsYWNlbWVudCA9ICdib3R0b20nLFxuICAgIHN0cmF0ZWd5ID0gJ2Fic29sdXRlJyxcbiAgICBtaWRkbGV3YXJlID0gW10sXG4gICAgcGxhdGZvcm1cbiAgfSA9IGNvbmZpZztcbiAgY29uc3QgdmFsaWRNaWRkbGV3YXJlID0gbWlkZGxld2FyZS5maWx0ZXIoQm9vbGVhbik7XG4gIGNvbnN0IHJ0bCA9IGF3YWl0IChwbGF0Zm9ybS5pc1JUTCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0uaXNSVEwoZmxvYXRpbmcpKTtcbiAgbGV0IHJlY3RzID0gYXdhaXQgcGxhdGZvcm0uZ2V0RWxlbWVudFJlY3RzKHtcbiAgICByZWZlcmVuY2UsXG4gICAgZmxvYXRpbmcsXG4gICAgc3RyYXRlZ3lcbiAgfSk7XG4gIGxldCB7XG4gICAgeCxcbiAgICB5XG4gIH0gPSBjb21wdXRlQ29vcmRzRnJvbVBsYWNlbWVudChyZWN0cywgcGxhY2VtZW50LCBydGwpO1xuICBsZXQgc3RhdGVmdWxQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gIGxldCBtaWRkbGV3YXJlRGF0YSA9IHt9O1xuICBsZXQgcmVzZXRDb3VudCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsaWRNaWRkbGV3YXJlLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qge1xuICAgICAgbmFtZSxcbiAgICAgIGZuXG4gICAgfSA9IHZhbGlkTWlkZGxld2FyZVtpXTtcbiAgICBjb25zdCB7XG4gICAgICB4OiBuZXh0WCxcbiAgICAgIHk6IG5leHRZLFxuICAgICAgZGF0YSxcbiAgICAgIHJlc2V0XG4gICAgfSA9IGF3YWl0IGZuKHtcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgaW5pdGlhbFBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50OiBzdGF0ZWZ1bFBsYWNlbWVudCxcbiAgICAgIHN0cmF0ZWd5LFxuICAgICAgbWlkZGxld2FyZURhdGEsXG4gICAgICByZWN0cyxcbiAgICAgIHBsYXRmb3JtLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlLFxuICAgICAgICBmbG9hdGluZ1xuICAgICAgfVxuICAgIH0pO1xuICAgIHggPSBuZXh0WCAhPSBudWxsID8gbmV4dFggOiB4O1xuICAgIHkgPSBuZXh0WSAhPSBudWxsID8gbmV4dFkgOiB5O1xuICAgIG1pZGRsZXdhcmVEYXRhID0ge1xuICAgICAgLi4ubWlkZGxld2FyZURhdGEsXG4gICAgICBbbmFtZV06IHtcbiAgICAgICAgLi4ubWlkZGxld2FyZURhdGFbbmFtZV0sXG4gICAgICAgIC4uLmRhdGFcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChyZXNldCAmJiByZXNldENvdW50IDw9IDUwKSB7XG4gICAgICByZXNldENvdW50Kys7XG4gICAgICBpZiAodHlwZW9mIHJlc2V0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAocmVzZXQucGxhY2VtZW50KSB7XG4gICAgICAgICAgc3RhdGVmdWxQbGFjZW1lbnQgPSByZXNldC5wbGFjZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc2V0LnJlY3RzKSB7XG4gICAgICAgICAgcmVjdHMgPSByZXNldC5yZWN0cyA9PT0gdHJ1ZSA/IGF3YWl0IHBsYXRmb3JtLmdldEVsZW1lbnRSZWN0cyh7XG4gICAgICAgICAgICByZWZlcmVuY2UsXG4gICAgICAgICAgICBmbG9hdGluZyxcbiAgICAgICAgICAgIHN0cmF0ZWd5XG4gICAgICAgICAgfSkgOiByZXNldC5yZWN0cztcbiAgICAgICAgfVxuICAgICAgICAoe1xuICAgICAgICAgIHgsXG4gICAgICAgICAgeVxuICAgICAgICB9ID0gY29tcHV0ZUNvb3Jkc0Zyb21QbGFjZW1lbnQocmVjdHMsIHN0YXRlZnVsUGxhY2VtZW50LCBydGwpKTtcbiAgICAgIH1cbiAgICAgIGkgPSAtMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4LFxuICAgIHksXG4gICAgcGxhY2VtZW50OiBzdGF0ZWZ1bFBsYWNlbWVudCxcbiAgICBzdHJhdGVneSxcbiAgICBtaWRkbGV3YXJlRGF0YVxuICB9O1xufTtcblxuLyoqXG4gKiBSZXNvbHZlcyB3aXRoIGFuIG9iamVjdCBvZiBvdmVyZmxvdyBzaWRlIG9mZnNldHMgdGhhdCBkZXRlcm1pbmUgaG93IG11Y2ggdGhlXG4gKiBlbGVtZW50IGlzIG92ZXJmbG93aW5nIGEgZ2l2ZW4gY2xpcHBpbmcgYm91bmRhcnkgb24gZWFjaCBzaWRlLlxuICogLSBwb3NpdGl2ZSA9IG92ZXJmbG93aW5nIHRoZSBib3VuZGFyeSBieSB0aGF0IG51bWJlciBvZiBwaXhlbHNcbiAqIC0gbmVnYXRpdmUgPSBob3cgbWFueSBwaXhlbHMgbGVmdCBiZWZvcmUgaXQgd2lsbCBvdmVyZmxvd1xuICogLSAwID0gbGllcyBmbHVzaCB3aXRoIHRoZSBib3VuZGFyeVxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL2RldGVjdE92ZXJmbG93XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIHZhciBfYXdhaXQkcGxhdGZvcm0kaXNFbGU7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgY29uc3Qge1xuICAgIHgsXG4gICAgeSxcbiAgICBwbGF0Zm9ybSxcbiAgICByZWN0cyxcbiAgICBlbGVtZW50cyxcbiAgICBzdHJhdGVneVxuICB9ID0gc3RhdGU7XG4gIGNvbnN0IHtcbiAgICBib3VuZGFyeSA9ICdjbGlwcGluZ0FuY2VzdG9ycycsXG4gICAgcm9vdEJvdW5kYXJ5ID0gJ3ZpZXdwb3J0JyxcbiAgICBlbGVtZW50Q29udGV4dCA9ICdmbG9hdGluZycsXG4gICAgYWx0Qm91bmRhcnkgPSBmYWxzZSxcbiAgICBwYWRkaW5nID0gMFxuICB9ID0gZXZhbHVhdGUob3B0aW9ucywgc3RhdGUpO1xuICBjb25zdCBwYWRkaW5nT2JqZWN0ID0gZ2V0UGFkZGluZ09iamVjdChwYWRkaW5nKTtcbiAgY29uc3QgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSAnZmxvYXRpbmcnID8gJ3JlZmVyZW5jZScgOiAnZmxvYXRpbmcnO1xuICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuICBjb25zdCBjbGlwcGluZ0NsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KGF3YWl0IHBsYXRmb3JtLmdldENsaXBwaW5nUmVjdCh7XG4gICAgZWxlbWVudDogKChfYXdhaXQkcGxhdGZvcm0kaXNFbGUgPSBhd2FpdCAocGxhdGZvcm0uaXNFbGVtZW50ID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybS5pc0VsZW1lbnQoZWxlbWVudCkpKSAhPSBudWxsID8gX2F3YWl0JHBsYXRmb3JtJGlzRWxlIDogdHJ1ZSkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCAoYXdhaXQgKHBsYXRmb3JtLmdldERvY3VtZW50RWxlbWVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0uZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnRzLmZsb2F0aW5nKSkpLFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBzdHJhdGVneVxuICB9KSk7XG4gIGNvbnN0IHJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gJ2Zsb2F0aW5nJyA/IHtcbiAgICAuLi5yZWN0cy5mbG9hdGluZyxcbiAgICB4LFxuICAgIHlcbiAgfSA6IHJlY3RzLnJlZmVyZW5jZTtcbiAgY29uc3Qgb2Zmc2V0UGFyZW50ID0gYXdhaXQgKHBsYXRmb3JtLmdldE9mZnNldFBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0uZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnRzLmZsb2F0aW5nKSk7XG4gIGNvbnN0IG9mZnNldFNjYWxlID0gKGF3YWl0IChwbGF0Zm9ybS5pc0VsZW1lbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtLmlzRWxlbWVudChvZmZzZXRQYXJlbnQpKSkgPyAoYXdhaXQgKHBsYXRmb3JtLmdldFNjYWxlID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybS5nZXRTY2FsZShvZmZzZXRQYXJlbnQpKSkgfHwge1xuICAgIHg6IDEsXG4gICAgeTogMVxuICB9IDoge1xuICAgIHg6IDEsXG4gICAgeTogMVxuICB9O1xuICBjb25zdCBlbGVtZW50Q2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3QocGxhdGZvcm0uY29udmVydE9mZnNldFBhcmVudFJlbGF0aXZlUmVjdFRvVmlld3BvcnRSZWxhdGl2ZVJlY3QgPyBhd2FpdCBwbGF0Zm9ybS5jb252ZXJ0T2Zmc2V0UGFyZW50UmVsYXRpdmVSZWN0VG9WaWV3cG9ydFJlbGF0aXZlUmVjdCh7XG4gICAgZWxlbWVudHMsXG4gICAgcmVjdCxcbiAgICBvZmZzZXRQYXJlbnQsXG4gICAgc3RyYXRlZ3lcbiAgfSkgOiByZWN0KTtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IChjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3ApIC8gb2Zmc2V0U2NhbGUueSxcbiAgICBib3R0b206IChlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20pIC8gb2Zmc2V0U2NhbGUueSxcbiAgICBsZWZ0OiAoY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0KSAvIG9mZnNldFNjYWxlLngsXG4gICAgcmlnaHQ6IChlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHQpIC8gb2Zmc2V0U2NhbGUueFxuICB9O1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGRhdGEgdG8gcG9zaXRpb24gYW4gaW5uZXIgZWxlbWVudCBvZiB0aGUgZmxvYXRpbmcgZWxlbWVudCBzbyB0aGF0IGl0XG4gKiBhcHBlYXJzIGNlbnRlcmVkIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9hcnJvd1xuICovXG5jb25zdCBhcnJvdyA9IG9wdGlvbnMgPT4gKHtcbiAgbmFtZTogJ2Fycm93JyxcbiAgb3B0aW9ucyxcbiAgYXN5bmMgZm4oc3RhdGUpIHtcbiAgICBjb25zdCB7XG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHBsYWNlbWVudCxcbiAgICAgIHJlY3RzLFxuICAgICAgcGxhdGZvcm0sXG4gICAgICBlbGVtZW50cyxcbiAgICAgIG1pZGRsZXdhcmVEYXRhXG4gICAgfSA9IHN0YXRlO1xuICAgIC8vIFNpbmNlIGBlbGVtZW50YCBpcyByZXF1aXJlZCwgd2UgZG9uJ3QgUGFydGlhbDw+IHRoZSB0eXBlLlxuICAgIGNvbnN0IHtcbiAgICAgIGVsZW1lbnQsXG4gICAgICBwYWRkaW5nID0gMFxuICAgIH0gPSBldmFsdWF0ZShvcHRpb25zLCBzdGF0ZSkgfHwge307XG4gICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCBwYWRkaW5nT2JqZWN0ID0gZ2V0UGFkZGluZ09iamVjdChwYWRkaW5nKTtcbiAgICBjb25zdCBjb29yZHMgPSB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH07XG4gICAgY29uc3QgYXhpcyA9IGdldEFsaWdubWVudEF4aXMocGxhY2VtZW50KTtcbiAgICBjb25zdCBsZW5ndGggPSBnZXRBeGlzTGVuZ3RoKGF4aXMpO1xuICAgIGNvbnN0IGFycm93RGltZW5zaW9ucyA9IGF3YWl0IHBsYXRmb3JtLmdldERpbWVuc2lvbnMoZWxlbWVudCk7XG4gICAgY29uc3QgaXNZQXhpcyA9IGF4aXMgPT09ICd5JztcbiAgICBjb25zdCBtaW5Qcm9wID0gaXNZQXhpcyA/ICd0b3AnIDogJ2xlZnQnO1xuICAgIGNvbnN0IG1heFByb3AgPSBpc1lBeGlzID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICAgIGNvbnN0IGNsaWVudFByb3AgPSBpc1lBeGlzID8gJ2NsaWVudEhlaWdodCcgOiAnY2xpZW50V2lkdGgnO1xuICAgIGNvbnN0IGVuZERpZmYgPSByZWN0cy5yZWZlcmVuY2VbbGVuZ3RoXSArIHJlY3RzLnJlZmVyZW5jZVtheGlzXSAtIGNvb3Jkc1theGlzXSAtIHJlY3RzLmZsb2F0aW5nW2xlbmd0aF07XG4gICAgY29uc3Qgc3RhcnREaWZmID0gY29vcmRzW2F4aXNdIC0gcmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICAgIGNvbnN0IGFycm93T2Zmc2V0UGFyZW50ID0gYXdhaXQgKHBsYXRmb3JtLmdldE9mZnNldFBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0uZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpKTtcbiAgICBsZXQgY2xpZW50U2l6ZSA9IGFycm93T2Zmc2V0UGFyZW50ID8gYXJyb3dPZmZzZXRQYXJlbnRbY2xpZW50UHJvcF0gOiAwO1xuXG4gICAgLy8gRE9NIHBsYXRmb3JtIGNhbiByZXR1cm4gYHdpbmRvd2AgYXMgdGhlIGBvZmZzZXRQYXJlbnRgLlxuICAgIGlmICghY2xpZW50U2l6ZSB8fCAhKGF3YWl0IChwbGF0Zm9ybS5pc0VsZW1lbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtLmlzRWxlbWVudChhcnJvd09mZnNldFBhcmVudCkpKSkge1xuICAgICAgY2xpZW50U2l6ZSA9IGVsZW1lbnRzLmZsb2F0aW5nW2NsaWVudFByb3BdIHx8IHJlY3RzLmZsb2F0aW5nW2xlbmd0aF07XG4gICAgfVxuICAgIGNvbnN0IGNlbnRlclRvUmVmZXJlbmNlID0gZW5kRGlmZiAvIDIgLSBzdGFydERpZmYgLyAyO1xuXG4gICAgLy8gSWYgdGhlIHBhZGRpbmcgaXMgbGFyZ2UgZW5vdWdoIHRoYXQgaXQgY2F1c2VzIHRoZSBhcnJvdyB0byBubyBsb25nZXIgYmVcbiAgICAvLyBjZW50ZXJlZCwgbW9kaWZ5IHRoZSBwYWRkaW5nIHNvIHRoYXQgaXQgaXMgY2VudGVyZWQuXG4gICAgY29uc3QgbGFyZ2VzdFBvc3NpYmxlUGFkZGluZyA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dEaW1lbnNpb25zW2xlbmd0aF0gLyAyIC0gMTtcbiAgICBjb25zdCBtaW5QYWRkaW5nID0gbWluKHBhZGRpbmdPYmplY3RbbWluUHJvcF0sIGxhcmdlc3RQb3NzaWJsZVBhZGRpbmcpO1xuICAgIGNvbnN0IG1heFBhZGRpbmcgPSBtaW4ocGFkZGluZ09iamVjdFttYXhQcm9wXSwgbGFyZ2VzdFBvc3NpYmxlUGFkZGluZyk7XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhlIGFycm93IGRvZXNuJ3Qgb3ZlcmZsb3cgdGhlIGZsb2F0aW5nIGVsZW1lbnQgaWYgdGhlIGNlbnRlclxuICAgIC8vIHBvaW50IGlzIG91dHNpZGUgdGhlIGZsb2F0aW5nIGVsZW1lbnQncyBib3VuZHMuXG4gICAgY29uc3QgbWluJDEgPSBtaW5QYWRkaW5nO1xuICAgIGNvbnN0IG1heCA9IGNsaWVudFNpemUgLSBhcnJvd0RpbWVuc2lvbnNbbGVuZ3RoXSAtIG1heFBhZGRpbmc7XG4gICAgY29uc3QgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd0RpbWVuc2lvbnNbbGVuZ3RoXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgICBjb25zdCBvZmZzZXQgPSBjbGFtcChtaW4kMSwgY2VudGVyLCBtYXgpO1xuXG4gICAgLy8gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbCBlbm91Z2ggdGhhdCB0aGUgYXJyb3cncyBwYWRkaW5nIGNhdXNlcyBpdCB0b1xuICAgIC8vIHRvIHBvaW50IHRvIG5vdGhpbmcgZm9yIGFuIGFsaWduZWQgcGxhY2VtZW50LCBhZGp1c3QgdGhlIG9mZnNldCBvZiB0aGVcbiAgICAvLyBmbG9hdGluZyBlbGVtZW50IGl0c2VsZi4gVG8gZW5zdXJlIGBzaGlmdCgpYCBjb250aW51ZXMgdG8gdGFrZSBhY3Rpb24sXG4gICAgLy8gYSBzaW5nbGUgcmVzZXQgaXMgcGVyZm9ybWVkIHdoZW4gdGhpcyBpcyB0cnVlLlxuICAgIGNvbnN0IHNob3VsZEFkZE9mZnNldCA9ICFtaWRkbGV3YXJlRGF0YS5hcnJvdyAmJiBnZXRBbGlnbm1lbnQocGxhY2VtZW50KSAhPSBudWxsICYmIGNlbnRlciAhPT0gb2Zmc2V0ICYmIHJlY3RzLnJlZmVyZW5jZVtsZW5ndGhdIC8gMiAtIChjZW50ZXIgPCBtaW4kMSA/IG1pblBhZGRpbmcgOiBtYXhQYWRkaW5nKSAtIGFycm93RGltZW5zaW9uc1tsZW5ndGhdIC8gMiA8IDA7XG4gICAgY29uc3QgYWxpZ25tZW50T2Zmc2V0ID0gc2hvdWxkQWRkT2Zmc2V0ID8gY2VudGVyIDwgbWluJDEgPyBjZW50ZXIgLSBtaW4kMSA6IGNlbnRlciAtIG1heCA6IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtheGlzXTogY29vcmRzW2F4aXNdICsgYWxpZ25tZW50T2Zmc2V0LFxuICAgICAgZGF0YToge1xuICAgICAgICBbYXhpc106IG9mZnNldCxcbiAgICAgICAgY2VudGVyT2Zmc2V0OiBjZW50ZXIgLSBvZmZzZXQgLSBhbGlnbm1lbnRPZmZzZXQsXG4gICAgICAgIC4uLihzaG91bGRBZGRPZmZzZXQgJiYge1xuICAgICAgICAgIGFsaWdubWVudE9mZnNldFxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIHJlc2V0OiBzaG91bGRBZGRPZmZzZXRcbiAgICB9O1xuICB9XG59KTtcblxuZnVuY3Rpb24gZ2V0UGxhY2VtZW50TGlzdChhbGlnbm1lbnQsIGF1dG9BbGlnbm1lbnQsIGFsbG93ZWRQbGFjZW1lbnRzKSB7XG4gIGNvbnN0IGFsbG93ZWRQbGFjZW1lbnRzU29ydGVkQnlBbGlnbm1lbnQgPSBhbGlnbm1lbnQgPyBbLi4uYWxsb3dlZFBsYWNlbWVudHMuZmlsdGVyKHBsYWNlbWVudCA9PiBnZXRBbGlnbm1lbnQocGxhY2VtZW50KSA9PT0gYWxpZ25tZW50KSwgLi4uYWxsb3dlZFBsYWNlbWVudHMuZmlsdGVyKHBsYWNlbWVudCA9PiBnZXRBbGlnbm1lbnQocGxhY2VtZW50KSAhPT0gYWxpZ25tZW50KV0gOiBhbGxvd2VkUGxhY2VtZW50cy5maWx0ZXIocGxhY2VtZW50ID0+IGdldFNpZGUocGxhY2VtZW50KSA9PT0gcGxhY2VtZW50KTtcbiAgcmV0dXJuIGFsbG93ZWRQbGFjZW1lbnRzU29ydGVkQnlBbGlnbm1lbnQuZmlsdGVyKHBsYWNlbWVudCA9PiB7XG4gICAgaWYgKGFsaWdubWVudCkge1xuICAgICAgcmV0dXJuIGdldEFsaWdubWVudChwbGFjZW1lbnQpID09PSBhbGlnbm1lbnQgfHwgKGF1dG9BbGlnbm1lbnQgPyBnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudChwbGFjZW1lbnQpICE9PSBwbGFjZW1lbnQgOiBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn1cbi8qKlxuICogT3B0aW1pemVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IGJ5IGNob29zaW5nIHRoZSBwbGFjZW1lbnRcbiAqIHRoYXQgaGFzIHRoZSBtb3N0IHNwYWNlIGF2YWlsYWJsZSBhdXRvbWF0aWNhbGx5LCB3aXRob3V0IG5lZWRpbmcgdG8gc3BlY2lmeSBhXG4gKiBwcmVmZXJyZWQgcGxhY2VtZW50LiBBbHRlcm5hdGl2ZSB0byBgZmxpcGAuXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvYXV0b1BsYWNlbWVudFxuICovXG5jb25zdCBhdXRvUGxhY2VtZW50ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdhdXRvUGxhY2VtZW50JyxcbiAgICBvcHRpb25zLFxuICAgIGFzeW5jIGZuKHN0YXRlKSB7XG4gICAgICB2YXIgX21pZGRsZXdhcmVEYXRhJGF1dG9QLCBfbWlkZGxld2FyZURhdGEkYXV0b1AyLCBfcGxhY2VtZW50c1RoYXRGaXRPbkU7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHJlY3RzLFxuICAgICAgICBtaWRkbGV3YXJlRGF0YSxcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBwbGF0Zm9ybSxcbiAgICAgICAgZWxlbWVudHNcbiAgICAgIH0gPSBzdGF0ZTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY3Jvc3NBeGlzID0gZmFsc2UsXG4gICAgICAgIGFsaWdubWVudCxcbiAgICAgICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLFxuICAgICAgICBhdXRvQWxpZ25tZW50ID0gdHJ1ZSxcbiAgICAgICAgLi4uZGV0ZWN0T3ZlcmZsb3dPcHRpb25zXG4gICAgICB9ID0gZXZhbHVhdGUob3B0aW9ucywgc3RhdGUpO1xuICAgICAgY29uc3QgcGxhY2VtZW50cyQxID0gYWxpZ25tZW50ICE9PSB1bmRlZmluZWQgfHwgYWxsb3dlZFBsYWNlbWVudHMgPT09IHBsYWNlbWVudHMgPyBnZXRQbGFjZW1lbnRMaXN0KGFsaWdubWVudCB8fCBudWxsLCBhdXRvQWxpZ25tZW50LCBhbGxvd2VkUGxhY2VtZW50cykgOiBhbGxvd2VkUGxhY2VtZW50cztcbiAgICAgIGNvbnN0IG92ZXJmbG93ID0gYXdhaXQgZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIGRldGVjdE92ZXJmbG93T3B0aW9ucyk7XG4gICAgICBjb25zdCBjdXJyZW50SW5kZXggPSAoKF9taWRkbGV3YXJlRGF0YSRhdXRvUCA9IG1pZGRsZXdhcmVEYXRhLmF1dG9QbGFjZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfbWlkZGxld2FyZURhdGEkYXV0b1AuaW5kZXgpIHx8IDA7XG4gICAgICBjb25zdCBjdXJyZW50UGxhY2VtZW50ID0gcGxhY2VtZW50cyQxW2N1cnJlbnRJbmRleF07XG4gICAgICBpZiAoY3VycmVudFBsYWNlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFsaWdubWVudFNpZGVzID0gZ2V0QWxpZ25tZW50U2lkZXMoY3VycmVudFBsYWNlbWVudCwgcmVjdHMsIGF3YWl0IChwbGF0Zm9ybS5pc1JUTCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0uaXNSVEwoZWxlbWVudHMuZmxvYXRpbmcpKSk7XG5cbiAgICAgIC8vIE1ha2UgYGNvbXB1dGVDb29yZHNgIHN0YXJ0IGZyb20gdGhlIHJpZ2h0IHBsYWNlLlxuICAgICAgaWYgKHBsYWNlbWVudCAhPT0gY3VycmVudFBsYWNlbWVudCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudHMkMVswXVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGN1cnJlbnRPdmVyZmxvd3MgPSBbb3ZlcmZsb3dbZ2V0U2lkZShjdXJyZW50UGxhY2VtZW50KV0sIG92ZXJmbG93W2FsaWdubWVudFNpZGVzWzBdXSwgb3ZlcmZsb3dbYWxpZ25tZW50U2lkZXNbMV1dXTtcbiAgICAgIGNvbnN0IGFsbE92ZXJmbG93cyA9IFsuLi4oKChfbWlkZGxld2FyZURhdGEkYXV0b1AyID0gbWlkZGxld2FyZURhdGEuYXV0b1BsYWNlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9taWRkbGV3YXJlRGF0YSRhdXRvUDIub3ZlcmZsb3dzKSB8fCBbXSksIHtcbiAgICAgICAgcGxhY2VtZW50OiBjdXJyZW50UGxhY2VtZW50LFxuICAgICAgICBvdmVyZmxvd3M6IGN1cnJlbnRPdmVyZmxvd3NcbiAgICAgIH1dO1xuICAgICAgY29uc3QgbmV4dFBsYWNlbWVudCA9IHBsYWNlbWVudHMkMVtjdXJyZW50SW5kZXggKyAxXTtcblxuICAgICAgLy8gVGhlcmUgYXJlIG1vcmUgcGxhY2VtZW50cyB0byBjaGVjay5cbiAgICAgIGlmIChuZXh0UGxhY2VtZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRJbmRleCArIDEsXG4gICAgICAgICAgICBvdmVyZmxvd3M6IGFsbE92ZXJmbG93c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICAgIHBsYWNlbWVudDogbmV4dFBsYWNlbWVudFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBsYWNlbWVudHNTb3J0ZWRCeU1vc3RTcGFjZSA9IGFsbE92ZXJmbG93cy5tYXAoZCA9PiB7XG4gICAgICAgIGNvbnN0IGFsaWdubWVudCA9IGdldEFsaWdubWVudChkLnBsYWNlbWVudCk7XG4gICAgICAgIHJldHVybiBbZC5wbGFjZW1lbnQsIGFsaWdubWVudCAmJiBjcm9zc0F4aXMgP1xuICAgICAgICAvLyBDaGVjayBhbG9uZyB0aGUgbWFpbkF4aXMgYW5kIG1haW4gY3Jvc3NBeGlzIHNpZGUuXG4gICAgICAgIGQub3ZlcmZsb3dzLnNsaWNlKDAsIDIpLnJlZHVjZSgoYWNjLCB2KSA9PiBhY2MgKyB2LCAwKSA6XG4gICAgICAgIC8vIENoZWNrIG9ubHkgdGhlIG1haW5BeGlzLlxuICAgICAgICBkLm92ZXJmbG93c1swXSwgZC5vdmVyZmxvd3NdO1xuICAgICAgfSkuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pO1xuICAgICAgY29uc3QgcGxhY2VtZW50c1RoYXRGaXRPbkVhY2hTaWRlID0gcGxhY2VtZW50c1NvcnRlZEJ5TW9zdFNwYWNlLmZpbHRlcihkID0+IGRbMl0uc2xpY2UoMCxcbiAgICAgIC8vIEFsaWduZWQgcGxhY2VtZW50cyBzaG91bGQgbm90IGNoZWNrIHRoZWlyIG9wcG9zaXRlIGNyb3NzQXhpc1xuICAgICAgLy8gc2lkZS5cbiAgICAgIGdldEFsaWdubWVudChkWzBdKSA/IDIgOiAzKS5ldmVyeSh2ID0+IHYgPD0gMCkpO1xuICAgICAgY29uc3QgcmVzZXRQbGFjZW1lbnQgPSAoKF9wbGFjZW1lbnRzVGhhdEZpdE9uRSA9IHBsYWNlbWVudHNUaGF0Rml0T25FYWNoU2lkZVswXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wbGFjZW1lbnRzVGhhdEZpdE9uRVswXSkgfHwgcGxhY2VtZW50c1NvcnRlZEJ5TW9zdFNwYWNlWzBdWzBdO1xuICAgICAgaWYgKHJlc2V0UGxhY2VtZW50ICE9PSBwbGFjZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBpbmRleDogY3VycmVudEluZGV4ICsgMSxcbiAgICAgICAgICAgIG92ZXJmbG93czogYWxsT3ZlcmZsb3dzXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNldDoge1xuICAgICAgICAgICAgcGxhY2VtZW50OiByZXNldFBsYWNlbWVudFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIE9wdGltaXplcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgZmxvYXRpbmcgZWxlbWVudCBieSBmbGlwcGluZyB0aGUgYHBsYWNlbWVudGBcbiAqIGluIG9yZGVyIHRvIGtlZXAgaXQgaW4gdmlldyB3aGVuIHRoZSBwcmVmZXJyZWQgcGxhY2VtZW50KHMpIHdpbGwgb3ZlcmZsb3cgdGhlXG4gKiBjbGlwcGluZyBib3VuZGFyeS4gQWx0ZXJuYXRpdmUgdG8gYGF1dG9QbGFjZW1lbnRgLlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL2ZsaXBcbiAqL1xuY29uc3QgZmxpcCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnZmxpcCcsXG4gICAgb3B0aW9ucyxcbiAgICBhc3luYyBmbihzdGF0ZSkge1xuICAgICAgdmFyIF9taWRkbGV3YXJlRGF0YSRhcnJvdywgX21pZGRsZXdhcmVEYXRhJGZsaXA7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgbWlkZGxld2FyZURhdGEsXG4gICAgICAgIHJlY3RzLFxuICAgICAgICBpbml0aWFsUGxhY2VtZW50LFxuICAgICAgICBwbGF0Zm9ybSxcbiAgICAgICAgZWxlbWVudHNcbiAgICAgIH0gPSBzdGF0ZTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbWFpbkF4aXM6IGNoZWNrTWFpbkF4aXMgPSB0cnVlLFxuICAgICAgICBjcm9zc0F4aXM6IGNoZWNrQ3Jvc3NBeGlzID0gdHJ1ZSxcbiAgICAgICAgZmFsbGJhY2tQbGFjZW1lbnRzOiBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICAgIGZhbGxiYWNrU3RyYXRlZ3kgPSAnYmVzdEZpdCcsXG4gICAgICAgIGZhbGxiYWNrQXhpc1NpZGVEaXJlY3Rpb24gPSAnbm9uZScsXG4gICAgICAgIGZsaXBBbGlnbm1lbnQgPSB0cnVlLFxuICAgICAgICAuLi5kZXRlY3RPdmVyZmxvd09wdGlvbnNcbiAgICAgIH0gPSBldmFsdWF0ZShvcHRpb25zLCBzdGF0ZSk7XG5cbiAgICAgIC8vIElmIGEgcmVzZXQgYnkgdGhlIGFycm93IHdhcyBjYXVzZWQgZHVlIHRvIGFuIGFsaWdubWVudCBvZmZzZXQgYmVpbmdcbiAgICAgIC8vIGFkZGVkLCB3ZSBzaG91bGQgc2tpcCBhbnkgbG9naWMgbm93IHNpbmNlIGBmbGlwKClgIGhhcyBhbHJlYWR5IGRvbmUgaXRzXG4gICAgICAvLyB3b3JrLlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zsb2F0aW5nLXVpL2Zsb2F0aW5nLXVpL2lzc3Vlcy8yNTQ5I2lzc3VlY29tbWVudC0xNzE5NjAxNjQzXG4gICAgICBpZiAoKF9taWRkbGV3YXJlRGF0YSRhcnJvdyA9IG1pZGRsZXdhcmVEYXRhLmFycm93KSAhPSBudWxsICYmIF9taWRkbGV3YXJlRGF0YSRhcnJvdy5hbGlnbm1lbnRPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgY29uc3Qgc2lkZSA9IGdldFNpZGUocGxhY2VtZW50KTtcbiAgICAgIGNvbnN0IGlzQmFzZVBsYWNlbWVudCA9IGdldFNpZGUoaW5pdGlhbFBsYWNlbWVudCkgPT09IGluaXRpYWxQbGFjZW1lbnQ7XG4gICAgICBjb25zdCBydGwgPSBhd2FpdCAocGxhdGZvcm0uaXNSVEwgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtLmlzUlRMKGVsZW1lbnRzLmZsb2F0aW5nKSk7XG4gICAgICBjb25zdCBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcEFsaWdubWVudCA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChpbml0aWFsUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZFBsYWNlbWVudHMoaW5pdGlhbFBsYWNlbWVudCkpO1xuICAgICAgaWYgKCFzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgJiYgZmFsbGJhY2tBeGlzU2lkZURpcmVjdGlvbiAhPT0gJ25vbmUnKSB7XG4gICAgICAgIGZhbGxiYWNrUGxhY2VtZW50cy5wdXNoKC4uLmdldE9wcG9zaXRlQXhpc1BsYWNlbWVudHMoaW5pdGlhbFBsYWNlbWVudCwgZmxpcEFsaWdubWVudCwgZmFsbGJhY2tBeGlzU2lkZURpcmVjdGlvbiwgcnRsKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBwbGFjZW1lbnRzID0gW2luaXRpYWxQbGFjZW1lbnQsIC4uLmZhbGxiYWNrUGxhY2VtZW50c107XG4gICAgICBjb25zdCBvdmVyZmxvdyA9IGF3YWl0IGRldGVjdE92ZXJmbG93KHN0YXRlLCBkZXRlY3RPdmVyZmxvd09wdGlvbnMpO1xuICAgICAgY29uc3Qgb3ZlcmZsb3dzID0gW107XG4gICAgICBsZXQgb3ZlcmZsb3dzRGF0YSA9ICgoX21pZGRsZXdhcmVEYXRhJGZsaXAgPSBtaWRkbGV3YXJlRGF0YS5mbGlwKSA9PSBudWxsID8gdm9pZCAwIDogX21pZGRsZXdhcmVEYXRhJGZsaXAub3ZlcmZsb3dzKSB8fCBbXTtcbiAgICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICAgIG92ZXJmbG93cy5wdXNoKG92ZXJmbG93W3NpZGVdKTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGVja0Nyb3NzQXhpcykge1xuICAgICAgICBjb25zdCBzaWRlcyA9IGdldEFsaWdubWVudFNpZGVzKHBsYWNlbWVudCwgcmVjdHMsIHJ0bCk7XG4gICAgICAgIG92ZXJmbG93cy5wdXNoKG92ZXJmbG93W3NpZGVzWzBdXSwgb3ZlcmZsb3dbc2lkZXNbMV1dKTtcbiAgICAgIH1cbiAgICAgIG92ZXJmbG93c0RhdGEgPSBbLi4ub3ZlcmZsb3dzRGF0YSwge1xuICAgICAgICBwbGFjZW1lbnQsXG4gICAgICAgIG92ZXJmbG93c1xuICAgICAgfV07XG5cbiAgICAgIC8vIE9uZSBvciBtb3JlIHNpZGVzIGlzIG92ZXJmbG93aW5nLlxuICAgICAgaWYgKCFvdmVyZmxvd3MuZXZlcnkoc2lkZSA9PiBzaWRlIDw9IDApKSB7XG4gICAgICAgIHZhciBfbWlkZGxld2FyZURhdGEkZmxpcDIsIF9vdmVyZmxvd3NEYXRhJGZpbHRlcjtcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gKCgoX21pZGRsZXdhcmVEYXRhJGZsaXAyID0gbWlkZGxld2FyZURhdGEuZmxpcCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9taWRkbGV3YXJlRGF0YSRmbGlwMi5pbmRleCkgfHwgMCkgKyAxO1xuICAgICAgICBjb25zdCBuZXh0UGxhY2VtZW50ID0gcGxhY2VtZW50c1tuZXh0SW5kZXhdO1xuICAgICAgICBpZiAobmV4dFBsYWNlbWVudCkge1xuICAgICAgICAgIC8vIFRyeSBuZXh0IHBsYWNlbWVudCBhbmQgcmUtcnVuIHRoZSBsaWZlY3ljbGUuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgICAgICAgb3ZlcmZsb3dzOiBvdmVyZmxvd3NEYXRhXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICAgICAgcGxhY2VtZW50OiBuZXh0UGxhY2VtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcnN0LCBmaW5kIHRoZSBjYW5kaWRhdGVzIHRoYXQgZml0IG9uIHRoZSBtYWluQXhpcyBzaWRlIG9mIG92ZXJmbG93LFxuICAgICAgICAvLyB0aGVuIGZpbmQgdGhlIHBsYWNlbWVudCB0aGF0IGZpdHMgdGhlIGJlc3Qgb24gdGhlIG1haW4gY3Jvc3NBeGlzIHNpZGUuXG4gICAgICAgIGxldCByZXNldFBsYWNlbWVudCA9IChfb3ZlcmZsb3dzRGF0YSRmaWx0ZXIgPSBvdmVyZmxvd3NEYXRhLmZpbHRlcihkID0+IGQub3ZlcmZsb3dzWzBdIDw9IDApLnNvcnQoKGEsIGIpID0+IGEub3ZlcmZsb3dzWzFdIC0gYi5vdmVyZmxvd3NbMV0pWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX292ZXJmbG93c0RhdGEkZmlsdGVyLnBsYWNlbWVudDtcblxuICAgICAgICAvLyBPdGhlcndpc2UgZmFsbGJhY2suXG4gICAgICAgIGlmICghcmVzZXRQbGFjZW1lbnQpIHtcbiAgICAgICAgICBzd2l0Y2ggKGZhbGxiYWNrU3RyYXRlZ3kpIHtcbiAgICAgICAgICAgIGNhc2UgJ2Jlc3RGaXQnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIF9vdmVyZmxvd3NEYXRhJG1hcCRzbztcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZW1lbnQgPSAoX292ZXJmbG93c0RhdGEkbWFwJHNvID0gb3ZlcmZsb3dzRGF0YS5tYXAoZCA9PiBbZC5wbGFjZW1lbnQsIGQub3ZlcmZsb3dzLmZpbHRlcihvdmVyZmxvdyA9PiBvdmVyZmxvdyA+IDApLnJlZHVjZSgoYWNjLCBvdmVyZmxvdykgPT4gYWNjICsgb3ZlcmZsb3csIDApXSkuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX292ZXJmbG93c0RhdGEkbWFwJHNvWzBdO1xuICAgICAgICAgICAgICAgIGlmIChwbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgIHJlc2V0UGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnaW5pdGlhbFBsYWNlbWVudCc6XG4gICAgICAgICAgICAgIHJlc2V0UGxhY2VtZW50ID0gaW5pdGlhbFBsYWNlbWVudDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwbGFjZW1lbnQgIT09IHJlc2V0UGxhY2VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgICAgIHBsYWNlbWVudDogcmVzZXRQbGFjZW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9O1xufTtcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3QpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aFxuICB9O1xufVxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBzaWRlcy5zb21lKHNpZGUgPT4gb3ZlcmZsb3dbc2lkZV0gPj0gMCk7XG59XG4vKipcbiAqIFByb3ZpZGVzIGRhdGEgdG8gaGlkZSB0aGUgZmxvYXRpbmcgZWxlbWVudCBpbiBhcHBsaWNhYmxlIHNpdHVhdGlvbnMsIHN1Y2ggYXNcbiAqIHdoZW4gaXQgaXMgbm90IGluIHRoZSBzYW1lIGNsaXBwaW5nIGNvbnRleHQgYXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL2hpZGVcbiAqL1xuY29uc3QgaGlkZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnaGlkZScsXG4gICAgb3B0aW9ucyxcbiAgICBhc3luYyBmbihzdGF0ZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICByZWN0c1xuICAgICAgfSA9IHN0YXRlO1xuICAgICAgY29uc3Qge1xuICAgICAgICBzdHJhdGVneSA9ICdyZWZlcmVuY2VIaWRkZW4nLFxuICAgICAgICAuLi5kZXRlY3RPdmVyZmxvd09wdGlvbnNcbiAgICAgIH0gPSBldmFsdWF0ZShvcHRpb25zLCBzdGF0ZSk7XG4gICAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgICAgIGNhc2UgJ3JlZmVyZW5jZUhpZGRlbic6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmZsb3cgPSBhd2FpdCBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgICAgICAgICAuLi5kZXRlY3RPdmVyZmxvd09wdGlvbnMsXG4gICAgICAgICAgICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3RzLnJlZmVyZW5jZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlSGlkZGVuT2Zmc2V0czogb2Zmc2V0cyxcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VIaWRkZW46IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvZmZzZXRzKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnZXNjYXBlZCc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmZsb3cgPSBhd2FpdCBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgICAgICAgICAuLi5kZXRlY3RPdmVyZmxvd09wdGlvbnMsXG4gICAgICAgICAgICAgIGFsdEJvdW5kYXJ5OiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdHMuZmxvYXRpbmcpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGVzY2FwZWRPZmZzZXRzOiBvZmZzZXRzLFxuICAgICAgICAgICAgICAgIGVzY2FwZWQ6IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvZmZzZXRzKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGdldEJvdW5kaW5nUmVjdChyZWN0cykge1xuICBjb25zdCBtaW5YID0gbWluKC4uLnJlY3RzLm1hcChyZWN0ID0+IHJlY3QubGVmdCkpO1xuICBjb25zdCBtaW5ZID0gbWluKC4uLnJlY3RzLm1hcChyZWN0ID0+IHJlY3QudG9wKSk7XG4gIGNvbnN0IG1heFggPSBtYXgoLi4ucmVjdHMubWFwKHJlY3QgPT4gcmVjdC5yaWdodCkpO1xuICBjb25zdCBtYXhZID0gbWF4KC4uLnJlY3RzLm1hcChyZWN0ID0+IHJlY3QuYm90dG9tKSk7XG4gIHJldHVybiB7XG4gICAgeDogbWluWCxcbiAgICB5OiBtaW5ZLFxuICAgIHdpZHRoOiBtYXhYIC0gbWluWCxcbiAgICBoZWlnaHQ6IG1heFkgLSBtaW5ZXG4gIH07XG59XG5mdW5jdGlvbiBnZXRSZWN0c0J5TGluZShyZWN0cykge1xuICBjb25zdCBzb3J0ZWRSZWN0cyA9IHJlY3RzLnNsaWNlKCkuc29ydCgoYSwgYikgPT4gYS55IC0gYi55KTtcbiAgY29uc3QgZ3JvdXBzID0gW107XG4gIGxldCBwcmV2UmVjdCA9IG51bGw7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc29ydGVkUmVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCByZWN0ID0gc29ydGVkUmVjdHNbaV07XG4gICAgaWYgKCFwcmV2UmVjdCB8fCByZWN0LnkgLSBwcmV2UmVjdC55ID4gcHJldlJlY3QuaGVpZ2h0IC8gMikge1xuICAgICAgZ3JvdXBzLnB1c2goW3JlY3RdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JvdXBzW2dyb3Vwcy5sZW5ndGggLSAxXS5wdXNoKHJlY3QpO1xuICAgIH1cbiAgICBwcmV2UmVjdCA9IHJlY3Q7XG4gIH1cbiAgcmV0dXJuIGdyb3Vwcy5tYXAocmVjdCA9PiByZWN0VG9DbGllbnRSZWN0KGdldEJvdW5kaW5nUmVjdChyZWN0KSkpO1xufVxuLyoqXG4gKiBQcm92aWRlcyBpbXByb3ZlZCBwb3NpdGlvbmluZyBmb3IgaW5saW5lIHJlZmVyZW5jZSBlbGVtZW50cyB0aGF0IGNhbiBzcGFuXG4gKiBvdmVyIG11bHRpcGxlIGxpbmVzLCBzdWNoIGFzIGh5cGVybGlua3Mgb3IgcmFuZ2Ugc2VsZWN0aW9ucy5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9pbmxpbmVcbiAqL1xuY29uc3QgaW5saW5lID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdpbmxpbmUnLFxuICAgIG9wdGlvbnMsXG4gICAgYXN5bmMgZm4oc3RhdGUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBlbGVtZW50cyxcbiAgICAgICAgcmVjdHMsXG4gICAgICAgIHBsYXRmb3JtLFxuICAgICAgICBzdHJhdGVneVxuICAgICAgfSA9IHN0YXRlO1xuICAgICAgLy8gQSBNb3VzZUV2ZW50J3MgY2xpZW50e1gsWX0gY29vcmRzIGNhbiBiZSB1cCB0byAyIHBpeGVscyBvZmYgYVxuICAgICAgLy8gQ2xpZW50UmVjdCdzIGJvdW5kcywgZGVzcGl0ZSB0aGUgZXZlbnQgbGlzdGVuZXIgYmVpbmcgdHJpZ2dlcmVkLiBBXG4gICAgICAvLyBwYWRkaW5nIG9mIDIgc2VlbXMgdG8gaGFuZGxlIHRoaXMgaXNzdWUuXG4gICAgICBjb25zdCB7XG4gICAgICAgIHBhZGRpbmcgPSAyLFxuICAgICAgICB4LFxuICAgICAgICB5XG4gICAgICB9ID0gZXZhbHVhdGUob3B0aW9ucywgc3RhdGUpO1xuICAgICAgY29uc3QgbmF0aXZlQ2xpZW50UmVjdHMgPSBBcnJheS5mcm9tKChhd2FpdCAocGxhdGZvcm0uZ2V0Q2xpZW50UmVjdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtLmdldENsaWVudFJlY3RzKGVsZW1lbnRzLnJlZmVyZW5jZSkpKSB8fCBbXSk7XG4gICAgICBjb25zdCBjbGllbnRSZWN0cyA9IGdldFJlY3RzQnlMaW5lKG5hdGl2ZUNsaWVudFJlY3RzKTtcbiAgICAgIGNvbnN0IGZhbGxiYWNrID0gcmVjdFRvQ2xpZW50UmVjdChnZXRCb3VuZGluZ1JlY3QobmF0aXZlQ2xpZW50UmVjdHMpKTtcbiAgICAgIGNvbnN0IHBhZGRpbmdPYmplY3QgPSBnZXRQYWRkaW5nT2JqZWN0KHBhZGRpbmcpO1xuICAgICAgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkge1xuICAgICAgICAvLyBUaGVyZSBhcmUgdHdvIHJlY3RzIGFuZCB0aGV5IGFyZSBkaXNqb2luZWQuXG4gICAgICAgIGlmIChjbGllbnRSZWN0cy5sZW5ndGggPT09IDIgJiYgY2xpZW50UmVjdHNbMF0ubGVmdCA+IGNsaWVudFJlY3RzWzFdLnJpZ2h0ICYmIHggIT0gbnVsbCAmJiB5ICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBGaW5kIHRoZSBmaXJzdCByZWN0IGluIHdoaWNoIHRoZSBwb2ludCBpcyBmdWxseSBpbnNpZGUuXG4gICAgICAgICAgcmV0dXJuIGNsaWVudFJlY3RzLmZpbmQocmVjdCA9PiB4ID4gcmVjdC5sZWZ0IC0gcGFkZGluZ09iamVjdC5sZWZ0ICYmIHggPCByZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodCAmJiB5ID4gcmVjdC50b3AgLSBwYWRkaW5nT2JqZWN0LnRvcCAmJiB5IDwgcmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSkgfHwgZmFsbGJhY2s7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGVyZSBhcmUgMiBvciBtb3JlIGNvbm5lY3RlZCByZWN0cy5cbiAgICAgICAgaWYgKGNsaWVudFJlY3RzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgaWYgKGdldFNpZGVBeGlzKHBsYWNlbWVudCkgPT09ICd5Jykge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RSZWN0ID0gY2xpZW50UmVjdHNbMF07XG4gICAgICAgICAgICBjb25zdCBsYXN0UmVjdCA9IGNsaWVudFJlY3RzW2NsaWVudFJlY3RzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgY29uc3QgaXNUb3AgPSBnZXRTaWRlKHBsYWNlbWVudCkgPT09ICd0b3AnO1xuICAgICAgICAgICAgY29uc3QgdG9wID0gZmlyc3RSZWN0LnRvcDtcbiAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9IGxhc3RSZWN0LmJvdHRvbTtcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBpc1RvcCA/IGZpcnN0UmVjdC5sZWZ0IDogbGFzdFJlY3QubGVmdDtcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gaXNUb3AgPyBmaXJzdFJlY3QucmlnaHQgOiBsYXN0UmVjdC5yaWdodDtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgICBib3R0b20sXG4gICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgIHJpZ2h0LFxuICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgICB4OiBsZWZ0LFxuICAgICAgICAgICAgICB5OiB0b3BcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGlzTGVmdFNpZGUgPSBnZXRTaWRlKHBsYWNlbWVudCkgPT09ICdsZWZ0JztcbiAgICAgICAgICBjb25zdCBtYXhSaWdodCA9IG1heCguLi5jbGllbnRSZWN0cy5tYXAocmVjdCA9PiByZWN0LnJpZ2h0KSk7XG4gICAgICAgICAgY29uc3QgbWluTGVmdCA9IG1pbiguLi5jbGllbnRSZWN0cy5tYXAocmVjdCA9PiByZWN0LmxlZnQpKTtcbiAgICAgICAgICBjb25zdCBtZWFzdXJlUmVjdHMgPSBjbGllbnRSZWN0cy5maWx0ZXIocmVjdCA9PiBpc0xlZnRTaWRlID8gcmVjdC5sZWZ0ID09PSBtaW5MZWZ0IDogcmVjdC5yaWdodCA9PT0gbWF4UmlnaHQpO1xuICAgICAgICAgIGNvbnN0IHRvcCA9IG1lYXN1cmVSZWN0c1swXS50b3A7XG4gICAgICAgICAgY29uc3QgYm90dG9tID0gbWVhc3VyZVJlY3RzW21lYXN1cmVSZWN0cy5sZW5ndGggLSAxXS5ib3R0b207XG4gICAgICAgICAgY29uc3QgbGVmdCA9IG1pbkxlZnQ7XG4gICAgICAgICAgY29uc3QgcmlnaHQgPSBtYXhSaWdodDtcbiAgICAgICAgICBjb25zdCB3aWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgICAgICAgICBjb25zdCBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgIGJvdHRvbSxcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICByaWdodCxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgeDogbGVmdCxcbiAgICAgICAgICAgIHk6IHRvcFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzZXRSZWN0cyA9IGF3YWl0IHBsYXRmb3JtLmdldEVsZW1lbnRSZWN0cyh7XG4gICAgICAgIHJlZmVyZW5jZToge1xuICAgICAgICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICAgICAgICB9LFxuICAgICAgICBmbG9hdGluZzogZWxlbWVudHMuZmxvYXRpbmcsXG4gICAgICAgIHN0cmF0ZWd5XG4gICAgICB9KTtcbiAgICAgIGlmIChyZWN0cy5yZWZlcmVuY2UueCAhPT0gcmVzZXRSZWN0cy5yZWZlcmVuY2UueCB8fCByZWN0cy5yZWZlcmVuY2UueSAhPT0gcmVzZXRSZWN0cy5yZWZlcmVuY2UueSB8fCByZWN0cy5yZWZlcmVuY2Uud2lkdGggIT09IHJlc2V0UmVjdHMucmVmZXJlbmNlLndpZHRoIHx8IHJlY3RzLnJlZmVyZW5jZS5oZWlnaHQgIT09IHJlc2V0UmVjdHMucmVmZXJlbmNlLmhlaWdodCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgICByZWN0czogcmVzZXRSZWN0c1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH07XG59O1xuXG4vLyBGb3IgdHlwZSBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSwgdGhlIGBPZmZzZXRPcHRpb25zYCB0eXBlIHdhcyBhbHNvXG4vLyBEZXJpdmFibGUuXG5cbmFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZVRvQ29vcmRzKHN0YXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBwbGFjZW1lbnQsXG4gICAgcGxhdGZvcm0sXG4gICAgZWxlbWVudHNcbiAgfSA9IHN0YXRlO1xuICBjb25zdCBydGwgPSBhd2FpdCAocGxhdGZvcm0uaXNSVEwgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtLmlzUlRMKGVsZW1lbnRzLmZsb2F0aW5nKSk7XG4gIGNvbnN0IHNpZGUgPSBnZXRTaWRlKHBsYWNlbWVudCk7XG4gIGNvbnN0IGFsaWdubWVudCA9IGdldEFsaWdubWVudChwbGFjZW1lbnQpO1xuICBjb25zdCBpc1ZlcnRpY2FsID0gZ2V0U2lkZUF4aXMocGxhY2VtZW50KSA9PT0gJ3knO1xuICBjb25zdCBtYWluQXhpc011bHRpID0gWydsZWZ0JywgJ3RvcCddLmluY2x1ZGVzKHNpZGUpID8gLTEgOiAxO1xuICBjb25zdCBjcm9zc0F4aXNNdWx0aSA9IHJ0bCAmJiBpc1ZlcnRpY2FsID8gLTEgOiAxO1xuICBjb25zdCByYXdWYWx1ZSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKTtcbiAgbGV0IHtcbiAgICBtYWluQXhpcyxcbiAgICBjcm9zc0F4aXMsXG4gICAgYWxpZ25tZW50QXhpc1xuICB9ID0gdHlwZW9mIHJhd1ZhbHVlID09PSAnbnVtYmVyJyA/IHtcbiAgICBtYWluQXhpczogcmF3VmFsdWUsXG4gICAgY3Jvc3NBeGlzOiAwLFxuICAgIGFsaWdubWVudEF4aXM6IG51bGxcbiAgfSA6IHtcbiAgICBtYWluQXhpczogMCxcbiAgICBjcm9zc0F4aXM6IDAsXG4gICAgYWxpZ25tZW50QXhpczogbnVsbCxcbiAgICAuLi5yYXdWYWx1ZVxuICB9O1xuICBpZiAoYWxpZ25tZW50ICYmIHR5cGVvZiBhbGlnbm1lbnRBeGlzID09PSAnbnVtYmVyJykge1xuICAgIGNyb3NzQXhpcyA9IGFsaWdubWVudCA9PT0gJ2VuZCcgPyBhbGlnbm1lbnRBeGlzICogLTEgOiBhbGlnbm1lbnRBeGlzO1xuICB9XG4gIHJldHVybiBpc1ZlcnRpY2FsID8ge1xuICAgIHg6IGNyb3NzQXhpcyAqIGNyb3NzQXhpc011bHRpLFxuICAgIHk6IG1haW5BeGlzICogbWFpbkF4aXNNdWx0aVxuICB9IDoge1xuICAgIHg6IG1haW5BeGlzICogbWFpbkF4aXNNdWx0aSxcbiAgICB5OiBjcm9zc0F4aXMgKiBjcm9zc0F4aXNNdWx0aVxuICB9O1xufVxuXG4vKipcbiAqIE1vZGlmaWVzIHRoZSBwbGFjZW1lbnQgYnkgdHJhbnNsYXRpbmcgdGhlIGZsb2F0aW5nIGVsZW1lbnQgYWxvbmcgdGhlXG4gKiBzcGVjaWZpZWQgYXhlcy5cbiAqIEEgbnVtYmVyIChzaG9ydGhhbmQgZm9yIGBtYWluQXhpc2Agb3IgZGlzdGFuY2UpLCBvciBhbiBheGVzIGNvbmZpZ3VyYXRpb25cbiAqIG9iamVjdCBtYXkgYmUgcGFzc2VkLlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL29mZnNldFxuICovXG5jb25zdCBvZmZzZXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IDA7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICBvcHRpb25zLFxuICAgIGFzeW5jIGZuKHN0YXRlKSB7XG4gICAgICB2YXIgX21pZGRsZXdhcmVEYXRhJG9mZnNlLCBfbWlkZGxld2FyZURhdGEkYXJyb3c7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgbWlkZGxld2FyZURhdGFcbiAgICAgIH0gPSBzdGF0ZTtcbiAgICAgIGNvbnN0IGRpZmZDb29yZHMgPSBhd2FpdCBjb252ZXJ0VmFsdWVUb0Nvb3JkcyhzdGF0ZSwgb3B0aW9ucyk7XG5cbiAgICAgIC8vIElmIHRoZSBwbGFjZW1lbnQgaXMgdGhlIHNhbWUgYW5kIHRoZSBhcnJvdyBjYXVzZWQgYW4gYWxpZ25tZW50IG9mZnNldFxuICAgICAgLy8gdGhlbiB3ZSBkb24ndCBuZWVkIHRvIGNoYW5nZSB0aGUgcG9zaXRpb25pbmcgY29vcmRpbmF0ZXMuXG4gICAgICBpZiAocGxhY2VtZW50ID09PSAoKF9taWRkbGV3YXJlRGF0YSRvZmZzZSA9IG1pZGRsZXdhcmVEYXRhLm9mZnNldCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9taWRkbGV3YXJlRGF0YSRvZmZzZS5wbGFjZW1lbnQpICYmIChfbWlkZGxld2FyZURhdGEkYXJyb3cgPSBtaWRkbGV3YXJlRGF0YS5hcnJvdykgIT0gbnVsbCAmJiBfbWlkZGxld2FyZURhdGEkYXJyb3cuYWxpZ25tZW50T2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IHggKyBkaWZmQ29vcmRzLngsXG4gICAgICAgIHk6IHkgKyBkaWZmQ29vcmRzLnksXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAuLi5kaWZmQ29vcmRzLFxuICAgICAgICAgIHBsYWNlbWVudFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogT3B0aW1pemVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IGJ5IHNoaWZ0aW5nIGl0IGluIG9yZGVyIHRvXG4gKiBrZWVwIGl0IGluIHZpZXcgd2hlbiBpdCB3aWxsIG92ZXJmbG93IHRoZSBjbGlwcGluZyBib3VuZGFyeS5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9zaGlmdFxuICovXG5jb25zdCBzaGlmdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnc2hpZnQnLFxuICAgIG9wdGlvbnMsXG4gICAgYXN5bmMgZm4oc3RhdGUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgcGxhY2VtZW50XG4gICAgICB9ID0gc3RhdGU7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1haW5BeGlzOiBjaGVja01haW5BeGlzID0gdHJ1ZSxcbiAgICAgICAgY3Jvc3NBeGlzOiBjaGVja0Nyb3NzQXhpcyA9IGZhbHNlLFxuICAgICAgICBsaW1pdGVyID0ge1xuICAgICAgICAgIGZuOiBfcmVmID0+IHtcbiAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgIHlcbiAgICAgICAgICAgIH0gPSBfcmVmO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgeVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9uc1xuICAgICAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKTtcbiAgICAgIGNvbnN0IGNvb3JkcyA9IHtcbiAgICAgICAgeCxcbiAgICAgICAgeVxuICAgICAgfTtcbiAgICAgIGNvbnN0IG92ZXJmbG93ID0gYXdhaXQgZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIGRldGVjdE92ZXJmbG93T3B0aW9ucyk7XG4gICAgICBjb25zdCBjcm9zc0F4aXMgPSBnZXRTaWRlQXhpcyhnZXRTaWRlKHBsYWNlbWVudCkpO1xuICAgICAgY29uc3QgbWFpbkF4aXMgPSBnZXRPcHBvc2l0ZUF4aXMoY3Jvc3NBeGlzKTtcbiAgICAgIGxldCBtYWluQXhpc0Nvb3JkID0gY29vcmRzW21haW5BeGlzXTtcbiAgICAgIGxldCBjcm9zc0F4aXNDb29yZCA9IGNvb3Jkc1tjcm9zc0F4aXNdO1xuICAgICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgICAgY29uc3QgbWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyAndG9wJyA6ICdsZWZ0JztcbiAgICAgICAgY29uc3QgbWF4U2lkZSA9IG1haW5BeGlzID09PSAneScgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gICAgICAgIGNvbnN0IG1pbiA9IG1haW5BeGlzQ29vcmQgKyBvdmVyZmxvd1ttaW5TaWRlXTtcbiAgICAgICAgY29uc3QgbWF4ID0gbWFpbkF4aXNDb29yZCAtIG92ZXJmbG93W21heFNpZGVdO1xuICAgICAgICBtYWluQXhpc0Nvb3JkID0gY2xhbXAobWluLCBtYWluQXhpc0Nvb3JkLCBtYXgpO1xuICAgICAgfVxuICAgICAgaWYgKGNoZWNrQ3Jvc3NBeGlzKSB7XG4gICAgICAgIGNvbnN0IG1pblNpZGUgPSBjcm9zc0F4aXMgPT09ICd5JyA/ICd0b3AnIDogJ2xlZnQnO1xuICAgICAgICBjb25zdCBtYXhTaWRlID0gY3Jvc3NBeGlzID09PSAneScgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gICAgICAgIGNvbnN0IG1pbiA9IGNyb3NzQXhpc0Nvb3JkICsgb3ZlcmZsb3dbbWluU2lkZV07XG4gICAgICAgIGNvbnN0IG1heCA9IGNyb3NzQXhpc0Nvb3JkIC0gb3ZlcmZsb3dbbWF4U2lkZV07XG4gICAgICAgIGNyb3NzQXhpc0Nvb3JkID0gY2xhbXAobWluLCBjcm9zc0F4aXNDb29yZCwgbWF4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxpbWl0ZWRDb29yZHMgPSBsaW1pdGVyLmZuKHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIFttYWluQXhpc106IG1haW5BeGlzQ29vcmQsXG4gICAgICAgIFtjcm9zc0F4aXNdOiBjcm9zc0F4aXNDb29yZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5saW1pdGVkQ29vcmRzLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgeDogbGltaXRlZENvb3Jkcy54IC0geCxcbiAgICAgICAgICB5OiBsaW1pdGVkQ29vcmRzLnkgLSB5XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQnVpbHQtaW4gYGxpbWl0ZXJgIHRoYXQgd2lsbCBzdG9wIGBzaGlmdCgpYCBhdCBhIGNlcnRhaW4gcG9pbnQuXG4gKi9cbmNvbnN0IGxpbWl0U2hpZnQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIHJldHVybiB7XG4gICAgb3B0aW9ucyxcbiAgICBmbihzdGF0ZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBwbGFjZW1lbnQsXG4gICAgICAgIHJlY3RzLFxuICAgICAgICBtaWRkbGV3YXJlRGF0YVxuICAgICAgfSA9IHN0YXRlO1xuICAgICAgY29uc3Qge1xuICAgICAgICBvZmZzZXQgPSAwLFxuICAgICAgICBtYWluQXhpczogY2hlY2tNYWluQXhpcyA9IHRydWUsXG4gICAgICAgIGNyb3NzQXhpczogY2hlY2tDcm9zc0F4aXMgPSB0cnVlXG4gICAgICB9ID0gZXZhbHVhdGUob3B0aW9ucywgc3RhdGUpO1xuICAgICAgY29uc3QgY29vcmRzID0ge1xuICAgICAgICB4LFxuICAgICAgICB5XG4gICAgICB9O1xuICAgICAgY29uc3QgY3Jvc3NBeGlzID0gZ2V0U2lkZUF4aXMocGxhY2VtZW50KTtcbiAgICAgIGNvbnN0IG1haW5BeGlzID0gZ2V0T3Bwb3NpdGVBeGlzKGNyb3NzQXhpcyk7XG4gICAgICBsZXQgbWFpbkF4aXNDb29yZCA9IGNvb3Jkc1ttYWluQXhpc107XG4gICAgICBsZXQgY3Jvc3NBeGlzQ29vcmQgPSBjb29yZHNbY3Jvc3NBeGlzXTtcbiAgICAgIGNvbnN0IHJhd09mZnNldCA9IGV2YWx1YXRlKG9mZnNldCwgc3RhdGUpO1xuICAgICAgY29uc3QgY29tcHV0ZWRPZmZzZXQgPSB0eXBlb2YgcmF3T2Zmc2V0ID09PSAnbnVtYmVyJyA/IHtcbiAgICAgICAgbWFpbkF4aXM6IHJhd09mZnNldCxcbiAgICAgICAgY3Jvc3NBeGlzOiAwXG4gICAgICB9IDoge1xuICAgICAgICBtYWluQXhpczogMCxcbiAgICAgICAgY3Jvc3NBeGlzOiAwLFxuICAgICAgICAuLi5yYXdPZmZzZXRcbiAgICAgIH07XG4gICAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgICBjb25zdCBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgICAgICBjb25zdCBsaW1pdE1pbiA9IHJlY3RzLnJlZmVyZW5jZVttYWluQXhpc10gLSByZWN0cy5mbG9hdGluZ1tsZW5dICsgY29tcHV0ZWRPZmZzZXQubWFpbkF4aXM7XG4gICAgICAgIGNvbnN0IGxpbWl0TWF4ID0gcmVjdHMucmVmZXJlbmNlW21haW5BeGlzXSArIHJlY3RzLnJlZmVyZW5jZVtsZW5dIC0gY29tcHV0ZWRPZmZzZXQubWFpbkF4aXM7XG4gICAgICAgIGlmIChtYWluQXhpc0Nvb3JkIDwgbGltaXRNaW4pIHtcbiAgICAgICAgICBtYWluQXhpc0Nvb3JkID0gbGltaXRNaW47XG4gICAgICAgIH0gZWxzZSBpZiAobWFpbkF4aXNDb29yZCA+IGxpbWl0TWF4KSB7XG4gICAgICAgICAgbWFpbkF4aXNDb29yZCA9IGxpbWl0TWF4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2hlY2tDcm9zc0F4aXMpIHtcbiAgICAgICAgdmFyIF9taWRkbGV3YXJlRGF0YSRvZmZzZSwgX21pZGRsZXdhcmVEYXRhJG9mZnNlMjtcbiAgICAgICAgY29uc3QgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICAgICAgY29uc3QgaXNPcmlnaW5TaWRlID0gWyd0b3AnLCAnbGVmdCddLmluY2x1ZGVzKGdldFNpZGUocGxhY2VtZW50KSk7XG4gICAgICAgIGNvbnN0IGxpbWl0TWluID0gcmVjdHMucmVmZXJlbmNlW2Nyb3NzQXhpc10gLSByZWN0cy5mbG9hdGluZ1tsZW5dICsgKGlzT3JpZ2luU2lkZSA/ICgoX21pZGRsZXdhcmVEYXRhJG9mZnNlID0gbWlkZGxld2FyZURhdGEub2Zmc2V0KSA9PSBudWxsID8gdm9pZCAwIDogX21pZGRsZXdhcmVEYXRhJG9mZnNlW2Nyb3NzQXhpc10pIHx8IDAgOiAwKSArIChpc09yaWdpblNpZGUgPyAwIDogY29tcHV0ZWRPZmZzZXQuY3Jvc3NBeGlzKTtcbiAgICAgICAgY29uc3QgbGltaXRNYXggPSByZWN0cy5yZWZlcmVuY2VbY3Jvc3NBeGlzXSArIHJlY3RzLnJlZmVyZW5jZVtsZW5dICsgKGlzT3JpZ2luU2lkZSA/IDAgOiAoKF9taWRkbGV3YXJlRGF0YSRvZmZzZTIgPSBtaWRkbGV3YXJlRGF0YS5vZmZzZXQpID09IG51bGwgPyB2b2lkIDAgOiBfbWlkZGxld2FyZURhdGEkb2Zmc2UyW2Nyb3NzQXhpc10pIHx8IDApIC0gKGlzT3JpZ2luU2lkZSA/IGNvbXB1dGVkT2Zmc2V0LmNyb3NzQXhpcyA6IDApO1xuICAgICAgICBpZiAoY3Jvc3NBeGlzQ29vcmQgPCBsaW1pdE1pbikge1xuICAgICAgICAgIGNyb3NzQXhpc0Nvb3JkID0gbGltaXRNaW47XG4gICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBeGlzQ29vcmQgPiBsaW1pdE1heCkge1xuICAgICAgICAgIGNyb3NzQXhpc0Nvb3JkID0gbGltaXRNYXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIFttYWluQXhpc106IG1haW5BeGlzQ29vcmQsXG4gICAgICAgIFtjcm9zc0F4aXNdOiBjcm9zc0F4aXNDb29yZFxuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIFByb3ZpZGVzIGRhdGEgdGhhdCBhbGxvd3MgeW91IHRvIGNoYW5nZSB0aGUgc2l6ZSBvZiB0aGUgZmxvYXRpbmcgZWxlbWVudCDigJRcbiAqIGZvciBpbnN0YW5jZSwgcHJldmVudCBpdCBmcm9tIG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyBib3VuZGFyeSBvciBtYXRjaCB0aGVcbiAqIHdpZHRoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9zaXplXG4gKi9cbmNvbnN0IHNpemUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3NpemUnLFxuICAgIG9wdGlvbnMsXG4gICAgYXN5bmMgZm4oc3RhdGUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICByZWN0cyxcbiAgICAgICAgcGxhdGZvcm0sXG4gICAgICAgIGVsZW1lbnRzXG4gICAgICB9ID0gc3RhdGU7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGFwcGx5ID0gKCkgPT4ge30sXG4gICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9uc1xuICAgICAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKTtcbiAgICAgIGNvbnN0IG92ZXJmbG93ID0gYXdhaXQgZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIGRldGVjdE92ZXJmbG93T3B0aW9ucyk7XG4gICAgICBjb25zdCBzaWRlID0gZ2V0U2lkZShwbGFjZW1lbnQpO1xuICAgICAgY29uc3QgYWxpZ25tZW50ID0gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCk7XG4gICAgICBjb25zdCBpc1lBeGlzID0gZ2V0U2lkZUF4aXMocGxhY2VtZW50KSA9PT0gJ3knO1xuICAgICAgY29uc3Qge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgICB9ID0gcmVjdHMuZmxvYXRpbmc7XG4gICAgICBsZXQgaGVpZ2h0U2lkZTtcbiAgICAgIGxldCB3aWR0aFNpZGU7XG4gICAgICBpZiAoc2lkZSA9PT0gJ3RvcCcgfHwgc2lkZSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgaGVpZ2h0U2lkZSA9IHNpZGU7XG4gICAgICAgIHdpZHRoU2lkZSA9IGFsaWdubWVudCA9PT0gKChhd2FpdCAocGxhdGZvcm0uaXNSVEwgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtLmlzUlRMKGVsZW1lbnRzLmZsb2F0aW5nKSkpID8gJ3N0YXJ0JyA6ICdlbmQnKSA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aWR0aFNpZGUgPSBzaWRlO1xuICAgICAgICBoZWlnaHRTaWRlID0gYWxpZ25tZW50ID09PSAnZW5kJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gICAgICB9XG4gICAgICBjb25zdCBvdmVyZmxvd0F2YWlsYWJsZUhlaWdodCA9IGhlaWdodCAtIG92ZXJmbG93W2hlaWdodFNpZGVdO1xuICAgICAgY29uc3Qgb3ZlcmZsb3dBdmFpbGFibGVXaWR0aCA9IHdpZHRoIC0gb3ZlcmZsb3dbd2lkdGhTaWRlXTtcbiAgICAgIGNvbnN0IG5vU2hpZnQgPSAhc3RhdGUubWlkZGxld2FyZURhdGEuc2hpZnQ7XG4gICAgICBsZXQgYXZhaWxhYmxlSGVpZ2h0ID0gb3ZlcmZsb3dBdmFpbGFibGVIZWlnaHQ7XG4gICAgICBsZXQgYXZhaWxhYmxlV2lkdGggPSBvdmVyZmxvd0F2YWlsYWJsZVdpZHRoO1xuICAgICAgaWYgKGlzWUF4aXMpIHtcbiAgICAgICAgY29uc3QgbWF4aW11bUNsaXBwaW5nV2lkdGggPSB3aWR0aCAtIG92ZXJmbG93LmxlZnQgLSBvdmVyZmxvdy5yaWdodDtcbiAgICAgICAgYXZhaWxhYmxlV2lkdGggPSBhbGlnbm1lbnQgfHwgbm9TaGlmdCA/IG1pbihvdmVyZmxvd0F2YWlsYWJsZVdpZHRoLCBtYXhpbXVtQ2xpcHBpbmdXaWR0aCkgOiBtYXhpbXVtQ2xpcHBpbmdXaWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1heGltdW1DbGlwcGluZ0hlaWdodCA9IGhlaWdodCAtIG92ZXJmbG93LnRvcCAtIG92ZXJmbG93LmJvdHRvbTtcbiAgICAgICAgYXZhaWxhYmxlSGVpZ2h0ID0gYWxpZ25tZW50IHx8IG5vU2hpZnQgPyBtaW4ob3ZlcmZsb3dBdmFpbGFibGVIZWlnaHQsIG1heGltdW1DbGlwcGluZ0hlaWdodCkgOiBtYXhpbXVtQ2xpcHBpbmdIZWlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAobm9TaGlmdCAmJiAhYWxpZ25tZW50KSB7XG4gICAgICAgIGNvbnN0IHhNaW4gPSBtYXgob3ZlcmZsb3cubGVmdCwgMCk7XG4gICAgICAgIGNvbnN0IHhNYXggPSBtYXgob3ZlcmZsb3cucmlnaHQsIDApO1xuICAgICAgICBjb25zdCB5TWluID0gbWF4KG92ZXJmbG93LnRvcCwgMCk7XG4gICAgICAgIGNvbnN0IHlNYXggPSBtYXgob3ZlcmZsb3cuYm90dG9tLCAwKTtcbiAgICAgICAgaWYgKGlzWUF4aXMpIHtcbiAgICAgICAgICBhdmFpbGFibGVXaWR0aCA9IHdpZHRoIC0gMiAqICh4TWluICE9PSAwIHx8IHhNYXggIT09IDAgPyB4TWluICsgeE1heCA6IG1heChvdmVyZmxvdy5sZWZ0LCBvdmVyZmxvdy5yaWdodCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF2YWlsYWJsZUhlaWdodCA9IGhlaWdodCAtIDIgKiAoeU1pbiAhPT0gMCB8fCB5TWF4ICE9PSAwID8geU1pbiArIHlNYXggOiBtYXgob3ZlcmZsb3cudG9wLCBvdmVyZmxvdy5ib3R0b20pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXdhaXQgYXBwbHkoe1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgYXZhaWxhYmxlV2lkdGgsXG4gICAgICAgIGF2YWlsYWJsZUhlaWdodFxuICAgICAgfSk7XG4gICAgICBjb25zdCBuZXh0RGltZW5zaW9ucyA9IGF3YWl0IHBsYXRmb3JtLmdldERpbWVuc2lvbnMoZWxlbWVudHMuZmxvYXRpbmcpO1xuICAgICAgaWYgKHdpZHRoICE9PSBuZXh0RGltZW5zaW9ucy53aWR0aCB8fCBoZWlnaHQgIT09IG5leHREaW1lbnNpb25zLmhlaWdodCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgICByZWN0czogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgeyBhcnJvdywgYXV0b1BsYWNlbWVudCwgY29tcHV0ZVBvc2l0aW9uLCBkZXRlY3RPdmVyZmxvdywgZmxpcCwgaGlkZSwgaW5saW5lLCBsaW1pdFNoaWZ0LCBvZmZzZXQsIHNoaWZ0LCBzaXplIH07XG4iLCJmdW5jdGlvbiBoYXNXaW5kb3coKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbn1cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG5vZGUpIHtcbiAgaWYgKGlzTm9kZShub2RlKSkge1xuICAgIHJldHVybiAobm9kZS5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgfVxuICAvLyBNb2NrZWQgbm9kZXMgaW4gdGVzdGluZyBlbnZpcm9ubWVudHMgbWF5IG5vdCBiZSBpbnN0YW5jZXMgb2YgTm9kZS4gQnlcbiAgLy8gcmV0dXJuaW5nIGAjZG9jdW1lbnRgIGFuIGluZmluaXRlIGxvb3Agd29uJ3Qgb2NjdXIuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mbG9hdGluZy11aS9mbG9hdGluZy11aS9pc3N1ZXMvMjMxN1xuICByZXR1cm4gJyNkb2N1bWVudCc7XG59XG5mdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICB2YXIgX25vZGUkb3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIChub2RlID09IG51bGwgfHwgKF9ub2RlJG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfbm9kZSRvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB8fCB3aW5kb3c7XG59XG5mdW5jdGlvbiBnZXREb2N1bWVudEVsZW1lbnQobm9kZSkge1xuICB2YXIgX3JlZjtcbiAgcmV0dXJuIChfcmVmID0gKGlzTm9kZShub2RlKSA/IG5vZGUub3duZXJEb2N1bWVudCA6IG5vZGUuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZWYuZG9jdW1lbnRFbGVtZW50O1xufVxuZnVuY3Rpb24gaXNOb2RlKHZhbHVlKSB7XG4gIGlmICghaGFzV2luZG93KCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgTm9kZSB8fCB2YWx1ZSBpbnN0YW5jZW9mIGdldFdpbmRvdyh2YWx1ZSkuTm9kZTtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICBpZiAoIWhhc1dpbmRvdygpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEVsZW1lbnQgfHwgdmFsdWUgaW5zdGFuY2VvZiBnZXRXaW5kb3codmFsdWUpLkVsZW1lbnQ7XG59XG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KHZhbHVlKSB7XG4gIGlmICghaGFzV2luZG93KCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgdmFsdWUgaW5zdGFuY2VvZiBnZXRXaW5kb3codmFsdWUpLkhUTUxFbGVtZW50O1xufVxuZnVuY3Rpb24gaXNTaGFkb3dSb290KHZhbHVlKSB7XG4gIGlmICghaGFzV2luZG93KCkgfHwgdHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgfHwgdmFsdWUgaW5zdGFuY2VvZiBnZXRXaW5kb3codmFsdWUpLlNoYWRvd1Jvb3Q7XG59XG5mdW5jdGlvbiBpc092ZXJmbG93RWxlbWVudChlbGVtZW50KSB7XG4gIGNvbnN0IHtcbiAgICBvdmVyZmxvdyxcbiAgICBvdmVyZmxvd1gsXG4gICAgb3ZlcmZsb3dZLFxuICAgIGRpc3BsYXlcbiAgfSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW58Y2xpcC8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkgJiYgIVsnaW5saW5lJywgJ2NvbnRlbnRzJ10uaW5jbHVkZXMoZGlzcGxheSk7XG59XG5mdW5jdGlvbiBpc1RhYmxlRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBbJ3RhYmxlJywgJ3RkJywgJ3RoJ10uaW5jbHVkZXMoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpO1xufVxuZnVuY3Rpb24gaXNUb3BMYXllcihlbGVtZW50KSB7XG4gIHJldHVybiBbJzpwb3BvdmVyLW9wZW4nLCAnOm1vZGFsJ10uc29tZShzZWxlY3RvciA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNDb250YWluaW5nQmxvY2soZWxlbWVudE9yQ3NzKSB7XG4gIGNvbnN0IHdlYmtpdCA9IGlzV2ViS2l0KCk7XG4gIGNvbnN0IGNzcyA9IGlzRWxlbWVudChlbGVtZW50T3JDc3MpID8gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50T3JDc3MpIDogZWxlbWVudE9yQ3NzO1xuXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrXG4gIHJldHVybiBjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgKGNzcy5jb250YWluZXJUeXBlID8gY3NzLmNvbnRhaW5lclR5cGUgIT09ICdub3JtYWwnIDogZmFsc2UpIHx8ICF3ZWJraXQgJiYgKGNzcy5iYWNrZHJvcEZpbHRlciA/IGNzcy5iYWNrZHJvcEZpbHRlciAhPT0gJ25vbmUnIDogZmFsc2UpIHx8ICF3ZWJraXQgJiYgKGNzcy5maWx0ZXIgPyBjc3MuZmlsdGVyICE9PSAnbm9uZScgOiBmYWxzZSkgfHwgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnLCAnZmlsdGVyJ10uc29tZSh2YWx1ZSA9PiAoY3NzLndpbGxDaGFuZ2UgfHwgJycpLmluY2x1ZGVzKHZhbHVlKSkgfHwgWydwYWludCcsICdsYXlvdXQnLCAnc3RyaWN0JywgJ2NvbnRlbnQnXS5zb21lKHZhbHVlID0+IChjc3MuY29udGFpbiB8fCAnJykuaW5jbHVkZXModmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIGxldCBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gIHdoaWxlIChpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJiAhaXNMYXN0VHJhdmVyc2FibGVOb2RlKGN1cnJlbnROb2RlKSkge1xuICAgIGlmIChpc0NvbnRhaW5pbmdCbG9jayhjdXJyZW50Tm9kZSkpIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9IGVsc2UgaWYgKGlzVG9wTGF5ZXIoY3VycmVudE5vZGUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGN1cnJlbnROb2RlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzV2ViS2l0KCkge1xuICBpZiAodHlwZW9mIENTUyA9PT0gJ3VuZGVmaW5lZCcgfHwgIUNTUy5zdXBwb3J0cykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gQ1NTLnN1cHBvcnRzKCctd2Via2l0LWJhY2tkcm9wLWZpbHRlcicsICdub25lJyk7XG59XG5mdW5jdGlvbiBpc0xhc3RUcmF2ZXJzYWJsZU5vZGUobm9kZSkge1xuICByZXR1cm4gWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5jbHVkZXMoZ2V0Tm9kZU5hbWUobm9kZSkpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGdldE5vZGVTY3JvbGwoZWxlbWVudCkge1xuICBpZiAoaXNFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxYLFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxZXG4gIH07XG59XG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKG5vZGUpIHtcbiAgaWYgKGdldE5vZGVOYW1lKG5vZGUpID09PSAnaHRtbCcpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBjb25zdCByZXN1bHQgPVxuICAvLyBTdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZS5cbiAgbm9kZS5hc3NpZ25lZFNsb3QgfHxcbiAgLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWQuXG4gIG5vZGUucGFyZW50Tm9kZSB8fFxuICAvLyBTaGFkb3dSb290IGRldGVjdGVkLlxuICBpc1NoYWRvd1Jvb3Qobm9kZSkgJiYgbm9kZS5ob3N0IHx8XG4gIC8vIEZhbGxiYWNrLlxuICBnZXREb2N1bWVudEVsZW1lbnQobm9kZSk7XG4gIHJldHVybiBpc1NoYWRvd1Jvb3QocmVzdWx0KSA/IHJlc3VsdC5ob3N0IDogcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdE92ZXJmbG93QW5jZXN0b3Iobm9kZSkge1xuICBjb25zdCBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShub2RlKTtcbiAgaWYgKGlzTGFzdFRyYXZlcnNhYmxlTm9kZShwYXJlbnROb2RlKSkge1xuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQgPyBub2RlLm93bmVyRG9jdW1lbnQuYm9keSA6IG5vZGUuYm9keTtcbiAgfVxuICBpZiAoaXNIVE1MRWxlbWVudChwYXJlbnROb2RlKSAmJiBpc092ZXJmbG93RWxlbWVudChwYXJlbnROb2RlKSkge1xuICAgIHJldHVybiBwYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBnZXROZWFyZXN0T3ZlcmZsb3dBbmNlc3RvcihwYXJlbnROb2RlKTtcbn1cbmZ1bmN0aW9uIGdldE92ZXJmbG93QW5jZXN0b3JzKG5vZGUsIGxpc3QsIHRyYXZlcnNlSWZyYW1lcykge1xuICB2YXIgX25vZGUkb3duZXJEb2N1bWVudDI7XG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cbiAgaWYgKHRyYXZlcnNlSWZyYW1lcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhdmVyc2VJZnJhbWVzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzY3JvbGxhYmxlQW5jZXN0b3IgPSBnZXROZWFyZXN0T3ZlcmZsb3dBbmNlc3Rvcihub2RlKTtcbiAgY29uc3QgaXNCb2R5ID0gc2Nyb2xsYWJsZUFuY2VzdG9yID09PSAoKF9ub2RlJG93bmVyRG9jdW1lbnQyID0gbm9kZS5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX25vZGUkb3duZXJEb2N1bWVudDIuYm9keSk7XG4gIGNvbnN0IHdpbiA9IGdldFdpbmRvdyhzY3JvbGxhYmxlQW5jZXN0b3IpO1xuICBpZiAoaXNCb2R5KSB7XG4gICAgY29uc3QgZnJhbWVFbGVtZW50ID0gZ2V0RnJhbWVFbGVtZW50KHdpbik7XG4gICAgcmV0dXJuIGxpc3QuY29uY2F0KHdpbiwgd2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLCBpc092ZXJmbG93RWxlbWVudChzY3JvbGxhYmxlQW5jZXN0b3IpID8gc2Nyb2xsYWJsZUFuY2VzdG9yIDogW10sIGZyYW1lRWxlbWVudCAmJiB0cmF2ZXJzZUlmcmFtZXMgPyBnZXRPdmVyZmxvd0FuY2VzdG9ycyhmcmFtZUVsZW1lbnQpIDogW10pO1xuICB9XG4gIHJldHVybiBsaXN0LmNvbmNhdChzY3JvbGxhYmxlQW5jZXN0b3IsIGdldE92ZXJmbG93QW5jZXN0b3JzKHNjcm9sbGFibGVBbmNlc3RvciwgW10sIHRyYXZlcnNlSWZyYW1lcykpO1xufVxuZnVuY3Rpb24gZ2V0RnJhbWVFbGVtZW50KHdpbikge1xuICByZXR1cm4gd2luLnBhcmVudCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yod2luLnBhcmVudCkgPyB3aW4uZnJhbWVFbGVtZW50IDogbnVsbDtcbn1cblxuZXhwb3J0IHsgZ2V0Q29tcHV0ZWRTdHlsZSwgZ2V0Q29udGFpbmluZ0Jsb2NrLCBnZXREb2N1bWVudEVsZW1lbnQsIGdldEZyYW1lRWxlbWVudCwgZ2V0TmVhcmVzdE92ZXJmbG93QW5jZXN0b3IsIGdldE5vZGVOYW1lLCBnZXROb2RlU2Nyb2xsLCBnZXRPdmVyZmxvd0FuY2VzdG9ycywgZ2V0UGFyZW50Tm9kZSwgZ2V0V2luZG93LCBpc0NvbnRhaW5pbmdCbG9jaywgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50LCBpc0xhc3RUcmF2ZXJzYWJsZU5vZGUsIGlzTm9kZSwgaXNPdmVyZmxvd0VsZW1lbnQsIGlzU2hhZG93Um9vdCwgaXNUYWJsZUVsZW1lbnQsIGlzVG9wTGF5ZXIsIGlzV2ViS2l0IH07XG4iLCJpbXBvcnQgeyByZWN0VG9DbGllbnRSZWN0LCBkZXRlY3RPdmVyZmxvdyBhcyBkZXRlY3RPdmVyZmxvdyQxLCBvZmZzZXQgYXMgb2Zmc2V0JDEsIGF1dG9QbGFjZW1lbnQgYXMgYXV0b1BsYWNlbWVudCQxLCBzaGlmdCBhcyBzaGlmdCQxLCBmbGlwIGFzIGZsaXAkMSwgc2l6ZSBhcyBzaXplJDEsIGhpZGUgYXMgaGlkZSQxLCBhcnJvdyBhcyBhcnJvdyQxLCBpbmxpbmUgYXMgaW5saW5lJDEsIGxpbWl0U2hpZnQgYXMgbGltaXRTaGlmdCQxLCBjb21wdXRlUG9zaXRpb24gYXMgY29tcHV0ZVBvc2l0aW9uJDEgfSBmcm9tICdAZmxvYXRpbmctdWkvY29yZSc7XG5pbXBvcnQgeyByb3VuZCwgY3JlYXRlQ29vcmRzLCBtYXgsIG1pbiwgZmxvb3IgfSBmcm9tICdAZmxvYXRpbmctdWkvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0Q29tcHV0ZWRTdHlsZSwgaXNIVE1MRWxlbWVudCwgaXNFbGVtZW50LCBnZXRXaW5kb3csIGlzV2ViS2l0LCBnZXRGcmFtZUVsZW1lbnQsIGdldERvY3VtZW50RWxlbWVudCwgaXNUb3BMYXllciwgZ2V0Tm9kZU5hbWUsIGlzT3ZlcmZsb3dFbGVtZW50LCBnZXROb2RlU2Nyb2xsLCBnZXRPdmVyZmxvd0FuY2VzdG9ycywgZ2V0UGFyZW50Tm9kZSwgaXNMYXN0VHJhdmVyc2FibGVOb2RlLCBpc0NvbnRhaW5pbmdCbG9jaywgaXNUYWJsZUVsZW1lbnQsIGdldENvbnRhaW5pbmdCbG9jayB9IGZyb20gJ0BmbG9hdGluZy11aS91dGlscy9kb20nO1xuZXhwb3J0IHsgZ2V0T3ZlcmZsb3dBbmNlc3RvcnMgfSBmcm9tICdAZmxvYXRpbmctdWkvdXRpbHMvZG9tJztcblxuZnVuY3Rpb24gZ2V0Q3NzRGltZW5zaW9ucyhlbGVtZW50KSB7XG4gIGNvbnN0IGNzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIC8vIEluIHRlc3RpbmcgZW52aXJvbm1lbnRzLCB0aGUgYHdpZHRoYCBhbmQgYGhlaWdodGAgcHJvcGVydGllcyBhcmUgZW1wdHlcbiAgLy8gc3RyaW5ncyBmb3IgU1ZHIGVsZW1lbnRzLCByZXR1cm5pbmcgTmFOLiBGYWxsYmFjayB0byBgMGAgaW4gdGhpcyBjYXNlLlxuICBsZXQgd2lkdGggPSBwYXJzZUZsb2F0KGNzcy53aWR0aCkgfHwgMDtcbiAgbGV0IGhlaWdodCA9IHBhcnNlRmxvYXQoY3NzLmhlaWdodCkgfHwgMDtcbiAgY29uc3QgaGFzT2Zmc2V0ID0gaXNIVE1MRWxlbWVudChlbGVtZW50KTtcbiAgY29uc3Qgb2Zmc2V0V2lkdGggPSBoYXNPZmZzZXQgPyBlbGVtZW50Lm9mZnNldFdpZHRoIDogd2lkdGg7XG4gIGNvbnN0IG9mZnNldEhlaWdodCA9IGhhc09mZnNldCA/IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IDogaGVpZ2h0O1xuICBjb25zdCBzaG91bGRGYWxsYmFjayA9IHJvdW5kKHdpZHRoKSAhPT0gb2Zmc2V0V2lkdGggfHwgcm91bmQoaGVpZ2h0KSAhPT0gb2Zmc2V0SGVpZ2h0O1xuICBpZiAoc2hvdWxkRmFsbGJhY2spIHtcbiAgICB3aWR0aCA9IG9mZnNldFdpZHRoO1xuICAgIGhlaWdodCA9IG9mZnNldEhlaWdodDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICAkOiBzaG91bGRGYWxsYmFja1xuICB9O1xufVxuXG5mdW5jdGlvbiB1bndyYXBFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuICFpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50LmNvbnRleHRFbGVtZW50IDogZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0U2NhbGUoZWxlbWVudCkge1xuICBjb25zdCBkb21FbGVtZW50ID0gdW53cmFwRWxlbWVudChlbGVtZW50KTtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGRvbUVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvb3JkcygxKTtcbiAgfVxuICBjb25zdCByZWN0ID0gZG9tRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3Qge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICAkXG4gIH0gPSBnZXRDc3NEaW1lbnNpb25zKGRvbUVsZW1lbnQpO1xuICBsZXQgeCA9ICgkID8gcm91bmQocmVjdC53aWR0aCkgOiByZWN0LndpZHRoKSAvIHdpZHRoO1xuICBsZXQgeSA9ICgkID8gcm91bmQocmVjdC5oZWlnaHQpIDogcmVjdC5oZWlnaHQpIC8gaGVpZ2h0O1xuXG4gIC8vIDAsIE5hTiwgb3IgSW5maW5pdHkgc2hvdWxkIGFsd2F5cyBmYWxsYmFjayB0byAxLlxuXG4gIGlmICgheCB8fCAhTnVtYmVyLmlzRmluaXRlKHgpKSB7XG4gICAgeCA9IDE7XG4gIH1cbiAgaWYgKCF5IHx8ICFOdW1iZXIuaXNGaW5pdGUoeSkpIHtcbiAgICB5ID0gMTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHgsXG4gICAgeVxuICB9O1xufVxuXG5jb25zdCBub09mZnNldHMgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29vcmRzKDApO1xuZnVuY3Rpb24gZ2V0VmlzdWFsT2Zmc2V0cyhlbGVtZW50KSB7XG4gIGNvbnN0IHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgaWYgKCFpc1dlYktpdCgpIHx8ICF3aW4udmlzdWFsVmlld3BvcnQpIHtcbiAgICByZXR1cm4gbm9PZmZzZXRzO1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogd2luLnZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQsXG4gICAgeTogd2luLnZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcFxuICB9O1xufVxuZnVuY3Rpb24gc2hvdWxkQWRkVmlzdWFsT2Zmc2V0cyhlbGVtZW50LCBpc0ZpeGVkLCBmbG9hdGluZ09mZnNldFBhcmVudCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG4gIGlmICghZmxvYXRpbmdPZmZzZXRQYXJlbnQgfHwgaXNGaXhlZCAmJiBmbG9hdGluZ09mZnNldFBhcmVudCAhPT0gZ2V0V2luZG93KGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkO1xufVxuXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgaW5jbHVkZVNjYWxlLCBpc0ZpeGVkU3RyYXRlZ3ksIG9mZnNldFBhcmVudCkge1xuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlU2NhbGUgPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNGaXhlZFN0cmF0ZWd5ID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkU3RyYXRlZ3kgPSBmYWxzZTtcbiAgfVxuICBjb25zdCBjbGllbnRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgZG9tRWxlbWVudCA9IHVud3JhcEVsZW1lbnQoZWxlbWVudCk7XG4gIGxldCBzY2FsZSA9IGNyZWF0ZUNvb3JkcygxKTtcbiAgaWYgKGluY2x1ZGVTY2FsZSkge1xuICAgIGlmIChvZmZzZXRQYXJlbnQpIHtcbiAgICAgIGlmIChpc0VsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgICBzY2FsZSA9IGdldFNjYWxlKG9mZnNldFBhcmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlID0gZ2V0U2NhbGUoZWxlbWVudCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHZpc3VhbE9mZnNldHMgPSBzaG91bGRBZGRWaXN1YWxPZmZzZXRzKGRvbUVsZW1lbnQsIGlzRml4ZWRTdHJhdGVneSwgb2Zmc2V0UGFyZW50KSA/IGdldFZpc3VhbE9mZnNldHMoZG9tRWxlbWVudCkgOiBjcmVhdGVDb29yZHMoMCk7XG4gIGxldCB4ID0gKGNsaWVudFJlY3QubGVmdCArIHZpc3VhbE9mZnNldHMueCkgLyBzY2FsZS54O1xuICBsZXQgeSA9IChjbGllbnRSZWN0LnRvcCArIHZpc3VhbE9mZnNldHMueSkgLyBzY2FsZS55O1xuICBsZXQgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoIC8gc2NhbGUueDtcbiAgbGV0IGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0IC8gc2NhbGUueTtcbiAgaWYgKGRvbUVsZW1lbnQpIHtcbiAgICBjb25zdCB3aW4gPSBnZXRXaW5kb3coZG9tRWxlbWVudCk7XG4gICAgY29uc3Qgb2Zmc2V0V2luID0gb2Zmc2V0UGFyZW50ICYmIGlzRWxlbWVudChvZmZzZXRQYXJlbnQpID8gZ2V0V2luZG93KG9mZnNldFBhcmVudCkgOiBvZmZzZXRQYXJlbnQ7XG4gICAgbGV0IGN1cnJlbnRXaW4gPSB3aW47XG4gICAgbGV0IGN1cnJlbnRJRnJhbWUgPSBnZXRGcmFtZUVsZW1lbnQoY3VycmVudFdpbik7XG4gICAgd2hpbGUgKGN1cnJlbnRJRnJhbWUgJiYgb2Zmc2V0UGFyZW50ICYmIG9mZnNldFdpbiAhPT0gY3VycmVudFdpbikge1xuICAgICAgY29uc3QgaWZyYW1lU2NhbGUgPSBnZXRTY2FsZShjdXJyZW50SUZyYW1lKTtcbiAgICAgIGNvbnN0IGlmcmFtZVJlY3QgPSBjdXJyZW50SUZyYW1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50SUZyYW1lKTtcbiAgICAgIGNvbnN0IGxlZnQgPSBpZnJhbWVSZWN0LmxlZnQgKyAoY3VycmVudElGcmFtZS5jbGllbnRMZWZ0ICsgcGFyc2VGbG9hdChjc3MucGFkZGluZ0xlZnQpKSAqIGlmcmFtZVNjYWxlLng7XG4gICAgICBjb25zdCB0b3AgPSBpZnJhbWVSZWN0LnRvcCArIChjdXJyZW50SUZyYW1lLmNsaWVudFRvcCArIHBhcnNlRmxvYXQoY3NzLnBhZGRpbmdUb3ApKSAqIGlmcmFtZVNjYWxlLnk7XG4gICAgICB4ICo9IGlmcmFtZVNjYWxlLng7XG4gICAgICB5ICo9IGlmcmFtZVNjYWxlLnk7XG4gICAgICB3aWR0aCAqPSBpZnJhbWVTY2FsZS54O1xuICAgICAgaGVpZ2h0ICo9IGlmcmFtZVNjYWxlLnk7XG4gICAgICB4ICs9IGxlZnQ7XG4gICAgICB5ICs9IHRvcDtcbiAgICAgIGN1cnJlbnRXaW4gPSBnZXRXaW5kb3coY3VycmVudElGcmFtZSk7XG4gICAgICBjdXJyZW50SUZyYW1lID0gZ2V0RnJhbWVFbGVtZW50KGN1cnJlbnRXaW4pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVjdFRvQ2xpZW50UmVjdCh7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHgsXG4gICAgeVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY29udmVydE9mZnNldFBhcmVudFJlbGF0aXZlUmVjdFRvVmlld3BvcnRSZWxhdGl2ZVJlY3QoX3JlZikge1xuICBsZXQge1xuICAgIGVsZW1lbnRzLFxuICAgIHJlY3QsXG4gICAgb2Zmc2V0UGFyZW50LFxuICAgIHN0cmF0ZWd5XG4gIH0gPSBfcmVmO1xuICBjb25zdCBpc0ZpeGVkID0gc3RyYXRlZ3kgPT09ICdmaXhlZCc7XG4gIGNvbnN0IGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICBjb25zdCB0b3BMYXllciA9IGVsZW1lbnRzID8gaXNUb3BMYXllcihlbGVtZW50cy5mbG9hdGluZykgOiBmYWxzZTtcbiAgaWYgKG9mZnNldFBhcmVudCA9PT0gZG9jdW1lbnRFbGVtZW50IHx8IHRvcExheWVyICYmIGlzRml4ZWQpIHtcbiAgICByZXR1cm4gcmVjdDtcbiAgfVxuICBsZXQgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIGxldCBzY2FsZSA9IGNyZWF0ZUNvb3JkcygxKTtcbiAgY29uc3Qgb2Zmc2V0cyA9IGNyZWF0ZUNvb3JkcygwKTtcbiAgY29uc3QgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IGlzT3ZlcmZsb3dFbGVtZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgY29uc3Qgb2Zmc2V0UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuICAgICAgc2NhbGUgPSBnZXRTY2FsZShvZmZzZXRQYXJlbnQpO1xuICAgICAgb2Zmc2V0cy54ID0gb2Zmc2V0UmVjdC54ICsgb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgPSBvZmZzZXRSZWN0LnkgKyBvZmZzZXRQYXJlbnQuY2xpZW50VG9wO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoOiByZWN0LndpZHRoICogc2NhbGUueCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0ICogc2NhbGUueSxcbiAgICB4OiByZWN0LnggKiBzY2FsZS54IC0gc2Nyb2xsLnNjcm9sbExlZnQgKiBzY2FsZS54ICsgb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QueSAqIHNjYWxlLnkgLSBzY3JvbGwuc2Nyb2xsVG9wICogc2NhbGUueSArIG9mZnNldHMueVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0cyhlbGVtZW50KSB7XG4gIHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnQuZ2V0Q2xpZW50UmVjdHMoKSk7XG59XG5cbi8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbi8vIGluY29ycmVjdCBmb3IgUlRMLlxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50LCByZWN0KSB7XG4gIGNvbnN0IGxlZnRTY3JvbGwgPSBnZXROb2RlU2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG4gIGlmICghcmVjdCkge1xuICAgIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgbGVmdFNjcm9sbDtcbiAgfVxuICByZXR1cm4gcmVjdC5sZWZ0ICsgbGVmdFNjcm9sbDtcbn1cblxuLy8gR2V0cyB0aGUgZW50aXJlIHNpemUgb2YgdGhlIHNjcm9sbGFibGUgZG9jdW1lbnQgYXJlYSwgZXZlbiBleHRlbmRpbmcgb3V0c2lkZVxuLy8gb2YgdGhlIGA8aHRtbD5gIGFuZCBgPGJvZHk+YCByZWN0IGJvdW5kcyBpZiBob3Jpem9udGFsbHkgc2Nyb2xsYWJsZS5cbmZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIGNvbnN0IGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIGNvbnN0IHNjcm9sbCA9IGdldE5vZGVTY3JvbGwoZWxlbWVudCk7XG4gIGNvbnN0IGJvZHkgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgY29uc3Qgd2lkdGggPSBtYXgoaHRtbC5zY3JvbGxXaWR0aCwgaHRtbC5jbGllbnRXaWR0aCwgYm9keS5zY3JvbGxXaWR0aCwgYm9keS5jbGllbnRXaWR0aCk7XG4gIGNvbnN0IGhlaWdodCA9IG1heChodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5LmNsaWVudEhlaWdodCk7XG4gIGxldCB4ID0gLXNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgY29uc3QgeSA9IC1zY3JvbGwuc2Nyb2xsVG9wO1xuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5KS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgeCArPSBtYXgoaHRtbC5jbGllbnRXaWR0aCwgYm9keS5jbGllbnRXaWR0aCkgLSB3aWR0aDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4LFxuICAgIHlcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIGNvbnN0IHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgY29uc3QgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgY29uc3QgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIGxldCB3aWR0aCA9IGh0bWwuY2xpZW50V2lkdGg7XG4gIGxldCBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0O1xuICAgIGNvbnN0IHZpc3VhbFZpZXdwb3J0QmFzZWQgPSBpc1dlYktpdCgpO1xuICAgIGlmICghdmlzdWFsVmlld3BvcnRCYXNlZCB8fCB2aXN1YWxWaWV3cG9ydEJhc2VkICYmIHN0cmF0ZWd5ID09PSAnZml4ZWQnKSB7XG4gICAgICB4ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdDtcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHgsXG4gICAgeVxuICB9O1xufVxuXG4vLyBSZXR1cm5zIHRoZSBpbm5lciBjbGllbnQgcmVjdCwgc3VidHJhY3Rpbmcgc2Nyb2xsYmFycyBpZiBwcmVzZW50LlxuZnVuY3Rpb24gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpIHtcbiAgY29uc3QgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCB0cnVlLCBzdHJhdGVneSA9PT0gJ2ZpeGVkJyk7XG4gIGNvbnN0IHRvcCA9IGNsaWVudFJlY3QudG9wICsgZWxlbWVudC5jbGllbnRUb3A7XG4gIGNvbnN0IGxlZnQgPSBjbGllbnRSZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudExlZnQ7XG4gIGNvbnN0IHNjYWxlID0gaXNIVE1MRWxlbWVudChlbGVtZW50KSA/IGdldFNjYWxlKGVsZW1lbnQpIDogY3JlYXRlQ29vcmRzKDEpO1xuICBjb25zdCB3aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGggKiBzY2FsZS54O1xuICBjb25zdCBoZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodCAqIHNjYWxlLnk7XG4gIGNvbnN0IHggPSBsZWZ0ICogc2NhbGUueDtcbiAgY29uc3QgeSA9IHRvcCAqIHNjYWxlLnk7XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHgsXG4gICAgeVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdEZyb21DbGlwcGluZ0FuY2VzdG9yKGVsZW1lbnQsIGNsaXBwaW5nQW5jZXN0b3IsIHN0cmF0ZWd5KSB7XG4gIGxldCByZWN0O1xuICBpZiAoY2xpcHBpbmdBbmNlc3RvciA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIHJlY3QgPSBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpO1xuICB9IGVsc2UgaWYgKGNsaXBwaW5nQW5jZXN0b3IgPT09ICdkb2N1bWVudCcpIHtcbiAgICByZWN0ID0gZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSk7XG4gIH0gZWxzZSBpZiAoaXNFbGVtZW50KGNsaXBwaW5nQW5jZXN0b3IpKSB7XG4gICAgcmVjdCA9IGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGNsaXBwaW5nQW5jZXN0b3IsIHN0cmF0ZWd5KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB2aXN1YWxPZmZzZXRzID0gZ2V0VmlzdWFsT2Zmc2V0cyhlbGVtZW50KTtcbiAgICByZWN0ID0ge1xuICAgICAgLi4uY2xpcHBpbmdBbmNlc3RvcixcbiAgICAgIHg6IGNsaXBwaW5nQW5jZXN0b3IueCAtIHZpc3VhbE9mZnNldHMueCxcbiAgICAgIHk6IGNsaXBwaW5nQW5jZXN0b3IueSAtIHZpc3VhbE9mZnNldHMueVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlY3RUb0NsaWVudFJlY3QocmVjdCk7XG59XG5mdW5jdGlvbiBoYXNGaXhlZFBvc2l0aW9uQW5jZXN0b3IoZWxlbWVudCwgc3RvcE5vZGUpIHtcbiAgY29uc3QgcGFyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gIGlmIChwYXJlbnROb2RlID09PSBzdG9wTm9kZSB8fCAhaXNFbGVtZW50KHBhcmVudE5vZGUpIHx8IGlzTGFzdFRyYXZlcnNhYmxlTm9kZShwYXJlbnROb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnROb2RlKS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJyB8fCBoYXNGaXhlZFBvc2l0aW9uQW5jZXN0b3IocGFyZW50Tm9kZSwgc3RvcE5vZGUpO1xufVxuXG4vLyBBIFwiY2xpcHBpbmcgYW5jZXN0b3JcIiBpcyBhbiBgb3ZlcmZsb3dgIGVsZW1lbnQgd2l0aCB0aGUgY2hhcmFjdGVyaXN0aWMgb2Zcbi8vIGNsaXBwaW5nIChvciBoaWRpbmcpIGNoaWxkIGVsZW1lbnRzLiBUaGlzIHJldHVybnMgYWxsIGNsaXBwaW5nIGFuY2VzdG9yc1xuLy8gb2YgdGhlIGdpdmVuIGVsZW1lbnQgdXAgdGhlIHRyZWUuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ0VsZW1lbnRBbmNlc3RvcnMoZWxlbWVudCwgY2FjaGUpIHtcbiAgY29uc3QgY2FjaGVkUmVzdWx0ID0gY2FjaGUuZ2V0KGVsZW1lbnQpO1xuICBpZiAoY2FjaGVkUmVzdWx0KSB7XG4gICAgcmV0dXJuIGNhY2hlZFJlc3VsdDtcbiAgfVxuICBsZXQgcmVzdWx0ID0gZ2V0T3ZlcmZsb3dBbmNlc3RvcnMoZWxlbWVudCwgW10sIGZhbHNlKS5maWx0ZXIoZWwgPT4gaXNFbGVtZW50KGVsKSAmJiBnZXROb2RlTmFtZShlbCkgIT09ICdib2R5Jyk7XG4gIGxldCBjdXJyZW50Q29udGFpbmluZ0Jsb2NrQ29tcHV0ZWRTdHlsZSA9IG51bGw7XG4gIGNvbnN0IGVsZW1lbnRJc0ZpeGVkID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJztcbiAgbGV0IGN1cnJlbnROb2RlID0gZWxlbWVudElzRml4ZWQgPyBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIDogZWxlbWVudDtcblxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ29udGFpbmluZ19ibG9jayNpZGVudGlmeWluZ190aGVfY29udGFpbmluZ19ibG9ja1xuICB3aGlsZSAoaXNFbGVtZW50KGN1cnJlbnROb2RlKSAmJiAhaXNMYXN0VHJhdmVyc2FibGVOb2RlKGN1cnJlbnROb2RlKSkge1xuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTtcbiAgICBjb25zdCBjdXJyZW50Tm9kZUlzQ29udGFpbmluZyA9IGlzQ29udGFpbmluZ0Jsb2NrKGN1cnJlbnROb2RlKTtcbiAgICBpZiAoIWN1cnJlbnROb2RlSXNDb250YWluaW5nICYmIGNvbXB1dGVkU3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgIGN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qgc2hvdWxkRHJvcEN1cnJlbnROb2RlID0gZWxlbWVudElzRml4ZWQgPyAhY3VycmVudE5vZGVJc0NvbnRhaW5pbmcgJiYgIWN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlIDogIWN1cnJlbnROb2RlSXNDb250YWluaW5nICYmIGNvbXB1dGVkU3R5bGUucG9zaXRpb24gPT09ICdzdGF0aWMnICYmICEhY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUgJiYgWydhYnNvbHV0ZScsICdmaXhlZCddLmluY2x1ZGVzKGN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlLnBvc2l0aW9uKSB8fCBpc092ZXJmbG93RWxlbWVudChjdXJyZW50Tm9kZSkgJiYgIWN1cnJlbnROb2RlSXNDb250YWluaW5nICYmIGhhc0ZpeGVkUG9zaXRpb25BbmNlc3RvcihlbGVtZW50LCBjdXJyZW50Tm9kZSk7XG4gICAgaWYgKHNob3VsZERyb3BDdXJyZW50Tm9kZSkge1xuICAgICAgLy8gRHJvcCBub24tY29udGFpbmluZyBibG9ja3MuXG4gICAgICByZXN1bHQgPSByZXN1bHQuZmlsdGVyKGFuY2VzdG9yID0+IGFuY2VzdG9yICE9PSBjdXJyZW50Tm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlY29yZCBsYXN0IGNvbnRhaW5pbmcgYmxvY2sgZm9yIG5leHQgaXRlcmF0aW9uLlxuICAgICAgY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUgPSBjb21wdXRlZFN0eWxlO1xuICAgIH1cbiAgICBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoY3VycmVudE5vZGUpO1xuICB9XG4gIGNhY2hlLnNldChlbGVtZW50LCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBHZXRzIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIGluIGR1ZSB0byBhbnkgbnVtYmVyIG9mXG4vLyBjbGlwcGluZyBhbmNlc3RvcnMuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoX3JlZikge1xuICBsZXQge1xuICAgIGVsZW1lbnQsXG4gICAgYm91bmRhcnksXG4gICAgcm9vdEJvdW5kYXJ5LFxuICAgIHN0cmF0ZWd5XG4gIH0gPSBfcmVmO1xuICBjb25zdCBlbGVtZW50Q2xpcHBpbmdBbmNlc3RvcnMgPSBib3VuZGFyeSA9PT0gJ2NsaXBwaW5nQW5jZXN0b3JzJyA/IGlzVG9wTGF5ZXIoZWxlbWVudCkgPyBbXSA6IGdldENsaXBwaW5nRWxlbWVudEFuY2VzdG9ycyhlbGVtZW50LCB0aGlzLl9jKSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIGNvbnN0IGNsaXBwaW5nQW5jZXN0b3JzID0gWy4uLmVsZW1lbnRDbGlwcGluZ0FuY2VzdG9ycywgcm9vdEJvdW5kYXJ5XTtcbiAgY29uc3QgZmlyc3RDbGlwcGluZ0FuY2VzdG9yID0gY2xpcHBpbmdBbmNlc3RvcnNbMF07XG4gIGNvbnN0IGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nQW5jZXN0b3JzLnJlZHVjZSgoYWNjUmVjdCwgY2xpcHBpbmdBbmNlc3RvcikgPT4ge1xuICAgIGNvbnN0IHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbUNsaXBwaW5nQW5jZXN0b3IoZWxlbWVudCwgY2xpcHBpbmdBbmNlc3Rvciwgc3RyYXRlZ3kpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tQ2xpcHBpbmdBbmNlc3RvcihlbGVtZW50LCBmaXJzdENsaXBwaW5nQW5jZXN0b3IsIHN0cmF0ZWd5KSk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0LFxuICAgIGhlaWdodDogY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3AsXG4gICAgeDogY2xpcHBpbmdSZWN0LmxlZnQsXG4gICAgeTogY2xpcHBpbmdSZWN0LnRvcFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREaW1lbnNpb25zKGVsZW1lbnQpIHtcbiAgY29uc3Qge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodFxuICB9ID0gZ2V0Q3NzRGltZW5zaW9ucyhlbGVtZW50KTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHRcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVjdFJlbGF0aXZlVG9PZmZzZXRQYXJlbnQoZWxlbWVudCwgb2Zmc2V0UGFyZW50LCBzdHJhdGVneSkge1xuICBjb25zdCBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgY29uc3QgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIGNvbnN0IGlzRml4ZWQgPSBzdHJhdGVneSA9PT0gJ2ZpeGVkJztcbiAgY29uc3QgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCB0cnVlLCBpc0ZpeGVkLCBvZmZzZXRQYXJlbnQpO1xuICBsZXQgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIGNvbnN0IG9mZnNldHMgPSBjcmVhdGVDb29yZHMoMCk7XG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IGlzT3ZlcmZsb3dFbGVtZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG4gICAgaWYgKGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50KSB7XG4gICAgICBjb25zdCBvZmZzZXRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCwgdHJ1ZSwgaXNGaXhlZCwgb2Zmc2V0UGFyZW50KTtcbiAgICAgIG9mZnNldHMueCA9IG9mZnNldFJlY3QueCArIG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ID0gb2Zmc2V0UmVjdC55ICsgb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgLy8gSWYgdGhlIDxib2R5PiBzY3JvbGxiYXIgYXBwZWFycyBvbiB0aGUgbGVmdCAoZS5nLiBSVEwgc3lzdGVtcykuIFVzZVxuICAgICAgLy8gRmlyZWZveCB3aXRoIGxheW91dC5zY3JvbGxiYXIuc2lkZSA9IDMgaW4gYWJvdXQ6Y29uZmlnIHRvIHRlc3QgdGhpcy5cbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cbiAgbGV0IGh0bWxYID0gMDtcbiAgbGV0IGh0bWxZID0gMDtcbiAgaWYgKGRvY3VtZW50RWxlbWVudCAmJiAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBjb25zdCBodG1sUmVjdCA9IGRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBodG1sWSA9IGh0bWxSZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3A7XG4gICAgaHRtbFggPSBodG1sUmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLVxuICAgIC8vIFJUTCA8Ym9keT4gc2Nyb2xsYmFyLlxuICAgIGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50LCBodG1sUmVjdCk7XG4gIH1cbiAgY29uc3QgeCA9IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54IC0gaHRtbFg7XG4gIGNvbnN0IHkgPSByZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3AgLSBvZmZzZXRzLnkgLSBodG1sWTtcbiAgcmV0dXJuIHtcbiAgICB4LFxuICAgIHksXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc1N0YXRpY1Bvc2l0aW9uZWQoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYyc7XG59XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCwgcG9seWZpbGwpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocG9seWZpbGwpIHtcbiAgICByZXR1cm4gcG9seWZpbGwoZWxlbWVudCk7XG4gIH1cbiAgbGV0IHJhd09mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuXG4gIC8vIEZpcmVmb3ggcmV0dXJucyB0aGUgPGh0bWw+IGVsZW1lbnQgYXMgdGhlIG9mZnNldFBhcmVudCBpZiBpdCdzIG5vbi1zdGF0aWMsXG4gIC8vIHdoaWxlIENocm9tZSBhbmQgU2FmYXJpIHJldHVybiB0aGUgPGJvZHk+IGVsZW1lbnQuIFRoZSA8Ym9keT4gZWxlbWVudCBtdXN0XG4gIC8vIGJlIHVzZWQgdG8gcGVyZm9ybSB0aGUgY29ycmVjdCBjYWxjdWxhdGlvbnMgZXZlbiBpZiB0aGUgPGh0bWw+IGVsZW1lbnQgaXNcbiAgLy8gbm9uLXN0YXRpYy5cbiAgaWYgKGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSA9PT0gcmF3T2Zmc2V0UGFyZW50KSB7XG4gICAgcmF3T2Zmc2V0UGFyZW50ID0gcmF3T2Zmc2V0UGFyZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuICByZXR1cm4gcmF3T2Zmc2V0UGFyZW50O1xufVxuXG4vLyBHZXRzIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHBvc2l0aW9uZWQgZWxlbWVudC4gSGFuZGxlcyBzb21lIGVkZ2UgY2FzZXMsXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQsIHBvbHlmaWxsKSB7XG4gIGNvbnN0IHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgaWYgKGlzVG9wTGF5ZXIoZWxlbWVudCkpIHtcbiAgICByZXR1cm4gd2luO1xuICB9XG4gIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIGxldCBzdmdPZmZzZXRQYXJlbnQgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuICAgIHdoaWxlIChzdmdPZmZzZXRQYXJlbnQgJiYgIWlzTGFzdFRyYXZlcnNhYmxlTm9kZShzdmdPZmZzZXRQYXJlbnQpKSB7XG4gICAgICBpZiAoaXNFbGVtZW50KHN2Z09mZnNldFBhcmVudCkgJiYgIWlzU3RhdGljUG9zaXRpb25lZChzdmdPZmZzZXRQYXJlbnQpKSB7XG4gICAgICAgIHJldHVybiBzdmdPZmZzZXRQYXJlbnQ7XG4gICAgICB9XG4gICAgICBzdmdPZmZzZXRQYXJlbnQgPSBnZXRQYXJlbnROb2RlKHN2Z09mZnNldFBhcmVudCk7XG4gICAgfVxuICAgIHJldHVybiB3aW47XG4gIH1cbiAgbGV0IG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCwgcG9seWZpbGwpO1xuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgaXNTdGF0aWNQb3NpdGlvbmVkKG9mZnNldFBhcmVudCkpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCwgcG9seWZpbGwpO1xuICB9XG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgaXNMYXN0VHJhdmVyc2FibGVOb2RlKG9mZnNldFBhcmVudCkgJiYgaXNTdGF0aWNQb3NpdGlvbmVkKG9mZnNldFBhcmVudCkgJiYgIWlzQ29udGFpbmluZ0Jsb2NrKG9mZnNldFBhcmVudCkpIHtcbiAgICByZXR1cm4gd2luO1xuICB9XG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbjtcbn1cblxuY29uc3QgZ2V0RWxlbWVudFJlY3RzID0gYXN5bmMgZnVuY3Rpb24gKGRhdGEpIHtcbiAgY29uc3QgZ2V0T2Zmc2V0UGFyZW50Rm4gPSB0aGlzLmdldE9mZnNldFBhcmVudCB8fCBnZXRPZmZzZXRQYXJlbnQ7XG4gIGNvbnN0IGdldERpbWVuc2lvbnNGbiA9IHRoaXMuZ2V0RGltZW5zaW9ucztcbiAgY29uc3QgZmxvYXRpbmdEaW1lbnNpb25zID0gYXdhaXQgZ2V0RGltZW5zaW9uc0ZuKGRhdGEuZmxvYXRpbmcpO1xuICByZXR1cm4ge1xuICAgIHJlZmVyZW5jZTogZ2V0UmVjdFJlbGF0aXZlVG9PZmZzZXRQYXJlbnQoZGF0YS5yZWZlcmVuY2UsIGF3YWl0IGdldE9mZnNldFBhcmVudEZuKGRhdGEuZmxvYXRpbmcpLCBkYXRhLnN0cmF0ZWd5KSxcbiAgICBmbG9hdGluZzoge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB3aWR0aDogZmxvYXRpbmdEaW1lbnNpb25zLndpZHRoLFxuICAgICAgaGVpZ2h0OiBmbG9hdGluZ0RpbWVuc2lvbnMuaGVpZ2h0XG4gICAgfVxuICB9O1xufTtcblxuZnVuY3Rpb24gaXNSVEwoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5kaXJlY3Rpb24gPT09ICdydGwnO1xufVxuXG5jb25zdCBwbGF0Zm9ybSA9IHtcbiAgY29udmVydE9mZnNldFBhcmVudFJlbGF0aXZlUmVjdFRvVmlld3BvcnRSZWxhdGl2ZVJlY3QsXG4gIGdldERvY3VtZW50RWxlbWVudCxcbiAgZ2V0Q2xpcHBpbmdSZWN0LFxuICBnZXRPZmZzZXRQYXJlbnQsXG4gIGdldEVsZW1lbnRSZWN0cyxcbiAgZ2V0Q2xpZW50UmVjdHMsXG4gIGdldERpbWVuc2lvbnMsXG4gIGdldFNjYWxlLFxuICBpc0VsZW1lbnQsXG4gIGlzUlRMXG59O1xuXG4vLyBodHRwczovL3NhbXRob3IuYXUvMjAyMS9vYnNlcnZpbmctZG9tL1xuZnVuY3Rpb24gb2JzZXJ2ZU1vdmUoZWxlbWVudCwgb25Nb3ZlKSB7XG4gIGxldCBpbyA9IG51bGw7XG4gIGxldCB0aW1lb3V0SWQ7XG4gIGNvbnN0IHJvb3QgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgdmFyIF9pbztcbiAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAoX2lvID0gaW8pID09IG51bGwgfHwgX2lvLmRpc2Nvbm5lY3QoKTtcbiAgICBpbyA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gcmVmcmVzaChza2lwLCB0aHJlc2hvbGQpIHtcbiAgICBpZiAoc2tpcCA9PT0gdm9pZCAwKSB7XG4gICAgICBza2lwID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyZXNob2xkID0gMTtcbiAgICB9XG4gICAgY2xlYW51cCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxlZnQsXG4gICAgICB0b3AsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmICghc2tpcCkge1xuICAgICAgb25Nb3ZlKCk7XG4gICAgfVxuICAgIGlmICghd2lkdGggfHwgIWhlaWdodCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbnNldFRvcCA9IGZsb29yKHRvcCk7XG4gICAgY29uc3QgaW5zZXRSaWdodCA9IGZsb29yKHJvb3QuY2xpZW50V2lkdGggLSAobGVmdCArIHdpZHRoKSk7XG4gICAgY29uc3QgaW5zZXRCb3R0b20gPSBmbG9vcihyb290LmNsaWVudEhlaWdodCAtICh0b3AgKyBoZWlnaHQpKTtcbiAgICBjb25zdCBpbnNldExlZnQgPSBmbG9vcihsZWZ0KTtcbiAgICBjb25zdCByb290TWFyZ2luID0gLWluc2V0VG9wICsgXCJweCBcIiArIC1pbnNldFJpZ2h0ICsgXCJweCBcIiArIC1pbnNldEJvdHRvbSArIFwicHggXCIgKyAtaW5zZXRMZWZ0ICsgXCJweFwiO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICByb290TWFyZ2luLFxuICAgICAgdGhyZXNob2xkOiBtYXgoMCwgbWluKDEsIHRocmVzaG9sZCkpIHx8IDFcbiAgICB9O1xuICAgIGxldCBpc0ZpcnN0VXBkYXRlID0gdHJ1ZTtcbiAgICBmdW5jdGlvbiBoYW5kbGVPYnNlcnZlKGVudHJpZXMpIHtcbiAgICAgIGNvbnN0IHJhdGlvID0gZW50cmllc1swXS5pbnRlcnNlY3Rpb25SYXRpbztcbiAgICAgIGlmIChyYXRpbyAhPT0gdGhyZXNob2xkKSB7XG4gICAgICAgIGlmICghaXNGaXJzdFVwZGF0ZSkge1xuICAgICAgICAgIHJldHVybiByZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyYXRpbykge1xuICAgICAgICAgIC8vIElmIHRoZSByZWZlcmVuY2UgaXMgY2xpcHBlZCwgdGhlIHJhdGlvIGlzIDAuIFRocm90dGxlIHRoZSByZWZyZXNoXG4gICAgICAgICAgLy8gdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIG9mIHVwZGF0ZXMuXG4gICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZWZyZXNoKGZhbHNlLCAxZS03KTtcbiAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWZyZXNoKGZhbHNlLCByYXRpbyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlzRmlyc3RVcGRhdGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBPbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IGEgYGRvY3VtZW50YCBhcyB0aGUgcm9vdCBhbmQgd2lsbCB0aHJvdyBhblxuICAgIC8vIGVycm9yLlxuICAgIHRyeSB7XG4gICAgICBpbyA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihoYW5kbGVPYnNlcnZlLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC8vIEhhbmRsZSA8aWZyYW1lPnNcbiAgICAgICAgcm9vdDogcm9vdC5vd25lckRvY3VtZW50XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpbyA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihoYW5kbGVPYnNlcnZlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgaW8ub2JzZXJ2ZShlbGVtZW50KTtcbiAgfVxuICByZWZyZXNoKHRydWUpO1xuICByZXR1cm4gY2xlYW51cDtcbn1cblxuLyoqXG4gKiBBdXRvbWF0aWNhbGx5IHVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IHdoZW4gbmVjZXNzYXJ5LlxuICogU2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW4gdGhlIGZsb2F0aW5nIGVsZW1lbnQgaXMgbW91bnRlZCBvbiB0aGUgRE9NIG9yXG4gKiB2aXNpYmxlIG9uIHRoZSBzY3JlZW4uXG4gKiBAcmV0dXJucyBjbGVhbnVwIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGludm9rZWQgd2hlbiB0aGUgZmxvYXRpbmcgZWxlbWVudCBpc1xuICogcmVtb3ZlZCBmcm9tIHRoZSBET00gb3IgaGlkZGVuIGZyb20gdGhlIHNjcmVlbi5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9hdXRvVXBkYXRlXG4gKi9cbmZ1bmN0aW9uIGF1dG9VcGRhdGUocmVmZXJlbmNlLCBmbG9hdGluZywgdXBkYXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgY29uc3Qge1xuICAgIGFuY2VzdG9yU2Nyb2xsID0gdHJ1ZSxcbiAgICBhbmNlc3RvclJlc2l6ZSA9IHRydWUsXG4gICAgZWxlbWVudFJlc2l6ZSA9IHR5cGVvZiBSZXNpemVPYnNlcnZlciA9PT0gJ2Z1bmN0aW9uJyxcbiAgICBsYXlvdXRTaGlmdCA9IHR5cGVvZiBJbnRlcnNlY3Rpb25PYnNlcnZlciA9PT0gJ2Z1bmN0aW9uJyxcbiAgICBhbmltYXRpb25GcmFtZSA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCByZWZlcmVuY2VFbCA9IHVud3JhcEVsZW1lbnQocmVmZXJlbmNlKTtcbiAgY29uc3QgYW5jZXN0b3JzID0gYW5jZXN0b3JTY3JvbGwgfHwgYW5jZXN0b3JSZXNpemUgPyBbLi4uKHJlZmVyZW5jZUVsID8gZ2V0T3ZlcmZsb3dBbmNlc3RvcnMocmVmZXJlbmNlRWwpIDogW10pLCAuLi5nZXRPdmVyZmxvd0FuY2VzdG9ycyhmbG9hdGluZyldIDogW107XG4gIGFuY2VzdG9ycy5mb3JFYWNoKGFuY2VzdG9yID0+IHtcbiAgICBhbmNlc3RvclNjcm9sbCAmJiBhbmNlc3Rvci5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB1cGRhdGUsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICBhbmNlc3RvclJlc2l6ZSAmJiBhbmNlc3Rvci5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGUpO1xuICB9KTtcbiAgY29uc3QgY2xlYW51cElvID0gcmVmZXJlbmNlRWwgJiYgbGF5b3V0U2hpZnQgPyBvYnNlcnZlTW92ZShyZWZlcmVuY2VFbCwgdXBkYXRlKSA6IG51bGw7XG4gIGxldCByZW9ic2VydmVGcmFtZSA9IC0xO1xuICBsZXQgcmVzaXplT2JzZXJ2ZXIgPSBudWxsO1xuICBpZiAoZWxlbWVudFJlc2l6ZSkge1xuICAgIHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKF9yZWYgPT4ge1xuICAgICAgbGV0IFtmaXJzdEVudHJ5XSA9IF9yZWY7XG4gICAgICBpZiAoZmlyc3RFbnRyeSAmJiBmaXJzdEVudHJ5LnRhcmdldCA9PT0gcmVmZXJlbmNlRWwgJiYgcmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgICAgLy8gUHJldmVudCB1cGRhdGUgbG9vcHMgd2hlbiB1c2luZyB0aGUgYHNpemVgIG1pZGRsZXdhcmUuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mbG9hdGluZy11aS9mbG9hdGluZy11aS9pc3N1ZXMvMTc0MFxuICAgICAgICByZXNpemVPYnNlcnZlci51bm9ic2VydmUoZmxvYXRpbmcpO1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyZW9ic2VydmVGcmFtZSk7XG4gICAgICAgIHJlb2JzZXJ2ZUZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICB2YXIgX3Jlc2l6ZU9ic2VydmVyO1xuICAgICAgICAgIChfcmVzaXplT2JzZXJ2ZXIgPSByZXNpemVPYnNlcnZlcikgPT0gbnVsbCB8fCBfcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShmbG9hdGluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdXBkYXRlKCk7XG4gICAgfSk7XG4gICAgaWYgKHJlZmVyZW5jZUVsICYmICFhbmltYXRpb25GcmFtZSkge1xuICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShyZWZlcmVuY2VFbCk7XG4gICAgfVxuICAgIHJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZmxvYXRpbmcpO1xuICB9XG4gIGxldCBmcmFtZUlkO1xuICBsZXQgcHJldlJlZlJlY3QgPSBhbmltYXRpb25GcmFtZSA/IGdldEJvdW5kaW5nQ2xpZW50UmVjdChyZWZlcmVuY2UpIDogbnVsbDtcbiAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgZnJhbWVMb29wKCk7XG4gIH1cbiAgZnVuY3Rpb24gZnJhbWVMb29wKCkge1xuICAgIGNvbnN0IG5leHRSZWZSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHJlZmVyZW5jZSk7XG4gICAgaWYgKHByZXZSZWZSZWN0ICYmIChuZXh0UmVmUmVjdC54ICE9PSBwcmV2UmVmUmVjdC54IHx8IG5leHRSZWZSZWN0LnkgIT09IHByZXZSZWZSZWN0LnkgfHwgbmV4dFJlZlJlY3Qud2lkdGggIT09IHByZXZSZWZSZWN0LndpZHRoIHx8IG5leHRSZWZSZWN0LmhlaWdodCAhPT0gcHJldlJlZlJlY3QuaGVpZ2h0KSkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICAgIHByZXZSZWZSZWN0ID0gbmV4dFJlZlJlY3Q7XG4gICAgZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmcmFtZUxvb3ApO1xuICB9XG4gIHVwZGF0ZSgpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHZhciBfcmVzaXplT2JzZXJ2ZXIyO1xuICAgIGFuY2VzdG9ycy5mb3JFYWNoKGFuY2VzdG9yID0+IHtcbiAgICAgIGFuY2VzdG9yU2Nyb2xsICYmIGFuY2VzdG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHVwZGF0ZSk7XG4gICAgICBhbmNlc3RvclJlc2l6ZSAmJiBhbmNlc3Rvci5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGUpO1xuICAgIH0pO1xuICAgIGNsZWFudXBJbyA9PSBudWxsIHx8IGNsZWFudXBJbygpO1xuICAgIChfcmVzaXplT2JzZXJ2ZXIyID0gcmVzaXplT2JzZXJ2ZXIpID09IG51bGwgfHwgX3Jlc2l6ZU9ic2VydmVyMi5kaXNjb25uZWN0KCk7XG4gICAgcmVzaXplT2JzZXJ2ZXIgPSBudWxsO1xuICAgIGlmIChhbmltYXRpb25GcmFtZSkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWVJZCk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHdpdGggYW4gb2JqZWN0IG9mIG92ZXJmbG93IHNpZGUgb2Zmc2V0cyB0aGF0IGRldGVybWluZSBob3cgbXVjaCB0aGVcbiAqIGVsZW1lbnQgaXMgb3ZlcmZsb3dpbmcgYSBnaXZlbiBjbGlwcGluZyBib3VuZGFyeSBvbiBlYWNoIHNpZGUuXG4gKiAtIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGJvdW5kYXJ5IGJ5IHRoYXQgbnVtYmVyIG9mIHBpeGVsc1xuICogLSBuZWdhdGl2ZSA9IGhvdyBtYW55IHBpeGVscyBsZWZ0IGJlZm9yZSBpdCB3aWxsIG92ZXJmbG93XG4gKiAtIDAgPSBsaWVzIGZsdXNoIHdpdGggdGhlIGJvdW5kYXJ5XG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvZGV0ZWN0T3ZlcmZsb3dcbiAqL1xuY29uc3QgZGV0ZWN0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyQxO1xuXG4vKipcbiAqIE1vZGlmaWVzIHRoZSBwbGFjZW1lbnQgYnkgdHJhbnNsYXRpbmcgdGhlIGZsb2F0aW5nIGVsZW1lbnQgYWxvbmcgdGhlXG4gKiBzcGVjaWZpZWQgYXhlcy5cbiAqIEEgbnVtYmVyIChzaG9ydGhhbmQgZm9yIGBtYWluQXhpc2Agb3IgZGlzdGFuY2UpLCBvciBhbiBheGVzIGNvbmZpZ3VyYXRpb25cbiAqIG9iamVjdCBtYXkgYmUgcGFzc2VkLlxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL29mZnNldFxuICovXG5jb25zdCBvZmZzZXQgPSBvZmZzZXQkMTtcblxuLyoqXG4gKiBPcHRpbWl6ZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGZsb2F0aW5nIGVsZW1lbnQgYnkgY2hvb3NpbmcgdGhlIHBsYWNlbWVudFxuICogdGhhdCBoYXMgdGhlIG1vc3Qgc3BhY2UgYXZhaWxhYmxlIGF1dG9tYXRpY2FsbHksIHdpdGhvdXQgbmVlZGluZyB0byBzcGVjaWZ5IGFcbiAqIHByZWZlcnJlZCBwbGFjZW1lbnQuIEFsdGVybmF0aXZlIHRvIGBmbGlwYC5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9hdXRvUGxhY2VtZW50XG4gKi9cbmNvbnN0IGF1dG9QbGFjZW1lbnQgPSBhdXRvUGxhY2VtZW50JDE7XG5cbi8qKlxuICogT3B0aW1pemVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IGJ5IHNoaWZ0aW5nIGl0IGluIG9yZGVyIHRvXG4gKiBrZWVwIGl0IGluIHZpZXcgd2hlbiBpdCB3aWxsIG92ZXJmbG93IHRoZSBjbGlwcGluZyBib3VuZGFyeS5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9zaGlmdFxuICovXG5jb25zdCBzaGlmdCA9IHNoaWZ0JDE7XG5cbi8qKlxuICogT3B0aW1pemVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IGJ5IGZsaXBwaW5nIHRoZSBgcGxhY2VtZW50YFxuICogaW4gb3JkZXIgdG8ga2VlcCBpdCBpbiB2aWV3IHdoZW4gdGhlIHByZWZlcnJlZCBwbGFjZW1lbnQocykgd2lsbCBvdmVyZmxvdyB0aGVcbiAqIGNsaXBwaW5nIGJvdW5kYXJ5LiBBbHRlcm5hdGl2ZSB0byBgYXV0b1BsYWNlbWVudGAuXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvZmxpcFxuICovXG5jb25zdCBmbGlwID0gZmxpcCQxO1xuXG4vKipcbiAqIFByb3ZpZGVzIGRhdGEgdGhhdCBhbGxvd3MgeW91IHRvIGNoYW5nZSB0aGUgc2l6ZSBvZiB0aGUgZmxvYXRpbmcgZWxlbWVudCDigJRcbiAqIGZvciBpbnN0YW5jZSwgcHJldmVudCBpdCBmcm9tIG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyBib3VuZGFyeSBvciBtYXRjaCB0aGVcbiAqIHdpZHRoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9zaXplXG4gKi9cbmNvbnN0IHNpemUgPSBzaXplJDE7XG5cbi8qKlxuICogUHJvdmlkZXMgZGF0YSB0byBoaWRlIHRoZSBmbG9hdGluZyBlbGVtZW50IGluIGFwcGxpY2FibGUgc2l0dWF0aW9ucywgc3VjaCBhc1xuICogd2hlbiBpdCBpcyBub3QgaW4gdGhlIHNhbWUgY2xpcHBpbmcgY29udGV4dCBhcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvaGlkZVxuICovXG5jb25zdCBoaWRlID0gaGlkZSQxO1xuXG4vKipcbiAqIFByb3ZpZGVzIGRhdGEgdG8gcG9zaXRpb24gYW4gaW5uZXIgZWxlbWVudCBvZiB0aGUgZmxvYXRpbmcgZWxlbWVudCBzbyB0aGF0IGl0XG4gKiBhcHBlYXJzIGNlbnRlcmVkIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9hcnJvd1xuICovXG5jb25zdCBhcnJvdyA9IGFycm93JDE7XG5cbi8qKlxuICogUHJvdmlkZXMgaW1wcm92ZWQgcG9zaXRpb25pbmcgZm9yIGlubGluZSByZWZlcmVuY2UgZWxlbWVudHMgdGhhdCBjYW4gc3BhblxuICogb3ZlciBtdWx0aXBsZSBsaW5lcywgc3VjaCBhcyBoeXBlcmxpbmtzIG9yIHJhbmdlIHNlbGVjdGlvbnMuXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvaW5saW5lXG4gKi9cbmNvbnN0IGlubGluZSA9IGlubGluZSQxO1xuXG4vKipcbiAqIEJ1aWx0LWluIGBsaW1pdGVyYCB0aGF0IHdpbGwgc3RvcCBgc2hpZnQoKWAgYXQgYSBjZXJ0YWluIHBvaW50LlxuICovXG5jb25zdCBsaW1pdFNoaWZ0ID0gbGltaXRTaGlmdCQxO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBgeGAgYW5kIGB5YCBjb29yZGluYXRlcyB0aGF0IHdpbGwgcGxhY2UgdGhlIGZsb2F0aW5nIGVsZW1lbnRcbiAqIG5leHQgdG8gYSBnaXZlbiByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuY29uc3QgY29tcHV0ZVBvc2l0aW9uID0gKHJlZmVyZW5jZSwgZmxvYXRpbmcsIG9wdGlvbnMpID0+IHtcbiAgLy8gVGhpcyBjYWNoZXMgdGhlIGV4cGVuc2l2ZSBgZ2V0Q2xpcHBpbmdFbGVtZW50QW5jZXN0b3JzYCBmdW5jdGlvbiBzbyB0aGF0XG4gIC8vIG11bHRpcGxlIGxpZmVjeWNsZSByZXNldHMgcmUtdXNlIHRoZSBzYW1lIHJlc3VsdC4gSXQgb25seSBsaXZlcyBmb3IgYVxuICAvLyBzaW5nbGUgY2FsbC4gSWYgb3RoZXIgZnVuY3Rpb25zIGJlY29tZSBleHBlbnNpdmUsIHdlIGNhbiBhZGQgdGhlbSBhcyB3ZWxsLlxuICBjb25zdCBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgY29uc3QgbWVyZ2VkT3B0aW9ucyA9IHtcbiAgICBwbGF0Zm9ybSxcbiAgICAuLi5vcHRpb25zXG4gIH07XG4gIGNvbnN0IHBsYXRmb3JtV2l0aENhY2hlID0ge1xuICAgIC4uLm1lcmdlZE9wdGlvbnMucGxhdGZvcm0sXG4gICAgX2M6IGNhY2hlXG4gIH07XG4gIHJldHVybiBjb21wdXRlUG9zaXRpb24kMShyZWZlcmVuY2UsIGZsb2F0aW5nLCB7XG4gICAgLi4ubWVyZ2VkT3B0aW9ucyxcbiAgICBwbGF0Zm9ybTogcGxhdGZvcm1XaXRoQ2FjaGVcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBhcnJvdywgYXV0b1BsYWNlbWVudCwgYXV0b1VwZGF0ZSwgY29tcHV0ZVBvc2l0aW9uLCBkZXRlY3RPdmVyZmxvdywgZmxpcCwgaGlkZSwgaW5saW5lLCBsaW1pdFNoaWZ0LCBvZmZzZXQsIHBsYXRmb3JtLCBzaGlmdCwgc2l6ZSB9O1xuIiwiLypcbiogbG9nbGV2ZWwgLSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWxcbipcbiogQ29weXJpZ2h0IChjKSAyMDEzIFRpbSBQZXJyeVxuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4qL1xuKGZ1bmN0aW9uIChyb290LCBkZWZpbml0aW9uKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoZGVmaW5pdGlvbik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb290LmxvZyA9IGRlZmluaXRpb24oKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vIFNsaWdodGx5IGR1YmlvdXMgdHJpY2tzIHRvIGN1dCBkb3duIG1pbmltaXplZCBmaWxlIHNpemVcbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XG4gICAgdmFyIHVuZGVmaW5lZFR5cGUgPSBcInVuZGVmaW5lZFwiO1xuICAgIHZhciBpc0lFID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpICYmICh0eXBlb2Ygd2luZG93Lm5hdmlnYXRvciAhPT0gdW5kZWZpbmVkVHlwZSkgJiYgKFxuICAgICAgICAvVHJpZGVudFxcL3xNU0lFIC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICApO1xuXG4gICAgdmFyIGxvZ01ldGhvZHMgPSBbXG4gICAgICAgIFwidHJhY2VcIixcbiAgICAgICAgXCJkZWJ1Z1wiLFxuICAgICAgICBcImluZm9cIixcbiAgICAgICAgXCJ3YXJuXCIsXG4gICAgICAgIFwiZXJyb3JcIlxuICAgIF07XG5cbiAgICB2YXIgX2xvZ2dlcnNCeU5hbWUgPSB7fTtcbiAgICB2YXIgZGVmYXVsdExvZ2dlciA9IG51bGw7XG5cbiAgICAvLyBDcm9zcy1icm93c2VyIGJpbmQgZXF1aXZhbGVudCB0aGF0IHdvcmtzIGF0IGxlYXN0IGJhY2sgdG8gSUU2XG4gICAgZnVuY3Rpb24gYmluZE1ldGhvZChvYmosIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IG9ialttZXRob2ROYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QuYmluZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5iaW5kKG9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKG1ldGhvZCwgb2JqKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBNaXNzaW5nIGJpbmQgc2hpbSBvciBJRTggKyBNb2Rlcm5penIsIGZhbGxiYWNrIHRvIHdyYXBwaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KG1ldGhvZCwgW29iaiwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRyYWNlKCkgZG9lc24ndCBwcmludCB0aGUgbWVzc2FnZSBpbiBJRSwgc28gZm9yIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIHdyYXAgaXRcbiAgICBmdW5jdGlvbiB0cmFjZUZvcklFKCkge1xuICAgICAgICBpZiAoY29uc29sZS5sb2cpIHtcbiAgICAgICAgICAgIGlmIChjb25zb2xlLmxvZy5hcHBseSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEluIG9sZCBJRSwgbmF0aXZlIGNvbnNvbGUgbWV0aG9kcyB0aGVtc2VsdmVzIGRvbid0IGhhdmUgYXBwbHkoKS5cbiAgICAgICAgICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkoY29uc29sZS5sb2csIFtjb25zb2xlLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uc29sZS50cmFjZSkgY29uc29sZS50cmFjZSgpO1xuICAgIH1cblxuICAgIC8vIEJ1aWxkIHRoZSBiZXN0IGxvZ2dpbmcgbWV0aG9kIHBvc3NpYmxlIGZvciB0aGlzIGVudlxuICAgIC8vIFdoZXJldmVyIHBvc3NpYmxlIHdlIHdhbnQgdG8gYmluZCwgbm90IHdyYXAsIHRvIHByZXNlcnZlIHN0YWNrIHRyYWNlc1xuICAgIGZ1bmN0aW9uIHJlYWxNZXRob2QobWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAobWV0aG9kTmFtZSA9PT0gJ2RlYnVnJykge1xuICAgICAgICAgICAgbWV0aG9kTmFtZSA9ICdsb2cnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSB1bmRlZmluZWRUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIE5vIG1ldGhvZCBwb3NzaWJsZSwgZm9yIG5vdyAtIGZpeGVkIGxhdGVyIGJ5IGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXNcbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2ROYW1lID09PSAndHJhY2UnICYmIGlzSUUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFjZUZvcklFO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGVbbWV0aG9kTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgbWV0aG9kTmFtZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uc29sZS5sb2cgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgJ2xvZycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGVzZSBwcml2YXRlIGZ1bmN0aW9ucyBhbHdheXMgbmVlZCBgdGhpc2AgdG8gYmUgc2V0IHByb3Blcmx5XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlTG9nZ2luZ01ldGhvZHMoKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICAgIHZhciBsZXZlbCA9IHRoaXMuZ2V0TGV2ZWwoKTtcblxuICAgICAgICAvLyBSZXBsYWNlIHRoZSBhY3R1YWwgbWV0aG9kcy5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2dNZXRob2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IGxvZ01ldGhvZHNbaV07XG4gICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdID0gKGkgPCBsZXZlbCkgP1xuICAgICAgICAgICAgICAgIG5vb3AgOlxuICAgICAgICAgICAgICAgIHRoaXMubWV0aG9kRmFjdG9yeShtZXRob2ROYW1lLCBsZXZlbCwgdGhpcy5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmluZSBsb2cubG9nIGFzIGFuIGFsaWFzIGZvciBsb2cuZGVidWdcbiAgICAgICAgdGhpcy5sb2cgPSB0aGlzLmRlYnVnO1xuXG4gICAgICAgIC8vIFJldHVybiBhbnkgaW1wb3J0YW50IHdhcm5pbmdzLlxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUgJiYgbGV2ZWwgPCB0aGlzLmxldmVscy5TSUxFTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIk5vIGNvbnNvbGUgYXZhaWxhYmxlIGZvciBsb2dnaW5nXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbiBvbGQgSUUgdmVyc2lvbnMsIHRoZSBjb25zb2xlIGlzbid0IHByZXNlbnQgdW50aWwgeW91IGZpcnN0IG9wZW4gaXQuXG4gICAgLy8gV2UgYnVpbGQgcmVhbE1ldGhvZCgpIHJlcGxhY2VtZW50cyBoZXJlIHRoYXQgcmVnZW5lcmF0ZSBsb2dnaW5nIG1ldGhvZHNcbiAgICBmdW5jdGlvbiBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCeSBkZWZhdWx0LCB3ZSB1c2UgY2xvc2VseSBib3VuZCByZWFsIG1ldGhvZHMgd2hlcmV2ZXIgcG9zc2libGUsIGFuZFxuICAgIC8vIG90aGVyd2lzZSB3ZSB3YWl0IGZvciBhIGNvbnNvbGUgdG8gYXBwZWFyLCBhbmQgdGhlbiB0cnkgYWdhaW4uXG4gICAgZnVuY3Rpb24gZGVmYXVsdE1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgX2xldmVsLCBfbG9nZ2VyTmFtZSkge1xuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgICByZXR1cm4gcmVhbE1ldGhvZChtZXRob2ROYW1lKSB8fFxuICAgICAgICAgICAgICAgZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvZ2dlcihuYW1lLCBmYWN0b3J5KSB7XG4gICAgICAvLyBQcml2YXRlIGluc3RhbmNlIHZhcmlhYmxlcy5cbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGxldmVsIGluaGVyaXRlZCBmcm9tIGEgcGFyZW50IGxvZ2dlciAob3IgYSBnbG9iYWwgZGVmYXVsdCkuIFdlXG4gICAgICAgKiBjYWNoZSB0aGlzIGhlcmUgcmF0aGVyIHRoYW4gZGVsZWdhdGluZyB0byB0aGUgcGFyZW50IHNvIHRoYXQgaXQgc3RheXNcbiAgICAgICAqIGluIHN5bmMgd2l0aCB0aGUgYWN0dWFsIGxvZ2dpbmcgbWV0aG9kcyB0aGF0IHdlIGhhdmUgaW5zdGFsbGVkICh0aGVcbiAgICAgICAqIHBhcmVudCBjb3VsZCBjaGFuZ2UgbGV2ZWxzIGJ1dCB3ZSBtaWdodCBub3QgaGF2ZSByZWJ1aWx0IHRoZSBsb2dnZXJzXG4gICAgICAgKiBpbiB0aGlzIGNoaWxkIHlldCkuXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICB2YXIgaW5oZXJpdGVkTGV2ZWw7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBkZWZhdWx0IGxldmVsIGZvciB0aGlzIGxvZ2dlciwgaWYgYW55LiBJZiBzZXQsIHRoaXMgb3ZlcnJpZGVzXG4gICAgICAgKiBgaW5oZXJpdGVkTGV2ZWxgLlxuICAgICAgICogQHR5cGUge251bWJlcnxudWxsfVxuICAgICAgICovXG4gICAgICB2YXIgZGVmYXVsdExldmVsO1xuICAgICAgLyoqXG4gICAgICAgKiBBIHVzZXItc3BlY2lmaWMgbGV2ZWwgZm9yIHRoaXMgbG9nZ2VyLiBJZiBzZXQsIHRoaXMgb3ZlcnJpZGVzXG4gICAgICAgKiBgZGVmYXVsdExldmVsYC5cbiAgICAgICAqIEB0eXBlIHtudW1iZXJ8bnVsbH1cbiAgICAgICAqL1xuICAgICAgdmFyIHVzZXJMZXZlbDtcblxuICAgICAgdmFyIHN0b3JhZ2VLZXkgPSBcImxvZ2xldmVsXCI7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgc3RvcmFnZUtleSArPSBcIjpcIiArIG5hbWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSB7XG4gICAgICAgIHN0b3JhZ2VLZXkgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBlcnNpc3RMZXZlbElmUG9zc2libGUobGV2ZWxOdW0pIHtcbiAgICAgICAgICB2YXIgbGV2ZWxOYW1lID0gKGxvZ01ldGhvZHNbbGV2ZWxOdW1dIHx8ICdzaWxlbnQnKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IHVuZGVmaW5lZFR5cGUgfHwgIXN0b3JhZ2VLZXkpIHJldHVybjtcblxuICAgICAgICAgIC8vIFVzZSBsb2NhbFN0b3JhZ2UgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XSA9IGxldmVsTmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIFVzZSBzZXNzaW9uIGNvb2tpZSBhcyBmYWxsYmFja1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgPVxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiICsgbGV2ZWxOYW1lICsgXCI7XCI7XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRQZXJzaXN0ZWRMZXZlbCgpIHtcbiAgICAgICAgICB2YXIgc3RvcmVkTGV2ZWw7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gdW5kZWZpbmVkVHlwZSB8fCAhc3RvcmFnZUtleSkgcmV0dXJuO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB3aW5kb3cubG9jYWxTdG9yYWdlW3N0b3JhZ2VLZXldO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGNvb2tpZXMgaWYgbG9jYWwgc3RvcmFnZSBnaXZlcyB1cyBub3RoaW5nXG4gICAgICAgICAgaWYgKHR5cGVvZiBzdG9yZWRMZXZlbCA9PT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZSA9IHdpbmRvdy5kb2N1bWVudC5jb29raWU7XG4gICAgICAgICAgICAgICAgICB2YXIgY29va2llTmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KTtcbiAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNvb2tpZS5pbmRleE9mKGNvb2tpZU5hbWUgKyBcIj1cIik7XG4gICAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24gIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSAvXihbXjtdKykvLmV4ZWMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZS5zbGljZShsb2NhdGlvbiArIGNvb2tpZU5hbWUubGVuZ3RoICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICApWzFdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgdGhlIHN0b3JlZCBsZXZlbCBpcyBub3QgdmFsaWQsIHRyZWF0IGl0IGFzIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cbiAgICAgICAgICBpZiAoc2VsZi5sZXZlbHNbc3RvcmVkTGV2ZWxdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0b3JlZExldmVsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhclBlcnNpc3RlZExldmVsKCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSB1bmRlZmluZWRUeXBlIHx8ICFzdG9yYWdlS2V5KSByZXR1cm47XG5cbiAgICAgICAgICAvLyBVc2UgbG9jYWxTdG9yYWdlIGlmIGF2YWlsYWJsZVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShzdG9yYWdlS2V5KTtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG5cbiAgICAgICAgICAvLyBVc2Ugc2Vzc2lvbiBjb29raWUgYXMgZmFsbGJhY2tcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuY29va2llID1cbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj07IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBVVENcIjtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxldmVsKGlucHV0KSB7XG4gICAgICAgICAgdmFyIGxldmVsID0gaW5wdXQ7XG4gICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJzdHJpbmdcIiAmJiBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGxldmVsID0gc2VsZi5sZXZlbHNbbGV2ZWwudG9VcHBlckNhc2UoKV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwibnVtYmVyXCIgJiYgbGV2ZWwgPj0gMCAmJiBsZXZlbCA8PSBzZWxmLmxldmVscy5TSUxFTlQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxldmVsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJsb2cuc2V0TGV2ZWwoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGxldmVsOiBcIiArIGlucHV0KTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgKlxuICAgICAgICogUHVibGljIGxvZ2dlciBBUEkgLSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsIGZvciBkZXRhaWxzXG4gICAgICAgKlxuICAgICAgICovXG5cbiAgICAgIHNlbGYubmFtZSA9IG5hbWU7XG5cbiAgICAgIHNlbGYubGV2ZWxzID0geyBcIlRSQUNFXCI6IDAsIFwiREVCVUdcIjogMSwgXCJJTkZPXCI6IDIsIFwiV0FSTlwiOiAzLFxuICAgICAgICAgIFwiRVJST1JcIjogNCwgXCJTSUxFTlRcIjogNX07XG5cbiAgICAgIHNlbGYubWV0aG9kRmFjdG9yeSA9IGZhY3RvcnkgfHwgZGVmYXVsdE1ldGhvZEZhY3Rvcnk7XG5cbiAgICAgIHNlbGYuZ2V0TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHVzZXJMZXZlbCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdXNlckxldmVsO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZGVmYXVsdExldmVsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0TGV2ZWw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbmhlcml0ZWRMZXZlbDtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnNldExldmVsID0gZnVuY3Rpb24gKGxldmVsLCBwZXJzaXN0KSB7XG4gICAgICAgICAgdXNlckxldmVsID0gbm9ybWFsaXplTGV2ZWwobGV2ZWwpO1xuICAgICAgICAgIGlmIChwZXJzaXN0ICE9PSBmYWxzZSkgeyAgLy8gZGVmYXVsdHMgdG8gdHJ1ZVxuICAgICAgICAgICAgICBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKHVzZXJMZXZlbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTk9URTogaW4gdjIsIHRoaXMgc2hvdWxkIGNhbGwgcmVidWlsZCgpLCB3aGljaCB1cGRhdGVzIGNoaWxkcmVuLlxuICAgICAgICAgIHJldHVybiByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbChzZWxmKTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0RGVmYXVsdExldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgICAgZGVmYXVsdExldmVsID0gbm9ybWFsaXplTGV2ZWwobGV2ZWwpO1xuICAgICAgICAgIGlmICghZ2V0UGVyc2lzdGVkTGV2ZWwoKSkge1xuICAgICAgICAgICAgICBzZWxmLnNldExldmVsKGxldmVsLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5yZXNldExldmVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHVzZXJMZXZlbCA9IG51bGw7XG4gICAgICAgICAgY2xlYXJQZXJzaXN0ZWRMZXZlbCgpO1xuICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHNlbGYpO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5lbmFibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5UUkFDRSwgcGVyc2lzdCk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmRpc2FibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5TSUxFTlQsIHBlcnNpc3QpO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5yZWJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChkZWZhdWx0TG9nZ2VyICE9PSBzZWxmKSB7XG4gICAgICAgICAgICAgIGluaGVyaXRlZExldmVsID0gbm9ybWFsaXplTGV2ZWwoZGVmYXVsdExvZ2dlci5nZXRMZXZlbCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVwbGFjZUxvZ2dpbmdNZXRob2RzLmNhbGwoc2VsZik7XG5cbiAgICAgICAgICBpZiAoZGVmYXVsdExvZ2dlciA9PT0gc2VsZikge1xuICAgICAgICAgICAgICBmb3IgKHZhciBjaGlsZE5hbWUgaW4gX2xvZ2dlcnNCeU5hbWUpIHtcbiAgICAgICAgICAgICAgICBfbG9nZ2Vyc0J5TmFtZVtjaGlsZE5hbWVdLnJlYnVpbGQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIEluaXRpYWxpemUgYWxsIHRoZSBpbnRlcm5hbCBsZXZlbHMuXG4gICAgICBpbmhlcml0ZWRMZXZlbCA9IG5vcm1hbGl6ZUxldmVsKFxuICAgICAgICAgIGRlZmF1bHRMb2dnZXIgPyBkZWZhdWx0TG9nZ2VyLmdldExldmVsKCkgOiBcIldBUk5cIlxuICAgICAgKTtcbiAgICAgIHZhciBpbml0aWFsTGV2ZWwgPSBnZXRQZXJzaXN0ZWRMZXZlbCgpO1xuICAgICAgaWYgKGluaXRpYWxMZXZlbCAhPSBudWxsKSB7XG4gICAgICAgICAgdXNlckxldmVsID0gbm9ybWFsaXplTGV2ZWwoaW5pdGlhbExldmVsKTtcbiAgICAgIH1cbiAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHNlbGYpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICpcbiAgICAgKiBUb3AtbGV2ZWwgQVBJXG4gICAgICpcbiAgICAgKi9cblxuICAgIGRlZmF1bHRMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbiAgICBkZWZhdWx0TG9nZ2VyLmdldExvZ2dlciA9IGZ1bmN0aW9uIGdldExvZ2dlcihuYW1lKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG5hbWUgIT09IFwic3ltYm9sXCIgJiYgdHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHx8IG5hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJZb3UgbXVzdCBzdXBwbHkgYSBuYW1lIHdoZW4gY3JlYXRpbmcgYSBsb2dnZXIuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvZ2dlciA9IF9sb2dnZXJzQnlOYW1lW25hbWVdO1xuICAgICAgICBpZiAoIWxvZ2dlcikge1xuICAgICAgICAgICAgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV0gPSBuZXcgTG9nZ2VyKFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZGVmYXVsdExvZ2dlci5tZXRob2RGYWN0b3J5XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dnZXI7XG4gICAgfTtcblxuICAgIC8vIEdyYWIgdGhlIGN1cnJlbnQgZ2xvYmFsIGxvZyB2YXJpYWJsZSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuICAgIHZhciBfbG9nID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpID8gd2luZG93LmxvZyA6IHVuZGVmaW5lZDtcbiAgICBkZWZhdWx0TG9nZ2VyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUgJiZcbiAgICAgICAgICAgICAgIHdpbmRvdy5sb2cgPT09IGRlZmF1bHRMb2dnZXIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2cgPSBfbG9nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXI7XG4gICAgfTtcblxuICAgIGRlZmF1bHRMb2dnZXIuZ2V0TG9nZ2VycyA9IGZ1bmN0aW9uIGdldExvZ2dlcnMoKSB7XG4gICAgICAgIHJldHVybiBfbG9nZ2Vyc0J5TmFtZTtcbiAgICB9O1xuXG4gICAgLy8gRVM2IGRlZmF1bHQgZXhwb3J0LCBmb3IgY29tcGF0aWJpbGl0eVxuICAgIGRlZmF1bHRMb2dnZXJbJ2RlZmF1bHQnXSA9IGRlZmF1bHRMb2dnZXI7XG5cbiAgICByZXR1cm4gZGVmYXVsdExvZ2dlcjtcbn0pKTtcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCwgSXRlcmF0b3IgKi9cblxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XG4gIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59XG5cbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcbiAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICB9XG4gIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICB9XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2VzRGVjb3JhdGUoY3RvciwgZGVzY3JpcHRvckluLCBkZWNvcmF0b3JzLCBjb250ZXh0SW4sIGluaXRpYWxpemVycywgZXh0cmFJbml0aWFsaXplcnMpIHtcbiAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XG4gIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XG4gIHZhciB0YXJnZXQgPSAhZGVzY3JpcHRvckluICYmIGN0b3IgPyBjb250ZXh0SW5bXCJzdGF0aWNcIl0gPyBjdG9yIDogY3Rvci5wcm90b3R5cGUgOiBudWxsO1xuICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcbiAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcbiAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluLmFjY2VzcykgY29udGV4dC5hY2Nlc3NbcF0gPSBjb250ZXh0SW4uYWNjZXNzW3BdO1xuICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xuICAgICAgaWYgKGtpbmQgPT09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5nZXQpKSBkZXNjcmlwdG9yLmdldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XG4gICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICAgICAgZWxzZSBkZXNjcmlwdG9yW2tleV0gPSBfO1xuICAgICAgfVxuICB9XG4gIGlmICh0YXJnZXQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbnRleHRJbi5uYW1lLCBkZXNjcmlwdG9yKTtcbiAgZG9uZSA9IHRydWU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xuICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0aWFsaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcbiAgfVxuICByZXR1cm4gdXNlVmFsdWUgPyB2YWx1ZSA6IHZvaWQgMDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Byb3BLZXkoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCBcIm5hbWVcIiwgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBwcmVmaXggPyBcIlwiLmNvbmNhdChwcmVmaXgsIFwiIFwiLCBuYW1lKSA6IG5hbWUgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnID0gT2JqZWN0LmNyZWF0ZSgodHlwZW9mIEl0ZXJhdG9yID09PSBcImZ1bmN0aW9uXCIgPyBJdGVyYXRvciA6IE9iamVjdCkucHJvdG90eXBlKTtcbiAgcmV0dXJuIGcubmV4dCA9IHZlcmIoMCksIGdbXCJ0aHJvd1wiXSA9IHZlcmIoMSksIGdbXCJyZXR1cm5cIl0gPSB2ZXJiKDIpLCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gIH1cbn1cblxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIG9bazJdID0gbVtrXTtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcbiAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xuICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgfVxuICB9O1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xuICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gIGlmICghbSkgcmV0dXJuIG87XG4gIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICB0cnkge1xuICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gIH1cbiAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gIGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgIH1cbiAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICB9XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XG4gIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xuICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgcltrXSA9IGFbal07XG4gIHJldHVybiByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xuICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgfVxuICB9XG4gIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XG4gIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcbiAgcmV0dXJuIGkgPSBPYmplY3QuY3JlYXRlKCh0eXBlb2YgQXN5bmNJdGVyYXRvciA9PT0gXCJmdW5jdGlvblwiID8gQXN5bmNJdGVyYXRvciA6IE9iamVjdCkucHJvdG90eXBlKSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiLCBhd2FpdFJldHVybiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gYXdhaXRSZXR1cm4oZikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGYsIHJlamVjdCk7IH07IH1cbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlmIChnW25dKSB7IGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IGlmIChmKSBpW25dID0gZihpW25dKTsgfSB9XG4gIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cbiAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcbiAgdmFyIGksIHA7XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gIHJldHVybiBjb29rZWQ7XG59O1xuXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlKGVudiwgdmFsdWUsIGFzeW5jKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XG4gICAgdmFyIGRpc3Bvc2UsIGlubmVyO1xuICAgIGlmIChhc3luYykge1xuICAgICAgaWYgKCFTeW1ib2wuYXN5bmNEaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jRGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XG4gICAgfVxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcbiAgICAgIGlmICghU3ltYm9sLmRpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuZGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmRpc3Bvc2VdO1xuICAgICAgaWYgKGFzeW5jKSBpbm5lciA9IGRpc3Bvc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IG5vdCBkaXNwb3NhYmxlLlwiKTtcbiAgICBpZiAoaW5uZXIpIGRpc3Bvc2UgPSBmdW5jdGlvbigpIHsgdHJ5IHsgaW5uZXIuY2FsbCh0aGlzKTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7IH0gfTtcbiAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xuICB9XG4gIGVsc2UgaWYgKGFzeW5jKSB7XG4gICAgZW52LnN0YWNrLnB1c2goeyBhc3luYzogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBfU3VwcHJlc3NlZEVycm9yID0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XG4gIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGlzcG9zZVJlc291cmNlcyhlbnYpIHtcbiAgZnVuY3Rpb24gZmFpbChlKSB7XG4gICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xuICAgIGVudi5oYXNFcnJvciA9IHRydWU7XG4gIH1cbiAgdmFyIHIsIHMgPSAwO1xuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChyID0gZW52LnN0YWNrLnBvcCgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIXIuYXN5bmMgJiYgcyA9PT0gMSkgcmV0dXJuIHMgPSAwLCBlbnYuc3RhY2sucHVzaChyKSwgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihuZXh0KTtcbiAgICAgICAgaWYgKHIuZGlzcG9zZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSByLmRpc3Bvc2UuY2FsbChyLnZhbHVlKTtcbiAgICAgICAgICBpZiAoci5hc3luYykgcmV0dXJuIHMgfD0gMiwgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihuZXh0LCBmdW5jdGlvbihlKSB7IGZhaWwoZSk7IHJldHVybiBuZXh0KCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgcyB8PSAxO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHMgPT09IDEpIHJldHVybiBlbnYuaGFzRXJyb3IgPyBQcm9taXNlLnJlamVjdChlbnYuZXJyb3IpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckNsYXNzKGNyZWF0ZUltcGwpIHtcbiAgICB2YXIgX3N1cGVyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIEVycm9yLmNhbGwoaW5zdGFuY2UpO1xuICAgICAgICBpbnN0YW5jZS5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIH07XG4gICAgdmFyIGN0b3JGdW5jID0gY3JlYXRlSW1wbChfc3VwZXIpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yRnVuYztcbiAgICByZXR1cm4gY3RvckZ1bmM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yc1xuICAgICAgICAgICAgPyBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XG4gICAgaWYgKGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJSZW1vdmUuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5LCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihpbml0aWFsVGVhcmRvd24pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgICAgICBpZiAoX3BhcmVudGFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wYXJlbnRhZ2VfMSA9IF9fdmFsdWVzKF9wYXJlbnRhZ2UpLCBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCk7ICFfcGFyZW50YWdlXzFfMS5kb25lOyBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50YWdlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcGFyZW50YWdlXzFfMSAmJiAhX3BhcmVudGFnZV8xXzEuZG9uZSAmJiAoX2EgPSBfcGFyZW50YWdlXzEucmV0dXJuKSkgX2EuY2FsbChfcGFyZW50YWdlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50YWdlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEZpbmFsaXplciA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbEZpbmFsaXplcikpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsRmluYWxpemVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yID8gZS5lcnJvcnMgOiBbZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgICAgIGlmIChfZmluYWxpemVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9maW5hbGl6ZXJzXzEgPSBfX3ZhbHVlcyhfZmluYWxpemVycyksIF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpOyAhX2ZpbmFsaXplcnNfMV8xLmRvbmU7IF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxpemVyID0gX2ZpbmFsaXplcnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKGZpbmFsaXplcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwID8gZXJyb3JzIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZXJyb3JzKSksIF9fcmVhZChlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzXzFfMSAmJiAhX2ZpbmFsaXplcnNfMV8xLmRvbmUgJiYgKF9iID0gX2ZpbmFsaXplcnNfMS5yZXR1cm4pKSBfYi5jYWxsKF9maW5hbGl6ZXJzXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIodGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICh0aGlzLl9maW5hbGl6ZXJzID0gKF9hID0gdGhpcy5fZmluYWxpemVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pLnB1c2godGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9oYXNQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICByZXR1cm4gX3BhcmVudGFnZSA9PT0gcGFyZW50IHx8IChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpICYmIF9wYXJlbnRhZ2UuaW5jbHVkZXMocGFyZW50KSk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpID8gKF9wYXJlbnRhZ2UucHVzaChwYXJlbnQpLCBfcGFyZW50YWdlKSA6IF9wYXJlbnRhZ2UgPyBbX3BhcmVudGFnZSwgcGFyZW50XSA6IHBhcmVudDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX3JlbW92ZVBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIGlmIChfcGFyZW50YWdlID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgIF9maW5hbGl6ZXJzICYmIGFyclJlbW92ZShfZmluYWxpemVycywgdGVhcmRvd24pO1xuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZnVuY3Rpb24gZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihmaW5hbGl6ZXIpKSB7XG4gICAgICAgIGZpbmFsaXplcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZmluYWxpemVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIG9uVW5oYW5kbGVkRXJyb3I6IG51bGwsXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nOiBmYWxzZSxcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgdGltZW91dFByb3ZpZGVyID0ge1xuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRUaW1lb3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuc2V0VGltZW91dC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFyVGltZW91dCkgfHwgY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbnZhciBjb250ZXh0ID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvckNvbnRleHQoY2IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgdmFyIGlzUm9vdCA9ICFjb250ZXh0O1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICBjb250ZXh0ID0geyBlcnJvclRocm93bjogZmFsc2UsIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2IoKTtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgdmFyIF9hID0gY29udGV4dCwgZXJyb3JUaHJvd24gPSBfYS5lcnJvclRocm93biwgZXJyb3IgPSBfYS5lcnJvcjtcbiAgICAgICAgICAgIGNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFcnJvcihlcnIpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgJiYgY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgY29udGV4dC5lcnJvciA9IGVycjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckNvbnRleHQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWwvbm9vcCc7XG5pbXBvcnQgeyBuZXh0Tm90aWZpY2F0aW9uLCBlcnJvck5vdGlmaWNhdGlvbiwgQ09NUExFVEVfTk9USUZJQ0FUSU9OIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25GYWN0b3JpZXMnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmltcG9ydCB7IGNhcHR1cmVFcnJvciB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBFTVBUWV9PQlNFUlZFUjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNhZmVTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihlcnJvck5vdGlmaWNhdGlvbihlcnIpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJzY3JpYmVyIH07XG52YXIgX2JpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gX2JpbmQuY2FsbChmbiwgdGhpc0FyZyk7XG59XG52YXIgQ29uc3VtZXJPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5wYXJ0aWFsT2JzZXJ2ZXIgPSBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgfVxuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmVycm9yKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENvbnN1bWVyT2JzZXJ2ZXI7XG59KCkpO1xudmFyIFNhZmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkgfHwgIW9ic2VydmVyT3JOZXh0KSB7XG4gICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgbmV4dDogKG9ic2VydmVyT3JOZXh0ICE9PSBudWxsICYmIG9ic2VydmVyT3JOZXh0ICE9PSB2b2lkIDAgPyBvYnNlcnZlck9yTmV4dCA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgPyBlcnJvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUgIT09IG51bGwgJiYgY29tcGxldGUgIT09IHZvaWQgMCA/IGNvbXBsZXRlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzE7XG4gICAgICAgICAgICBpZiAoX3RoaXMgJiYgY29uZmlnLnVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMSA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0OiBvYnNlcnZlck9yTmV4dC5uZXh0ICYmIGJpbmQob2JzZXJ2ZXJPck5leHQubmV4dCwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG9ic2VydmVyT3JOZXh0LmVycm9yICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuZXJyb3IsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcik7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuZnVuY3Rpb24gaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgY2FwdHVyZUVycm9yKGVycm9yKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycikge1xuICAgIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiA9IGNvbmZpZy5vblN0b3BwZWROb3RpZmljYXRpb247XG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uICYmIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpOyB9KTtcbn1cbmV4cG9ydCB2YXIgRU1QVFlfT0JTRVJWRVIgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IG5vb3AsXG4gICAgZXJyb3I6IGRlZmF1bHRFcnJvckhhbmRsZXIsXG4gICAgY29tcGxldGU6IG5vb3AsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJleHBvcnQgdmFyIG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIiwiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkoZm5zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBmbikgeyByZXR1cm4gZm4ocHJldik7IH0sIGlucHV0KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZS5qcy5tYXAiLCJpbXBvcnQgeyBTYWZlU3Vic2NyaWJlciwgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZXJyb3JDb250ZXh0IH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGlzU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCkgPyBvYnNlcnZlck9yTmV4dCA6IG5ldyBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBvcGVyYXRvciA9IF9hLm9wZXJhdG9yLCBzb3VyY2UgPSBfYS5zb3VyY2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvclxuICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgOiBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmliZShzdWJzY3JpYmVyKVxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlW1N5bWJvbF9vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHZhbHVlID0geCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHByb21pc2VDdG9yICE9PSBudWxsICYmIHByb21pc2VDdG9yICE9PSB2b2lkIDAgPyBwcm9taXNlQ3RvciA6IGNvbmZpZy5Qcm9taXNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBQcm9taXNlO1xufVxuZnVuY3Rpb24gaXNPYnNlcnZlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLm5leHQpICYmIGlzRnVuY3Rpb24odmFsdWUuZXJyb3IpICYmIGlzRnVuY3Rpb24odmFsdWUuY29tcGxldGUpO1xufVxuZnVuY3Rpb24gaXNTdWJzY3JpYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHx8IChpc09ic2VydmVyKHZhbHVlKSAmJiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBoYXNMaWZ0KHNvdXJjZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5saWZ0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvcGVyYXRlKGluaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzTGlmdChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQoZnVuY3Rpb24gKGxpZnRlZFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0KGxpZnRlZFNvdXJjZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuYWJsZSB0byBsaWZ0IHVua25vd24gT2JzZXJ2YWJsZSB0eXBlJyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpIHtcbiAgICByZXR1cm4gbmV3IE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKTtcbn1cbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPcGVyYXRvclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUsIHNob3VsZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuc2hvdWxkVW5zdWJzY3JpYmUgPSBzaG91bGRVbnN1YnNjcmliZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRVbnN1YnNjcmliZSB8fCB0aGlzLnNob3VsZFVuc3Vic2NyaWJlKCkpIHtcbiAgICAgICAgICAgIHZhciBjbG9zZWRfMSA9IHRoaXMuY2xvc2VkO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgIWNsb3NlZF8xICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9wZXJhdG9yU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvclN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIEVNUFRZX1NVQlNDUklQVElPTiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xuaW1wb3J0IHsgZXJyb3JDb250ZXh0IH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnRocm93bkVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdGhyb3dJZkNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmN1cnJlbnRPYnNlcnZlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IEFycmF5LmZyb20oX3RoaXMub2JzZXJ2ZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5oYXNFcnJvciA9IF90aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IF90aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgICAgICB3aGlsZSAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IF90aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgICAgICB3aGlsZSAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdWJqZWN0LnByb3RvdHlwZSwgXCJvYnNlcnZlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLm9ic2VydmVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgPiAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3RyeVN1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgdGhpcy5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyhzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyU3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2lubmVyU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkLCBvYnNlcnZlcnMgPSBfYS5vYnNlcnZlcnM7XG4gICAgICAgIGlmIChoYXNFcnJvciB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICAgICAgb2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICAgICAgYXJyUmVtb3ZlKG9ic2VydmVycywgc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCB0aHJvd25FcnJvciA9IF9hLnRocm93bkVycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQ7XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aHJvd25FcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmFzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgU3ViamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbmV3IEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdDtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgU3ViamVjdCB9O1xudmFyIEFub255bW91c1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmV4dCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHZhbHVlKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlcnIpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb21wbGV0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogRU1QVFlfU1VCU0NSSVBUSU9OO1xuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEFub255bW91c1N1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0JztcbnZhciBCZWhhdmlvclN1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCZWhhdmlvclN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQmVoYXZpb3JTdWJqZWN0KF92YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdmFsdWUgPSBfdmFsdWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3N1cGVyLnByb3RvdHlwZS5fc3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgICFzdWJzY3JpcHRpb24uY2xvc2VkICYmIHN1YnNjcmliZXIubmV4dCh0aGlzLl92YWx1ZSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCB0aHJvd25FcnJvciA9IF9hLnRocm93bkVycm9yLCBfdmFsdWUgPSBfYS5fdmFsdWU7XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgdGhyb3duRXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICByZXR1cm4gX3ZhbHVlO1xuICAgIH07XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmV4dC5jYWxsKHRoaXMsICh0aGlzLl92YWx1ZSA9IHZhbHVlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmVoYXZpb3JTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnQgeyBCZWhhdmlvclN1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJlaGF2aW9yU3ViamVjdC5qcy5tYXAiLCJleHBvcnQgdmFyIGRhdGVUaW1lc3RhbXBQcm92aWRlciA9IHtcbiAgICBub3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChkYXRlVGltZXN0YW1wUHJvdmlkZXIuZGVsZWdhdGUgfHwgRGF0ZSkubm93KCk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGVUaW1lc3RhbXBQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG52YXIgQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBBY3Rpb247XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIGludGVydmFsUHJvdmlkZXIgPSB7XG4gICAgc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0SW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRJbnRlcnZhbC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRJbnRlcnZhbC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFySW50ZXJ2YWwpIHx8IGNsZWFySW50ZXJ2YWwpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVydmFsUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgeyBpbnRlcnZhbFByb3ZpZGVyIH0gZnJvbSAnLi9pbnRlcnZhbFByb3ZpZGVyJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4uL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBBc3luY0FjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLmlkID0gKF9hID0gdGhpcy5pZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5yZXF1ZXN0QXN5bmNJZChzY2hlZHVsZXIsIHRoaXMuaWQsIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBfaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gaW50ZXJ2YWxQcm92aWRlci5zZXRJbnRlcnZhbChzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHRoaXMpLCBkZWxheSk7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoX3NjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCAmJiB0aGlzLmRlbGF5ID09PSBkZWxheSAmJiB0aGlzLnBlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIGludGVydmFsUHJvdmlkZXIuY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2V4ZWN1dGluZyBhIGNhbmNlbGxlZCBhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBlbmRpbmcgPT09IGZhbHNlICYmIHRoaXMuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQodGhpcy5zY2hlZHVsZXIsIHRoaXMuaWQsIG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIF9kZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9IGUgPyBlIDogbmV3IEVycm9yKCdTY2hlZHVsZWQgYWN0aW9uIHRocmV3IGZhbHN5IGVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgICAgICB0aGlzLndvcmsgPSB0aGlzLnN0YXRlID0gdGhpcy5zY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhcnJSZW1vdmUoYWN0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uKSk7XG5leHBvcnQgeyBBc3luY0FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyJztcbnZhciBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjaGVkdWxlcihzY2hlZHVsZXJBY3Rpb25DdG9yLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yID0gc2NoZWR1bGVyQWN0aW9uQ3RvcjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3Rvcih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGRhdGVUaW1lc3RhbXBQcm92aWRlci5ub3c7XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gJy4uL1NjaGVkdWxlcic7XG52YXIgQXN5bmNTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHsgbm93ID0gU2NoZWR1bGVyLm5vdzsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTY2hlZHVsZXJBY3Rpb24sIG5vdykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICBfdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY1NjaGVkdWxlcjtcbn0oU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBBc3luY1NjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgQXN5bmNBY3Rpb24gfSBmcm9tICcuL0FzeW5jQWN0aW9uJztcbmltcG9ydCB7IEFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9Bc3luY1NjaGVkdWxlcic7XG5leHBvcnQgdmFyIGFzeW5jU2NoZWR1bGVyID0gbmV3IEFzeW5jU2NoZWR1bGVyKEFzeW5jQWN0aW9uKTtcbmV4cG9ydCB2YXIgYXN5bmMgPSBhc3luY1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCB2YXIgRU1QVFkgPSBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTtcbmV4cG9ydCBmdW5jdGlvbiBlbXB0eShzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSA6IEVNUFRZO1xufVxuZnVuY3Rpb24gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc1NjaGVkdWxlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnNjaGVkdWxlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuL2lzU2NoZWR1bGVyJztcbmZ1bmN0aW9uIGxhc3QoYXJyKSB7XG4gICAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wUmVzdWx0U2VsZWN0b3IoYXJncykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BTY2hlZHVsZXIoYXJncykge1xuICAgIHJldHVybiBpc1NjaGVkdWxlcihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wTnVtYmVyKGFyZ3MsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgbGFzdChhcmdzKSA9PT0gJ251bWJlcicgPyBhcmdzLnBvcCgpIDogZGVmYXVsdFZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJncy5qcy5tYXAiLCJleHBvcnQgdmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuL2lzRnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwIiwiaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJbnRlcm9wT2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsImltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZXJhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jR2VuZXJhdG9yLCBfX2F3YWl0LCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcl8xKCkge1xuICAgICAgICB2YXIgcmVhZGVyLCBfYSwgdmFsdWUsIGRvbmU7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzEsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cnVlKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQocmVhZGVyLnJlYWQoKSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHJldHVybiBbMywgNV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdCh2b2lkIDApXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCwgX19hd2FpdCh2YWx1ZSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFs0LCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWRhYmxlU3RyZWFtTGlrZShvYmopIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmouZ2V0UmVhZGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlLCByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnMuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCByZXBvcnRVbmhhbmRsZWRFcnJvcik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXN5bmNJdGVyYWJsZShhc3luY0l0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikge1xuICAgIHZhciBhc3luY0l0ZXJhYmxlXzEsIGFzeW5jSXRlcmFibGVfMV8xO1xuICAgIHZhciBlXzIsIF9hO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlLCBlXzJfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFswLCA1LCA2LCAxMV0pO1xuICAgICAgICAgICAgICAgICAgICBhc3luY0l0ZXJhYmxlXzEgPSBfX2FzeW5jVmFsdWVzKGFzeW5jSXRlcmFibGUpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQsIGFzeW5jSXRlcmFibGVfMS5uZXh0KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgPSBfYi5zZW50KCksICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhc3luY0l0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGVfMl8xID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBlXzIgPSB7IGVycm9yOiBlXzJfMSB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbNiwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSAmJiAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBhc3luY0l0ZXJhYmxlXzEucmV0dXJuKSkpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX2EuY2FsbChhc3luY0l0ZXJhYmxlXzEpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA4O1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5uZXJGcm9tLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBleGVjdXRlU2NoZWR1bGUocGFyZW50U3Vic2NyaXB0aW9uLCBzY2hlZHVsZXIsIHdvcmssIGRlbGF5LCByZXBlYXQpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICBpZiAocmVwZWF0ID09PSB2b2lkIDApIHsgcmVwZWF0ID0gZmFsc2U7IH1cbiAgICB2YXIgc2NoZWR1bGVTdWJzY3JpcHRpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICB3b3JrKCk7XG4gICAgICAgIGlmIChyZXBlYXQpIHtcbiAgICAgICAgICAgIHBhcmVudFN1YnNjcmlwdGlvbi5hZGQodGhpcy5zY2hlZHVsZShudWxsLCBkZWxheSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfSwgZGVsYXkpO1xuICAgIHBhcmVudFN1YnNjcmlwdGlvbi5hZGQoc2NoZWR1bGVTdWJzY3JpcHRpb24pO1xuICAgIGlmICghcmVwZWF0KSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZVN1YnNjcmlwdGlvbjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjdXRlU2NoZWR1bGUuanMubWFwIiwiaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9LCBkZWxheSk7IH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTsgfSwgZGVsYXkpKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9ic2VydmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9vYnNlcnZlT24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL29ic2VydmVPbic7XG5pbXBvcnQgeyBzdWJzY3JpYmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9zdWJzY3JpYmVPbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gaW5uZXJGcm9tKGlucHV0KS5waXBlKHN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlucHV0W2krK10pO1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFycmF5LmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBkb25lO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IGl0ZXJhdG9yLm5leHQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzRnVuY3Rpb24oaXRlcmF0b3IgPT09IG51bGwgfHwgaXRlcmF0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGl0ZXJhdG9yLnJldHVybikgJiYgaXRlcmF0b3IucmV0dXJuKCk7IH07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUl0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaW5wdXRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUFzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IoaW5wdXQpLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVPYnNlcnZhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4vc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUl0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUl0ZXJhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmltcG9ydCB7IHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi9pbm5lckZyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikgOiBpbm5lckZyb20oaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBwb3BTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2FyZ3MnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBwb3BTY2hlZHVsZXIoYXJncyk7XG4gICAgcmV0dXJuIGZyb20oYXJncywgc2NoZWR1bGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9mLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRGF0ZS5qcy5tYXAiLCJpbXBvcnQgeyBhc3luY1NjaGVkdWxlciB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc1ZhbGlkRGF0ZSB9IGZyb20gJy4uL3V0aWwvaXNEYXRlJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4uL3V0aWwvY3JlYXRlRXJyb3JDbGFzcyc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgdmFyIFRpbWVvdXRFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBUaW1lb3V0RXJyb3JJbXBsKGluZm8pIHtcbiAgICAgICAgaWYgKGluZm8gPT09IHZvaWQgMCkgeyBpbmZvID0gbnVsbDsgfVxuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdUaW1lb3V0IGhhcyBvY2N1cnJlZCc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuICAgICAgICB0aGlzLmluZm8gPSBpbmZvO1xuICAgIH07XG59KTtcbmV4cG9ydCBmdW5jdGlvbiB0aW1lb3V0KGNvbmZpZywgc2NoZWR1bGVyQXJnKSB7XG4gICAgdmFyIF9hID0gKGlzVmFsaWREYXRlKGNvbmZpZykgPyB7IGZpcnN0OiBjb25maWcgfSA6IHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInID8geyBlYWNoOiBjb25maWcgfSA6IGNvbmZpZyksIGZpcnN0ID0gX2EuZmlyc3QsIGVhY2ggPSBfYS5lYWNoLCBfYiA9IF9hLndpdGgsIF93aXRoID0gX2IgPT09IHZvaWQgMCA/IHRpbWVvdXRFcnJvckZhY3RvcnkgOiBfYiwgX2MgPSBfYS5zY2hlZHVsZXIsIHNjaGVkdWxlciA9IF9jID09PSB2b2lkIDAgPyBzY2hlZHVsZXJBcmcgIT09IG51bGwgJiYgc2NoZWR1bGVyQXJnICE9PSB2b2lkIDAgPyBzY2hlZHVsZXJBcmcgOiBhc3luY1NjaGVkdWxlciA6IF9jLCBfZCA9IF9hLm1ldGEsIG1ldGEgPSBfZCA9PT0gdm9pZCAwID8gbnVsbCA6IF9kO1xuICAgIGlmIChmaXJzdCA9PSBudWxsICYmIGVhY2ggPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyB0aW1lb3V0IHByb3ZpZGVkLicpO1xuICAgIH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbFNvdXJjZVN1YnNjcmlwdGlvbjtcbiAgICAgICAgdmFyIHRpbWVyU3Vic2NyaXB0aW9uO1xuICAgICAgICB2YXIgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgdmFyIHNlZW4gPSAwO1xuICAgICAgICB2YXIgc3RhcnRUaW1lciA9IGZ1bmN0aW9uIChkZWxheSkge1xuICAgICAgICAgICAgdGltZXJTdWJzY3JpcHRpb24gPSBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxTb3VyY2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJGcm9tKF93aXRoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGE6IG1ldGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0VmFsdWU6IGxhc3RWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZW46IHNlZW4sXG4gICAgICAgICAgICAgICAgICAgIH0pKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgfTtcbiAgICAgICAgb3JpZ2luYWxTb3VyY2VTdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRpbWVyU3Vic2NyaXB0aW9uID09PSBudWxsIHx8IHRpbWVyU3Vic2NyaXB0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aW1lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgc2VlbisrO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KChsYXN0VmFsdWUgPSB2YWx1ZSkpO1xuICAgICAgICAgICAgZWFjaCA+IDAgJiYgc3RhcnRUaW1lcihlYWNoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghKHRpbWVyU3Vic2NyaXB0aW9uID09PSBudWxsIHx8IHRpbWVyU3Vic2NyaXB0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aW1lclN1YnNjcmlwdGlvbi5jbG9zZWQpKSB7XG4gICAgICAgICAgICAgICAgdGltZXJTdWJzY3JpcHRpb24gPT09IG51bGwgfHwgdGltZXJTdWJzY3JpcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRpbWVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICB9KSk7XG4gICAgICAgICFzZWVuICYmIHN0YXJ0VGltZXIoZmlyc3QgIT0gbnVsbCA/ICh0eXBlb2YgZmlyc3QgPT09ICdudW1iZXInID8gZmlyc3QgOiArZmlyc3QgLSBzY2hlZHVsZXIubm93KCkpIDogZWFjaCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiB0aW1lb3V0RXJyb3JGYWN0b3J5KGluZm8pIHtcbiAgICB0aHJvdyBuZXcgVGltZW91dEVycm9yKGluZm8pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dC5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCIuLi9vcGVyYXRvcnMvbWFwXCI7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBjYWxsT3JBcHBseShmbiwgYXJncykge1xuICAgIHJldHVybiBpc0FycmF5KGFyZ3MpID8gZm4uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSA6IGZuKGFyZ3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcE9uZU9yTWFueUFyZ3MoZm4pIHtcbiAgICByZXR1cm4gbWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBjYWxsT3JBcHBseShmbiwgYXJncyk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwT25lT3JNYW55QXJncy5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50LCBvbkJlZm9yZU5leHQsIGV4cGFuZCwgaW5uZXJTdWJTY2hlZHVsZXIsIGFkZGl0aW9uYWxGaW5hbGl6ZXIpIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgICAgICBvbkJlZm9yZU5leHQgPT09IG51bGwgfHwgb25CZWZvcmVOZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJlZm9yZU5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgb3V0ZXJOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lckNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaW5uZXJDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZFZhbHVlID0gYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWJTY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgaW5uZXJTdWJTY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsRmluYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZGRpdGlvbmFsRmluYWxpemVyKCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4vbWVyZ2VNYXAnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUFsbChjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICByZXR1cm4gbWVyZ2VNYXAoaWRlbnRpdHksIGNvbmN1cnJlbnQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VBbGwuanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VBbGwgfSBmcm9tICcuL21lcmdlQWxsJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRBbGwoKSB7XG4gICAgcmV0dXJuIG1lcmdlQWxsKDEpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0QWxsLmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdEFsbCB9IGZyb20gJy4uL29wZXJhdG9ycy9jb25jYXRBbGwnO1xuaW1wb3J0IHsgcG9wU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdEFsbCgpKGZyb20oYXJncywgcG9wU2NoZWR1bGVyKGFyZ3MpKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXQuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4uL29wZXJhdG9ycy9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBtYXBPbmVPck1hbnlBcmdzIH0gZnJvbSAnLi4vdXRpbC9tYXBPbmVPck1hbnlBcmdzJztcbnZhciBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyA9IFsnYWRkTGlzdGVuZXInLCAncmVtb3ZlTGlzdGVuZXInXTtcbnZhciBldmVudFRhcmdldE1ldGhvZHMgPSBbJ2FkZEV2ZW50TGlzdGVuZXInLCAncmVtb3ZlRXZlbnRMaXN0ZW5lciddO1xudmFyIGpxdWVyeU1ldGhvZHMgPSBbJ29uJywgJ29mZiddO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucywgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgICByZXN1bHRTZWxlY3RvciA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKS5waXBlKG1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKTtcbiAgICB9XG4gICAgdmFyIF9hID0gX19yZWFkKGlzRXZlbnRUYXJnZXQodGFyZ2V0KVxuICAgICAgICA/IGV2ZW50VGFyZ2V0TWV0aG9kcy5tYXAoZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTsgfTsgfSlcbiAgICAgICAgOlxuICAgICAgICAgICAgaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KVxuICAgICAgICAgICAgICAgID8gbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMubWFwKHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICA6IGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICA/IGpxdWVyeU1ldGhvZHMubWFwKHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgOiBbXSwgMiksIGFkZCA9IF9hWzBdLCByZW1vdmUgPSBfYVsxXTtcbiAgICBpZiAoIWFkZCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2UodGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChzdWJUYXJnZXQpIHsgcmV0dXJuIGZyb21FdmVudChzdWJUYXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucyk7IH0pKGlubmVyRnJvbSh0YXJnZXQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFkZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGV2ZW50IHRhcmdldCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5uZXh0KDEgPCBhcmdzLmxlbmd0aCA/IGFyZ3MgOiBhcmdzWzBdKTtcbiAgICAgICAgfTtcbiAgICAgICAgYWRkKGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKGhhbmRsZXIpOyB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyKTsgfTsgfTtcbn1cbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5hZGRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlTGlzdGVuZXIpO1xufVxuZnVuY3Rpb24gaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQub24pICYmIGlzRnVuY3Rpb24odGFyZ2V0Lm9mZik7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4uL29wZXJhdG9ycy9tZXJnZUFsbCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBFTVBUWSB9IGZyb20gJy4vZW1wdHknO1xuaW1wb3J0IHsgcG9wTnVtYmVyLCBwb3BTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2FyZ3MnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBwb3BTY2hlZHVsZXIoYXJncyk7XG4gICAgdmFyIGNvbmN1cnJlbnQgPSBwb3BOdW1iZXIoYXJncywgSW5maW5pdHkpO1xuICAgIHZhciBzb3VyY2VzID0gYXJncztcbiAgICByZXR1cm4gIXNvdXJjZXMubGVuZ3RoXG4gICAgICAgID9cbiAgICAgICAgICAgIEVNUFRZXG4gICAgICAgIDogc291cmNlcy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICBpbm5lckZyb20oc291cmNlc1swXSlcbiAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICBtZXJnZUFsbChjb25jdXJyZW50KShmcm9tKHNvdXJjZXMsIHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBzY2FuSW50ZXJuYWxzKGFjY3VtdWxhdG9yLCBzZWVkLCBoYXNTZWVkLCBlbWl0T25OZXh0LCBlbWl0QmVmb3JlQ29tcGxldGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFzU3RhdGUgPSBoYXNTZWVkO1xuICAgICAgICB2YXIgc3RhdGUgPSBzZWVkO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gaW5kZXgrKztcbiAgICAgICAgICAgIHN0YXRlID0gaGFzU3RhdGVcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yKHN0YXRlLCB2YWx1ZSwgaSlcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICgoaGFzU3RhdGUgPSB0cnVlKSwgdmFsdWUpO1xuICAgICAgICAgICAgZW1pdE9uTmV4dCAmJiBzdWJzY3JpYmVyLm5leHQoc3RhdGUpO1xuICAgICAgICB9LCBlbWl0QmVmb3JlQ29tcGxldGUgJiZcbiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGFzU3RhdGUgJiYgc3Vic2NyaWJlci5uZXh0KHN0YXRlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FuSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdFVudGlsQ2hhbmdlZChjb21wYXJhdG9yLCBrZXlTZWxlY3Rvcikge1xuICAgIGlmIChrZXlTZWxlY3RvciA9PT0gdm9pZCAwKSB7IGtleVNlbGVjdG9yID0gaWRlbnRpdHk7IH1cbiAgICBjb21wYXJhdG9yID0gY29tcGFyYXRvciAhPT0gbnVsbCAmJiBjb21wYXJhdG9yICE9PSB2b2lkIDAgPyBjb21wYXJhdG9yIDogZGVmYXVsdENvbXBhcmU7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgcHJldmlvdXNLZXk7XG4gICAgICAgIHZhciBmaXJzdCA9IHRydWU7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZmlyc3QgfHwgIWNvbXBhcmF0b3IocHJldmlvdXNLZXksIGN1cnJlbnRLZXkpKSB7XG4gICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c0tleSA9IGN1cnJlbnRLZXk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZGVmYXVsdENvbXBhcmUoYSwgYikge1xuICAgIHJldHVybiBhID09PSBiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3RVbnRpbENoYW5nZWQuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5leHBvcnQgZnVuY3Rpb24gZmluYWxpemUoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5hbGl6ZS5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IHNjYW5JbnRlcm5hbHMgfSBmcm9tICcuL3NjYW5JbnRlcm5hbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW4oYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShzY2FuSW50ZXJuYWxzKGFjY3VtdWxhdG9yLCBzZWVkLCBhcmd1bWVudHMubGVuZ3RoID49IDIsIHRydWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW4uanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbC9ub29wJztcbmV4cG9ydCBmdW5jdGlvbiBza2lwVW50aWwobm90aWZpZXIpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciB0YWtpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNraXBTdWJzY3JpYmVyID0gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNraXBTdWJzY3JpYmVyID09PSBudWxsIHx8IHNraXBTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBza2lwU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGFraW5nID0gdHJ1ZTtcbiAgICAgICAgfSwgbm9vcCk7XG4gICAgICAgIGlubmVyRnJvbShub3RpZmllcikuc3Vic2NyaWJlKHNraXBTdWJzY3JpYmVyKTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0YWtpbmcgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcFVudGlsLmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdCB9IGZyb20gJy4uL29ic2VydmFibGUvY29uY2F0JztcbmltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdpdGgoKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhbHVlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKHZhbHVlcyk7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAoc2NoZWR1bGVyID8gY29uY2F0KHZhbHVlcywgc291cmNlLCBzY2hlZHVsZXIpIDogY29uY2F0KHZhbHVlcywgc291cmNlKSkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhcnRXaXRoLmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNDb21wbGV0ZSAmJiAhaW5uZXJTdWJzY3JpYmVyICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpbm5lclN1YnNjcmliZXIgPT09IG51bGwgfHwgaW5uZXJTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbm5lclN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHZhciBpbm5lckluZGV4ID0gMDtcbiAgICAgICAgICAgIHZhciBvdXRlckluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBvdXRlckluZGV4KSkuc3Vic2NyaWJlKChpbm5lclN1YnNjcmliZXIgPSBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGlubmVyVmFsdWUpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dChyZXN1bHRTZWxlY3RvciA/IHJlc3VsdFNlbGVjdG9yKHZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KyspIDogaW5uZXJWYWx1ZSk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbm5lclN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXAuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbC9ub29wJztcbmV4cG9ydCBmdW5jdGlvbiB0YWtlVW50aWwobm90aWZpZXIpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlubmVyRnJvbShub3RpZmllcikuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0sIG5vb3ApKTtcbiAgICAgICAgIXN1YnNjcmliZXIuY2xvc2VkICYmIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlVW50aWwuanMubWFwIiwidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XG52YXIgX19nZXRPd25Qcm9wRGVzY3MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19zcHJlYWRWYWx1ZXMgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxuICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMoYikpIHtcbiAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcbiAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICAgIH1cbiAgcmV0dXJuIGE7XG59O1xudmFyIF9fc3ByZWFkUHJvcHMgPSAoYSwgYikgPT4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG52YXIgY3NzUHJlZml4ID0gXCJsa1wiO1xuXG4vLyBzcmMvdXRpbHMudHNcbmltcG9ydCB7IExvY2FsUGFydGljaXBhbnQsIFJlbW90ZVBhcnRpY2lwYW50IH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5cbi8vIHNyYy90cmFjay1yZWZlcmVuY2UvdHJhY2stcmVmZXJlbmNlLnR5cGVzLnRzXG5mdW5jdGlvbiBpc1RyYWNrUmVmZXJlbmNlKHRyYWNrUmVmZXJlbmNlKSB7XG4gIGlmICh0eXBlb2YgdHJhY2tSZWZlcmVuY2UgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGlzVHJhY2tSZWZlcmVuY2VTdWJzY3JpYmVkKHRyYWNrUmVmZXJlbmNlKSB8fCBpc1RyYWNrUmVmZXJlbmNlUHVibGlzaGVkKHRyYWNrUmVmZXJlbmNlKTtcbn1cbmZ1bmN0aW9uIGlzVHJhY2tSZWZlcmVuY2VTdWJzY3JpYmVkKHRyYWNrUmVmZXJlbmNlKSB7XG4gIHZhciBfYTtcbiAgaWYgKCF0cmFja1JlZmVyZW5jZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJhY2tSZWZlcmVuY2UuaGFzT3duUHJvcGVydHkoXCJwYXJ0aWNpcGFudFwiKSAmJiB0cmFja1JlZmVyZW5jZS5oYXNPd25Qcm9wZXJ0eShcInNvdXJjZVwiKSAmJiB0cmFja1JlZmVyZW5jZS5oYXNPd25Qcm9wZXJ0eShcInRyYWNrXCIpICYmIHR5cGVvZiAoKF9hID0gdHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24pID09IG51bGwgPyB2b2lkIDAgOiBfYS50cmFjaykgIT09IFwidW5kZWZpbmVkXCI7XG59XG5mdW5jdGlvbiBpc1RyYWNrUmVmZXJlbmNlUHVibGlzaGVkKHRyYWNrUmVmZXJlbmNlKSB7XG4gIGlmICghdHJhY2tSZWZlcmVuY2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRyYWNrUmVmZXJlbmNlLmhhc093blByb3BlcnR5KFwicGFydGljaXBhbnRcIikgJiYgdHJhY2tSZWZlcmVuY2UuaGFzT3duUHJvcGVydHkoXCJzb3VyY2VcIikgJiYgdHJhY2tSZWZlcmVuY2UuaGFzT3duUHJvcGVydHkoXCJwdWJsaWNhdGlvblwiKSAmJiB0eXBlb2YgdHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24gIT09IFwidW5kZWZpbmVkXCI7XG59XG5mdW5jdGlvbiBpc1RyYWNrUmVmZXJlbmNlUGxhY2Vob2xkZXIodHJhY2tSZWZlcmVuY2UpIHtcbiAgaWYgKCF0cmFja1JlZmVyZW5jZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJhY2tSZWZlcmVuY2UuaGFzT3duUHJvcGVydHkoXCJwYXJ0aWNpcGFudFwiKSAmJiB0cmFja1JlZmVyZW5jZS5oYXNPd25Qcm9wZXJ0eShcInNvdXJjZVwiKSAmJiB0eXBlb2YgdHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24gPT09IFwidW5kZWZpbmVkXCI7XG59XG5cbi8vIHNyYy90cmFjay1yZWZlcmVuY2UvdHJhY2stcmVmZXJlbmNlLnV0aWxzLnRzXG5mdW5jdGlvbiBnZXRUcmFja1JlZmVyZW5jZUlkKHRyYWNrUmVmZXJlbmNlKSB7XG4gIGlmICh0eXBlb2YgdHJhY2tSZWZlcmVuY2UgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHRyYWNrUmVmZXJlbmNlID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIGAke3RyYWNrUmVmZXJlbmNlfWA7XG4gIH0gZWxzZSBpZiAoaXNUcmFja1JlZmVyZW5jZVBsYWNlaG9sZGVyKHRyYWNrUmVmZXJlbmNlKSkge1xuICAgIHJldHVybiBgJHt0cmFja1JlZmVyZW5jZS5wYXJ0aWNpcGFudC5pZGVudGl0eX1fJHt0cmFja1JlZmVyZW5jZS5zb3VyY2V9X3BsYWNlaG9sZGVyYDtcbiAgfSBlbHNlIGlmIChpc1RyYWNrUmVmZXJlbmNlKHRyYWNrUmVmZXJlbmNlKSkge1xuICAgIHJldHVybiBgJHt0cmFja1JlZmVyZW5jZS5wYXJ0aWNpcGFudC5pZGVudGl0eX1fJHt0cmFja1JlZmVyZW5jZS5wdWJsaWNhdGlvbi5zb3VyY2V9XyR7dHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24udHJhY2tTaWR9YDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGdlbmVyYXRlIGEgaWQgZm9yIHRoZSBnaXZlbiB0cmFjayByZWZlcmVuY2U6ICR7dHJhY2tSZWZlcmVuY2V9YCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRyYWNrUmVmZXJlbmNlU291cmNlKHRyYWNrUmVmZXJlbmNlKSB7XG4gIGlmIChpc1RyYWNrUmVmZXJlbmNlKHRyYWNrUmVmZXJlbmNlKSkge1xuICAgIHJldHVybiB0cmFja1JlZmVyZW5jZS5wdWJsaWNhdGlvbi5zb3VyY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRyYWNrUmVmZXJlbmNlLnNvdXJjZTtcbiAgfVxufVxuZnVuY3Rpb24gaXNFcXVhbFRyYWNrUmVmKGEsIGIpIHtcbiAgaWYgKGEgPT09IHZvaWQgMCB8fCBiID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGlzVHJhY2tSZWZlcmVuY2UoYSkgJiYgaXNUcmFja1JlZmVyZW5jZShiKSkge1xuICAgIHJldHVybiBhLnB1YmxpY2F0aW9uLnRyYWNrU2lkID09PSBiLnB1YmxpY2F0aW9uLnRyYWNrU2lkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRUcmFja1JlZmVyZW5jZUlkKGEpID09PSBnZXRUcmFja1JlZmVyZW5jZUlkKGIpO1xuICB9XG59XG5mdW5jdGlvbiBpc1RyYWNrUmVmZXJlbmNlUGlubmVkKHRyYWNrUmVmZXJlbmNlLCBwaW5TdGF0ZSkge1xuICBpZiAodHlwZW9mIHBpblN0YXRlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChpc1RyYWNrUmVmZXJlbmNlKHRyYWNrUmVmZXJlbmNlKSkge1xuICAgIHJldHVybiBwaW5TdGF0ZS5zb21lKFxuICAgICAgKHBpbm5lZFRyYWNrUmVmZXJlbmNlKSA9PiBwaW5uZWRUcmFja1JlZmVyZW5jZS5wYXJ0aWNpcGFudC5pZGVudGl0eSA9PT0gdHJhY2tSZWZlcmVuY2UucGFydGljaXBhbnQuaWRlbnRpdHkgJiYgaXNUcmFja1JlZmVyZW5jZShwaW5uZWRUcmFja1JlZmVyZW5jZSkgJiYgcGlubmVkVHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24udHJhY2tTaWQgPT09IHRyYWNrUmVmZXJlbmNlLnB1YmxpY2F0aW9uLnRyYWNrU2lkXG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc1RyYWNrUmVmZXJlbmNlUGxhY2Vob2xkZXIodHJhY2tSZWZlcmVuY2UpKSB7XG4gICAgcmV0dXJuIHBpblN0YXRlLnNvbWUoXG4gICAgICAocGlubmVkVHJhY2tSZWZlcmVuY2UpID0+IHBpbm5lZFRyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50LmlkZW50aXR5ID09PSB0cmFja1JlZmVyZW5jZS5wYXJ0aWNpcGFudC5pZGVudGl0eSAmJiBpc1RyYWNrUmVmZXJlbmNlUGxhY2Vob2xkZXIocGlubmVkVHJhY2tSZWZlcmVuY2UpICYmIHBpbm5lZFRyYWNrUmVmZXJlbmNlLnNvdXJjZSA9PT0gdHJhY2tSZWZlcmVuY2Uuc291cmNlXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzUGxhY2Vob2xkZXJSZXBsYWNlbWVudChjdXJyZW50VHJhY2tSZWYsIG5leHRUcmFja1JlZikge1xuICByZXR1cm4gaXNUcmFja1JlZmVyZW5jZVBsYWNlaG9sZGVyKGN1cnJlbnRUcmFja1JlZikgJiYgaXNUcmFja1JlZmVyZW5jZShuZXh0VHJhY2tSZWYpICYmIG5leHRUcmFja1JlZi5wYXJ0aWNpcGFudC5pZGVudGl0eSA9PT0gY3VycmVudFRyYWNrUmVmLnBhcnRpY2lwYW50LmlkZW50aXR5ICYmIG5leHRUcmFja1JlZi5zb3VyY2UgPT09IGN1cnJlbnRUcmFja1JlZi5zb3VyY2U7XG59XG5cbi8vIHNyYy91dGlscy50c1xuZnVuY3Rpb24gaXNMb2NhbChwKSB7XG4gIHJldHVybiBwIGluc3RhbmNlb2YgTG9jYWxQYXJ0aWNpcGFudDtcbn1cbmZ1bmN0aW9uIGlzUmVtb3RlKHApIHtcbiAgcmV0dXJuIHAgaW5zdGFuY2VvZiBSZW1vdGVQYXJ0aWNpcGFudDtcbn1cbnZhciBhdHRhY2hJZlN1YnNjcmliZWQgPSAocHVibGljYXRpb24sIGVsZW1lbnQpID0+IHtcbiAgaWYgKCFwdWJsaWNhdGlvbikgcmV0dXJuO1xuICBjb25zdCB7IGlzU3Vic2NyaWJlZCwgdHJhY2sgfSA9IHB1YmxpY2F0aW9uO1xuICBpZiAoZWxlbWVudCAmJiB0cmFjaykge1xuICAgIGlmIChpc1N1YnNjcmliZWQpIHtcbiAgICAgIHRyYWNrLmF0dGFjaChlbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhY2suZGV0YWNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIGlzUGFydGljaXBhbnRUcmFja1JlZmVyZW5jZVBpbm5lZCh0cmFja1JlZiwgcGluU3RhdGUpIHtcbiAgaWYgKHBpblN0YXRlID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHBpblN0YXRlLnNvbWUoKHBpbm5lZFRyYWNrUmVmKSA9PiBpc0VxdWFsVHJhY2tSZWYocGlubmVkVHJhY2tSZWYsIHRyYWNrUmVmKSk7XG59XG5mdW5jdGlvbiBnZXRTY3JvbGxCYXJXaWR0aCgpIHtcbiAgY29uc3QgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgaW5uZXIuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgaW5uZXIuc3R5bGUuaGVpZ2h0ID0gXCIyMDBweFwiO1xuICBjb25zdCBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIG91dGVyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICBvdXRlci5zdHlsZS50b3AgPSBcIjBweFwiO1xuICBvdXRlci5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgb3V0ZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gIG91dGVyLnN0eWxlLndpZHRoID0gXCIyMDBweFwiO1xuICBvdXRlci5zdHlsZS5oZWlnaHQgPSBcIjE1MHB4XCI7XG4gIG91dGVyLnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgb3V0ZXIuYXBwZW5kQ2hpbGQoaW5uZXIpO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyKTtcbiAgY29uc3QgdzEgPSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgb3V0ZXIuc3R5bGUub3ZlcmZsb3cgPSBcInNjcm9sbFwiO1xuICBsZXQgdzIgPSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgaWYgKHcxID09PSB3Mikge1xuICAgIHcyID0gb3V0ZXIuY2xpZW50V2lkdGg7XG4gIH1cbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdXRlcik7XG4gIGNvbnN0IHNjcm9sbEJhcldpZHRoID0gdzEgLSB3MjtcbiAgcmV0dXJuIHNjcm9sbEJhcldpZHRoO1xufVxuXG4vLyBzcmMvaGVscGVyL2RldGVjdE1vYmlsZUJyb3dzZXIudHNcbmZ1bmN0aW9uIGlzV2ViKCkge1xuICByZXR1cm4gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNNb2JpbGVCcm93c2VyKCkge1xuICByZXR1cm4gaXNXZWIoKSA/IC9Nb2JpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgOiBmYWxzZTtcbn1cblxuLy8gc3JjL2hlbHBlci91cmwtcmVnZXgudHNcbmZ1bmN0aW9uIGNyZWF0ZVVybFJlZ0V4cChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBfX3NwcmVhZFZhbHVlcyh7fSwgb3B0aW9ucyk7XG4gIGNvbnN0IHByb3RvY29sID0gYCg/Oig/OlthLXpdKzopPy8vKT9gO1xuICBjb25zdCBhdXRoID0gXCIoPzpcXFxcUysoPzo6XFxcXFMqKT9AKT9cIjtcbiAgY29uc3QgaXAgPSBuZXcgUmVnRXhwKFxuICAgIFwiKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSl7M31cIixcbiAgICBcImdcIlxuICApLnNvdXJjZTtcbiAgY29uc3QgaG9zdCA9IFwiKD86KD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldWy1fXSopKlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSspXCI7XG4gIGNvbnN0IGRvbWFpbiA9IFwiKD86XFxcXC4oPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0tKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKykqXCI7XG4gIGNvbnN0IHRsZCA9IGAoPzpcXFxcLig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmXXsyLH0pKVxcXFwuP2A7XG4gIGNvbnN0IHBvcnQgPSBcIig/OjpcXFxcZHsyLDV9KT9cIjtcbiAgY29uc3QgcGF0aCA9ICcoPzpbLz8jXVteXFxcXHNcIl0qKT8nO1xuICBjb25zdCByZWdleDIgPSBgKD86JHtwcm90b2NvbH18d3d3XFxcXC4pJHthdXRofSg/OmxvY2FsaG9zdHwke2lwfXwke2hvc3R9JHtkb21haW59JHt0bGR9KSR7cG9ydH0ke3BhdGh9YDtcbiAgcmV0dXJuIG9wdGlvbnMuZXhhY3QgPyBuZXcgUmVnRXhwKGAoPzpeJHtyZWdleDJ9JClgLCBcImlcIikgOiBuZXcgUmVnRXhwKHJlZ2V4MiwgXCJpZ1wiKTtcbn1cblxuLy8gc3JjL2hlbHBlci9lbWFpbFJlZ2V4LnRzXG52YXIgcmVnZXggPSBcIlteXFxcXC5cXFxcc0A6XSg/OlteXFxcXHNAOl0qW15cXFxcc0A6XFxcXC5dKT9AW15cXFxcLlxcXFxzQF0rKD86XFxcXC5bXlxcXFwuXFxcXHNAXSspKlwiO1xuZnVuY3Rpb24gY3JlYXRlRW1haWxSZWdFeHAoeyBleGFjdCB9ID0ge30pIHtcbiAgcmV0dXJuIGV4YWN0ID8gbmV3IFJlZ0V4cChgXiR7cmVnZXh9JGApIDogbmV3IFJlZ0V4cChyZWdleCwgXCJnXCIpO1xufVxuXG4vLyBzcmMvaGVscGVyL2Zsb2F0aW5nLW1lbnUudHNcbmltcG9ydCB7IGNvbXB1dGVQb3NpdGlvbiwgZmxpcCwgb2Zmc2V0LCBzaGlmdCB9IGZyb20gXCJAZmxvYXRpbmctdWkvZG9tXCI7XG5mdW5jdGlvbiBjb21wdXRlTWVudVBvc2l0aW9uKGJ1dHRvbiwgbWVudSkge1xuICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IHsgeCwgeSB9ID0geWllbGQgY29tcHV0ZVBvc2l0aW9uKGJ1dHRvbiwgbWVudSwge1xuICAgICAgcGxhY2VtZW50OiBcInRvcFwiLFxuICAgICAgbWlkZGxld2FyZTogW29mZnNldCg2KSwgZmxpcCgpLCBzaGlmdCh7IHBhZGRpbmc6IDUgfSldXG4gICAgfSk7XG4gICAgcmV0dXJuIHsgeCwgeSB9O1xuICB9KTtcbn1cbmZ1bmN0aW9uIHdhc0NsaWNrT3V0c2lkZShpbnNpZGVFbGVtZW50LCBldmVudCkge1xuICBjb25zdCBpc091dHNpZGUgPSAhaW5zaWRlRWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpO1xuICByZXR1cm4gaXNPdXRzaWRlO1xufVxuXG4vLyBzcmMvaGVscGVyL3Rva2VuaXplci50c1xudmFyIGNyZWF0ZURlZmF1bHRHcmFtbWFyID0gKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGVtYWlsOiBjcmVhdGVFbWFpbFJlZ0V4cCgpLFxuICAgIHVybDogY3JlYXRlVXJsUmVnRXhwKHt9KVxuICB9O1xufTtcbmZ1bmN0aW9uIHRva2VuaXplKGlucHV0LCBncmFtbWFyKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBPYmplY3QuZW50cmllcyhncmFtbWFyKS5tYXAoXG4gICAgKFt0eXBlLCByeF0sIHdlaWdodCkgPT4gQXJyYXkuZnJvbShpbnB1dC5tYXRjaEFsbChyeCkpLm1hcCgoeyBpbmRleCwgMDogY29udGVudCB9KSA9PiAoe1xuICAgICAgdHlwZSxcbiAgICAgIHdlaWdodCxcbiAgICAgIGNvbnRlbnQsXG4gICAgICBpbmRleDogaW5kZXggIT0gbnVsbCA/IGluZGV4IDogMFxuICAgIH0pKVxuICApLmZsYXQoKS5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgZCA9IGEuaW5kZXggLSBiLmluZGV4O1xuICAgIHJldHVybiBkICE9PSAwID8gZCA6IGEud2VpZ2h0IC0gYi53ZWlnaHQ7XG4gIH0pLmZpbHRlcigoeyBpbmRleCB9LCBpLCBhcnIpID0+IHtcbiAgICBpZiAoaSA9PT0gMCkgcmV0dXJuIHRydWU7XG4gICAgY29uc3QgcHJldiA9IGFycltpIC0gMV07XG4gICAgcmV0dXJuIHByZXYuaW5kZXggKyBwcmV2LmNvbnRlbnQubGVuZ3RoIDw9IGluZGV4O1xuICB9KTtcbiAgY29uc3QgdG9rZW5zID0gW107XG4gIGxldCBwb3MgPSAwO1xuICBmb3IgKGNvbnN0IHsgdHlwZSwgY29udGVudCwgaW5kZXggfSBvZiBtYXRjaGVzKSB7XG4gICAgaWYgKGluZGV4ID4gcG9zKSB0b2tlbnMucHVzaChpbnB1dC5zdWJzdHJpbmcocG9zLCBpbmRleCkpO1xuICAgIHRva2Vucy5wdXNoKHsgdHlwZSwgY29udGVudCB9KTtcbiAgICBwb3MgPSBpbmRleCArIGNvbnRlbnQubGVuZ3RoO1xuICB9XG4gIGlmIChpbnB1dC5sZW5ndGggPiBwb3MpIHRva2Vucy5wdXNoKGlucHV0LnN1YnN0cmluZyhwb3MpKTtcbiAgcmV0dXJuIHRva2Vucztcbn1cblxuLy8gc3JjL2hlbHBlci9ldmVudEdyb3Vwcy50c1xuaW1wb3J0IHsgUGFydGljaXBhbnRFdmVudCwgUm9vbUV2ZW50IH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG52YXIgYWxsUmVtb3RlUGFydGljaXBhbnRSb29tRXZlbnRzID0gW1xuICBSb29tRXZlbnQuQ29ubmVjdGlvblN0YXRlQ2hhbmdlZCxcbiAgUm9vbUV2ZW50LlJvb21NZXRhZGF0YUNoYW5nZWQsXG4gIFJvb21FdmVudC5BY3RpdmVTcGVha2Vyc0NoYW5nZWQsXG4gIFJvb21FdmVudC5Db25uZWN0aW9uUXVhbGl0eUNoYW5nZWQsXG4gIFJvb21FdmVudC5QYXJ0aWNpcGFudENvbm5lY3RlZCxcbiAgUm9vbUV2ZW50LlBhcnRpY2lwYW50RGlzY29ubmVjdGVkLFxuICBSb29tRXZlbnQuUGFydGljaXBhbnRQZXJtaXNzaW9uc0NoYW5nZWQsXG4gIFJvb21FdmVudC5QYXJ0aWNpcGFudE1ldGFkYXRhQ2hhbmdlZCxcbiAgUm9vbUV2ZW50LlBhcnRpY2lwYW50TmFtZUNoYW5nZWQsXG4gIFJvb21FdmVudC5QYXJ0aWNpcGFudEF0dHJpYnV0ZXNDaGFuZ2VkLFxuICBSb29tRXZlbnQuVHJhY2tNdXRlZCxcbiAgUm9vbUV2ZW50LlRyYWNrVW5tdXRlZCxcbiAgUm9vbUV2ZW50LlRyYWNrUHVibGlzaGVkLFxuICBSb29tRXZlbnQuVHJhY2tVbnB1Ymxpc2hlZCxcbiAgUm9vbUV2ZW50LlRyYWNrU3RyZWFtU3RhdGVDaGFuZ2VkLFxuICBSb29tRXZlbnQuVHJhY2tTdWJzY3JpcHRpb25GYWlsZWQsXG4gIFJvb21FdmVudC5UcmFja1N1YnNjcmlwdGlvblBlcm1pc3Npb25DaGFuZ2VkLFxuICBSb29tRXZlbnQuVHJhY2tTdWJzY3JpcHRpb25TdGF0dXNDaGFuZ2VkXG5dO1xudmFyIGFsbFBhcnRpY2lwYW50Um9vbUV2ZW50cyA9IFtcbiAgLi4uYWxsUmVtb3RlUGFydGljaXBhbnRSb29tRXZlbnRzLFxuICBSb29tRXZlbnQuTG9jYWxUcmFja1B1Ymxpc2hlZCxcbiAgUm9vbUV2ZW50LkxvY2FsVHJhY2tVbnB1Ymxpc2hlZFxuXTtcbnZhciBwYXJ0aWNpcGFudFRyYWNrRXZlbnRzID0gW1xuICBQYXJ0aWNpcGFudEV2ZW50LlRyYWNrUHVibGlzaGVkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlRyYWNrVW5wdWJsaXNoZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tNdXRlZCxcbiAgUGFydGljaXBhbnRFdmVudC5UcmFja1VubXV0ZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tTdHJlYW1TdGF0ZUNoYW5nZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tTdWJzY3JpYmVkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlRyYWNrVW5zdWJzY3JpYmVkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlRyYWNrU3Vic2NyaXB0aW9uUGVybWlzc2lvbkNoYW5nZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tTdWJzY3JpcHRpb25GYWlsZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuTG9jYWxUcmFja1B1Ymxpc2hlZCxcbiAgUGFydGljaXBhbnRFdmVudC5Mb2NhbFRyYWNrVW5wdWJsaXNoZWRcbl07XG52YXIgYWxsUmVtb3RlUGFydGljaXBhbnRFdmVudHMgPSBbXG4gIFBhcnRpY2lwYW50RXZlbnQuQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkLFxuICBQYXJ0aWNpcGFudEV2ZW50LklzU3BlYWtpbmdDaGFuZ2VkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlBhcnRpY2lwYW50TWV0YWRhdGFDaGFuZ2VkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlBhcnRpY2lwYW50UGVybWlzc2lvbnNDaGFuZ2VkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlRyYWNrTXV0ZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tVbm11dGVkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlRyYWNrUHVibGlzaGVkLFxuICBQYXJ0aWNpcGFudEV2ZW50LlRyYWNrVW5wdWJsaXNoZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tTdHJlYW1TdGF0ZUNoYW5nZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tTdWJzY3JpcHRpb25GYWlsZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuVHJhY2tTdWJzY3JpcHRpb25QZXJtaXNzaW9uQ2hhbmdlZCxcbiAgUGFydGljaXBhbnRFdmVudC5UcmFja1N1YnNjcmlwdGlvblN0YXR1c0NoYW5nZWRcbl07XG52YXIgYWxsUGFydGljaXBhbnRFdmVudHMgPSBbXG4gIC4uLmFsbFJlbW90ZVBhcnRpY2lwYW50RXZlbnRzLFxuICBQYXJ0aWNpcGFudEV2ZW50LkxvY2FsVHJhY2tQdWJsaXNoZWQsXG4gIFBhcnRpY2lwYW50RXZlbnQuTG9jYWxUcmFja1VucHVibGlzaGVkXG5dO1xuXG4vLyBzcmMvbG9nZ2VyLnRzXG5pbXBvcnQge1xuICBzZXRMb2dMZXZlbCBhcyBzZXRDbGllbnRTZGtMb2dMZXZlbCxcbiAgc2V0TG9nRXh0ZW5zaW9uIGFzIHNldENsaWVudFNka0xvZ0V4dGVuc2lvbixcbiAgTG9nTGV2ZWwgYXMgTG9nTGV2ZWxFbnVtXG59IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuaW1wb3J0IGxvZ2xldmVsIGZyb20gXCJsb2dsZXZlbFwiO1xudmFyIGxvZyA9IGxvZ2xldmVsLmdldExvZ2dlcihcImxrLWNvbXBvbmVudHMtanNcIik7XG5sb2cuc2V0RGVmYXVsdExldmVsKFwiV0FSTlwiKTtcbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsLCBvcHRpb25zID0ge30pIHtcbiAgdmFyIF9hO1xuICBsb2cuc2V0TGV2ZWwobGV2ZWwpO1xuICBzZXRDbGllbnRTZGtMb2dMZXZlbCgoX2EgPSBvcHRpb25zLmxpdmVLaXRDbGllbnRMb2dMZXZlbCkgIT0gbnVsbCA/IF9hIDogbGV2ZWwpO1xufVxuZnVuY3Rpb24gc2V0TG9nRXh0ZW5zaW9uKGV4dGVuc2lvbiwgb3B0aW9ucyA9IHt9KSB7XG4gIHZhciBfYTtcbiAgY29uc3Qgb3JpZ2luYWxGYWN0b3J5ID0gbG9nLm1ldGhvZEZhY3Rvcnk7XG4gIGxvZy5tZXRob2RGYWN0b3J5ID0gKG1ldGhvZE5hbWUsIGNvbmZpZ0xldmVsLCBsb2dnZXJOYW1lKSA9PiB7XG4gICAgY29uc3QgcmF3TWV0aG9kID0gb3JpZ2luYWxGYWN0b3J5KG1ldGhvZE5hbWUsIGNvbmZpZ0xldmVsLCBsb2dnZXJOYW1lKTtcbiAgICBjb25zdCBsb2dMZXZlbCA9IExvZ0xldmVsRW51bVttZXRob2ROYW1lXTtcbiAgICBjb25zdCBuZWVkTG9nID0gbG9nTGV2ZWwgPj0gY29uZmlnTGV2ZWwgJiYgbG9nTGV2ZWwgPCBMb2dMZXZlbEVudW0uc2lsZW50O1xuICAgIHJldHVybiAobXNnLCBjb250ZXh0KSA9PiB7XG4gICAgICBpZiAoY29udGV4dCkgcmF3TWV0aG9kKG1zZywgY29udGV4dCk7XG4gICAgICBlbHNlIHJhd01ldGhvZChtc2cpO1xuICAgICAgaWYgKG5lZWRMb2cpIHtcbiAgICAgICAgZXh0ZW5zaW9uKGxvZ0xldmVsLCBtc2csIGNvbnRleHQpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIGxvZy5zZXRMZXZlbChsb2cuZ2V0TGV2ZWwoKSk7XG4gIHNldENsaWVudFNka0xvZ0V4dGVuc2lvbigoX2EgPSBvcHRpb25zLmxpdmVLaXRDbGllbnRMb2dFeHRlbnNpb24pICE9IG51bGwgPyBfYSA6IGV4dGVuc2lvbik7XG59XG5cbi8vIHNyYy9oZWxwZXIvZ3JpZC1sYXlvdXRzLnRzXG52YXIgR1JJRF9MQVlPVVRTID0gW1xuICB7XG4gICAgY29sdW1uczogMSxcbiAgICByb3dzOiAxXG4gIH0sXG4gIHtcbiAgICBjb2x1bW5zOiAxLFxuICAgIHJvd3M6IDIsXG4gICAgb3JpZW50YXRpb246IFwicG9ydHJhaXRcIlxuICB9LFxuICB7XG4gICAgY29sdW1uczogMixcbiAgICByb3dzOiAxLFxuICAgIG9yaWVudGF0aW9uOiBcImxhbmRzY2FwZVwiXG4gIH0sXG4gIHtcbiAgICBjb2x1bW5zOiAyLFxuICAgIHJvd3M6IDIsXG4gICAgbWluV2lkdGg6IDU2MFxuICB9LFxuICB7XG4gICAgY29sdW1uczogMyxcbiAgICByb3dzOiAzLFxuICAgIG1pbldpZHRoOiA3MDBcbiAgfSxcbiAge1xuICAgIGNvbHVtbnM6IDQsXG4gICAgcm93czogNCxcbiAgICBtaW5XaWR0aDogOTYwXG4gIH0sXG4gIHtcbiAgICBjb2x1bW5zOiA1LFxuICAgIHJvd3M6IDUsXG4gICAgbWluV2lkdGg6IDExMDBcbiAgfVxuXTtcbmZ1bmN0aW9uIHNlbGVjdEdyaWRMYXlvdXQobGF5b3V0RGVmaW5pdGlvbnMsIHBhcnRpY2lwYW50Q291bnQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgaWYgKGxheW91dERlZmluaXRpb25zLmxlbmd0aCA8IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdCBsZWFzdCBvbmUgZ3JpZCBsYXlvdXQgZGVmaW5pdGlvbiBtdXN0IGJlIHByb3ZpZGVkLlwiKTtcbiAgfVxuICBjb25zdCBsYXlvdXRzID0gZXhwYW5kQW5kU29ydExheW91dERlZmluaXRpb25zKGxheW91dERlZmluaXRpb25zKTtcbiAgaWYgKHdpZHRoIDw9IDAgfHwgaGVpZ2h0IDw9IDApIHtcbiAgICByZXR1cm4gbGF5b3V0c1swXTtcbiAgfVxuICBsZXQgY3VycmVudExheW91dEluZGV4ID0gMDtcbiAgY29uc3QgY29udGFpbmVyT3JpZW50YXRpb24gPSB3aWR0aCAvIGhlaWdodCA+IDEgPyBcImxhbmRzY2FwZVwiIDogXCJwb3J0cmFpdFwiO1xuICBsZXQgbGF5b3V0ID0gbGF5b3V0cy5maW5kKChsYXlvdXRfLCBpbmRleCwgYWxsTGF5b3V0cykgPT4ge1xuICAgIGN1cnJlbnRMYXlvdXRJbmRleCA9IGluZGV4O1xuICAgIGNvbnN0IGlzQmlnZ2VyTGF5b3V0QXZhaWxhYmxlID0gYWxsTGF5b3V0cy5maW5kSW5kZXgoKGwsIGkpID0+IHtcbiAgICAgIGNvbnN0IGZpdHNPcmllbnRhdGlvbiA9ICFsLm9yaWVudGF0aW9uIHx8IGwub3JpZW50YXRpb24gPT09IGNvbnRhaW5lck9yaWVudGF0aW9uO1xuICAgICAgY29uc3QgbGF5b3V0SXNCaWdnZXJUaGFuQ3VycmVudCA9IGkgPiBpbmRleDtcbiAgICAgIGNvbnN0IGxheW91dEZpdHNTYW1lQW1vdW50T2ZQYXJ0aWNpcGFudHMgPSBsLm1heFRpbGVzID09PSBsYXlvdXRfLm1heFRpbGVzO1xuICAgICAgcmV0dXJuIGxheW91dElzQmlnZ2VyVGhhbkN1cnJlbnQgJiYgbGF5b3V0Rml0c1NhbWVBbW91bnRPZlBhcnRpY2lwYW50cyAmJiBmaXRzT3JpZW50YXRpb247XG4gICAgfSkgIT09IC0xO1xuICAgIHJldHVybiBsYXlvdXRfLm1heFRpbGVzID49IHBhcnRpY2lwYW50Q291bnQgJiYgIWlzQmlnZ2VyTGF5b3V0QXZhaWxhYmxlO1xuICB9KTtcbiAgaWYgKGxheW91dCA9PT0gdm9pZCAwKSB7XG4gICAgbGF5b3V0ID0gbGF5b3V0c1tsYXlvdXRzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXlvdXQpIHtcbiAgICAgIGxvZy53YXJuKFxuICAgICAgICBgTm8gbGF5b3V0IGZvdW5kIGZvcjogcGFydGljaXBhbnRDb3VudDogJHtwYXJ0aWNpcGFudENvdW50fSwgd2lkdGgvaGVpZ2h0OiAke3dpZHRofS8ke2hlaWdodH0gZmFsbGJhY2sgdG8gYmlnZ2VzdCBhdmFpbGFibGUgbGF5b3V0ICgke2xheW91dH0pLmBcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gbGF5b3V0IG9yIGZhbGxiYWNrIGxheW91dCBmb3VuZC5gKTtcbiAgICB9XG4gIH1cbiAgaWYgKHdpZHRoIDwgbGF5b3V0Lm1pbldpZHRoIHx8IGhlaWdodCA8IGxheW91dC5taW5IZWlnaHQpIHtcbiAgICBpZiAoY3VycmVudExheW91dEluZGV4ID4gMCkge1xuICAgICAgY29uc3Qgc21hbGxlckxheW91dCA9IGxheW91dHNbY3VycmVudExheW91dEluZGV4IC0gMV07XG4gICAgICBsYXlvdXQgPSBzZWxlY3RHcmlkTGF5b3V0KFxuICAgICAgICBsYXlvdXRzLnNsaWNlKDAsIGN1cnJlbnRMYXlvdXRJbmRleCksXG4gICAgICAgIHNtYWxsZXJMYXlvdXQubWF4VGlsZXMsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBsYXlvdXQ7XG59XG5mdW5jdGlvbiBleHBhbmRBbmRTb3J0TGF5b3V0RGVmaW5pdGlvbnMobGF5b3V0cykge1xuICByZXR1cm4gWy4uLmxheW91dHNdLm1hcCgobGF5b3V0KSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogYCR7bGF5b3V0LmNvbHVtbnN9eCR7bGF5b3V0LnJvd3N9YCxcbiAgICAgIGNvbHVtbnM6IGxheW91dC5jb2x1bW5zLFxuICAgICAgcm93czogbGF5b3V0LnJvd3MsXG4gICAgICBtYXhUaWxlczogbGF5b3V0LmNvbHVtbnMgKiBsYXlvdXQucm93cyxcbiAgICAgIG1pbldpZHRoOiAoX2EgPSBsYXlvdXQubWluV2lkdGgpICE9IG51bGwgPyBfYSA6IDAsXG4gICAgICBtaW5IZWlnaHQ6IChfYiA9IGxheW91dC5taW5IZWlnaHQpICE9IG51bGwgPyBfYiA6IDAsXG4gICAgICBvcmllbnRhdGlvbjogbGF5b3V0Lm9yaWVudGF0aW9uXG4gICAgfTtcbiAgfSkuc29ydCgoYSwgYikgPT4ge1xuICAgIGlmIChhLm1heFRpbGVzICE9PSBiLm1heFRpbGVzKSB7XG4gICAgICByZXR1cm4gYS5tYXhUaWxlcyAtIGIubWF4VGlsZXM7XG4gICAgfSBlbHNlIGlmIChhLm1pbldpZHRoICE9PSAwIHx8IGIubWluV2lkdGggIT09IDApIHtcbiAgICAgIHJldHVybiBhLm1pbldpZHRoIC0gYi5taW5XaWR0aDtcbiAgICB9IGVsc2UgaWYgKGEubWluSGVpZ2h0ICE9PSAwIHx8IGIubWluSGVpZ2h0ICE9PSAwKSB7XG4gICAgICByZXR1cm4gYS5taW5IZWlnaHQgLSBiLm1pbkhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gc3JjL2hlbHBlci9zZXQtaGVscGVyLnRzXG5mdW5jdGlvbiBzZXREaWZmZXJlbmNlKHNldEEsIHNldEIpIHtcbiAgY29uc3QgX2RpZmZlcmVuY2UgPSBuZXcgU2V0KHNldEEpO1xuICBmb3IgKGNvbnN0IGVsZW0gb2Ygc2V0Qikge1xuICAgIF9kaWZmZXJlbmNlLmRlbGV0ZShlbGVtKTtcbiAgfVxuICByZXR1cm4gX2RpZmZlcmVuY2U7XG59XG5cbi8vIHNyYy9oZWxwZXIvZmVhdHVyZURldGVjdGlvbi50c1xuZnVuY3Rpb24gc3VwcG9ydHNTY3JlZW5TaGFyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmICEhbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWE7XG59XG5cbi8vIHNyYy9oZWxwZXIvdHJhbnNjcmlwdGlvbnMudHNcbmZ1bmN0aW9uIGdldEFjdGl2ZVRyYW5zY3JpcHRpb25TZWdtZW50cyhzZWdtZW50cywgc3luY1RpbWVzLCBtYXhBZ2UgPSAwKSB7XG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIoKHNlZ21lbnQpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgaGFzVHJhY2tTeW5jID0gISFzeW5jVGltZXMucnRwVGltZXN0YW1wO1xuICAgIGNvbnN0IGN1cnJlbnRUcmFja1RpbWUgPSAoX2EgPSBzeW5jVGltZXMucnRwVGltZXN0YW1wKSAhPSBudWxsID8gX2EgOiBwZXJmb3JtYW5jZS50aW1lT3JpZ2luICsgcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgZGlzcGxheVN0YXJ0VGltZSA9IGhhc1RyYWNrU3luYyA/IE1hdGgubWF4KHNlZ21lbnQucmVjZWl2ZWRBdE1lZGlhVGltZXN0YW1wLCBzZWdtZW50LnN0YXJ0VGltZSkgOiBzZWdtZW50LnJlY2VpdmVkQXQ7XG4gICAgY29uc3Qgc2VnbWVudER1cmF0aW9uID0gbWF4QWdlICsgc2VnbWVudC5lbmRUaW1lIC0gc2VnbWVudC5zdGFydFRpbWU7XG4gICAgcmV0dXJuIGN1cnJlbnRUcmFja1RpbWUgPj0gZGlzcGxheVN0YXJ0VGltZSAmJiBjdXJyZW50VHJhY2tUaW1lIDw9IGRpc3BsYXlTdGFydFRpbWUgKyBzZWdtZW50RHVyYXRpb247XG4gIH0pO1xufVxuZnVuY3Rpb24gYWRkTWVkaWFUaW1lc3RhbXBUb1RyYW5zY3JpcHRpb24oc2VnbWVudCwgdGltZXN0YW1wcykge1xuICB2YXIgX2E7XG4gIHJldHVybiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBzZWdtZW50KSwge1xuICAgIHJlY2VpdmVkQXRNZWRpYVRpbWVzdGFtcDogKF9hID0gdGltZXN0YW1wcy5ydHBUaW1lc3RhbXApICE9IG51bGwgPyBfYSA6IDAsXG4gICAgcmVjZWl2ZWRBdDogdGltZXN0YW1wcy50aW1lc3RhbXBcbiAgfSk7XG59XG5mdW5jdGlvbiBkZWR1cGVTZWdtZW50cyhwcmV2U2VnbWVudHMsIG5ld1NlZ21lbnRzLCB3aW5kb3dTaXplKSB7XG4gIHJldHVybiBbLi4ucHJldlNlZ21lbnRzLCAuLi5uZXdTZWdtZW50c10ucmVkdWNlUmlnaHQoKGFjYywgc2VnbWVudCkgPT4ge1xuICAgIGlmICghYWNjLmZpbmQoKHZhbCkgPT4gdmFsLmlkID09PSBzZWdtZW50LmlkKSkge1xuICAgICAgYWNjLnVuc2hpZnQoc2VnbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKS5zbGljZSgwIC0gd2luZG93U2l6ZSk7XG59XG5mdW5jdGlvbiBkaWRBY3RpdmVTZWdtZW50c0NoYW5nZShwcmV2QWN0aXZlLCBuZXdBY3RpdmUpIHtcbiAgaWYgKG5ld0FjdGl2ZS5sZW5ndGggIT09IHByZXZBY3RpdmUubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuICFuZXdBY3RpdmUuZXZlcnkoKG5ld1NlZ21lbnQpID0+IHtcbiAgICByZXR1cm4gcHJldkFjdGl2ZS5maW5kKFxuICAgICAgKHByZXZTZWdtZW50KSA9PiBwcmV2U2VnbWVudC5pZCA9PT0gbmV3U2VnbWVudC5pZCAmJiBwcmV2U2VnbWVudC50ZXh0ID09PSBuZXdTZWdtZW50LnRleHQgJiYgcHJldlNlZ21lbnQuZmluYWwgPT09IG5ld1NlZ21lbnQuZmluYWwgJiYgcHJldlNlZ21lbnQubGFuZ3VhZ2UgPT09IG5ld1NlZ21lbnQubGFuZ3VhZ2UgJiYgcHJldlNlZ21lbnQuc3RhcnRUaW1lID09PSBuZXdTZWdtZW50LnN0YXJ0VGltZSAmJiBwcmV2U2VnbWVudC5lbmRUaW1lID09PSBuZXdTZWdtZW50LmVuZFRpbWVcbiAgICApO1xuICB9KTtcbn1cblxuLy8gc3JjL3R5cGVzLnRzXG52YXIgUElOX0RFRkFVTFRfU1RBVEUgPSBbXTtcbnZhciBXSURHRVRfREVGQVVMVF9TVEFURSA9IHtcbiAgc2hvd0NoYXQ6IGZhbHNlLFxuICB1bnJlYWRNZXNzYWdlczogMCxcbiAgc2hvd1NldHRpbmdzOiBmYWxzZVxufTtcbmZ1bmN0aW9uIGlzU291cmNlV2l0T3B0aW9ucyhzb3VyY2UpIHtcbiAgcmV0dXJuIHR5cGVvZiBzb3VyY2UgPT09IFwib2JqZWN0XCI7XG59XG5mdW5jdGlvbiBpc1NvdXJjZXNXaXRoT3B0aW9ucyhzb3VyY2VzKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHNvdXJjZXMpICYmIHNvdXJjZXMuZmlsdGVyKGlzU291cmNlV2l0T3B0aW9ucykubGVuZ3RoID4gMDtcbn1cblxuLy8gc3JjL3NvcnRpbmcvc29ydC10cmFjay1idW5kbGVzLnRzXG5pbXBvcnQgeyBUcmFjayBhcyBUcmFjazIgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcblxuLy8gc3JjL3NvcnRpbmcvYmFzZS1zb3J0LWZ1bmN0aW9ucy50c1xuaW1wb3J0IHsgVHJhY2sgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmZ1bmN0aW9uIHNvcnRQYXJ0aWNpcGFudHNCeUF1ZGlvTGV2ZWwoYSwgYikge1xuICByZXR1cm4gYi5hdWRpb0xldmVsIC0gYS5hdWRpb0xldmVsO1xufVxuZnVuY3Rpb24gc29ydFBhcnRpY2lwYW50c0J5SXNTcGVha2luZyhhLCBiKSB7XG4gIGlmIChhLmlzU3BlYWtpbmcgPT09IGIuaXNTcGVha2luZykge1xuICAgIHJldHVybiAwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhLmlzU3BlYWtpbmcgPyAtMSA6IDE7XG4gIH1cbn1cbmZ1bmN0aW9uIHNvcnRQYXJ0aWNpcGFudHNCeUxhc3RTcG9rZW5BVChhLCBiKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgaWYgKGEubGFzdFNwb2tlQXQgIT09IHZvaWQgMCB8fCBiLmxhc3RTcG9rZUF0ICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gKChfYiA9IChfYSA9IGIubGFzdFNwb2tlQXQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5nZXRUaW1lKCkpICE9IG51bGwgPyBfYiA6IDApIC0gKChfZCA9IChfYyA9IGEubGFzdFNwb2tlQXQpID09IG51bGwgPyB2b2lkIDAgOiBfYy5nZXRUaW1lKCkpICE9IG51bGwgPyBfZCA6IDApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5mdW5jdGlvbiBzb3J0UGFydGljaXBhbnRzQnlKb2luZWRBdChhLCBiKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgcmV0dXJuICgoX2IgPSAoX2EgPSBhLmpvaW5lZEF0KSA9PSBudWxsID8gdm9pZCAwIDogX2EuZ2V0VGltZSgpKSAhPSBudWxsID8gX2IgOiAwKSAtICgoX2QgPSAoX2MgPSBiLmpvaW5lZEF0KSA9PSBudWxsID8gdm9pZCAwIDogX2MuZ2V0VGltZSgpKSAhPSBudWxsID8gX2QgOiAwKTtcbn1cbmZ1bmN0aW9uIHNvcnRUcmFja1JlZmVyZW5jZXNCeVR5cGUoYSwgYikge1xuICBpZiAoaXNUcmFja1JlZmVyZW5jZShhKSkge1xuICAgIGlmIChpc1RyYWNrUmVmZXJlbmNlKGIpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1RyYWNrUmVmZXJlbmNlKGIpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cbmZ1bmN0aW9uIHNvcnRUcmFja1JlZnNCeUlzQ2FtZXJhRW5hYmxlZChhLCBiKSB7XG4gIGNvbnN0IGFWaWRlbyA9IGEucGFydGljaXBhbnQuaXNDYW1lcmFFbmFibGVkO1xuICBjb25zdCBiVmlkZW8gPSBiLnBhcnRpY2lwYW50LmlzQ2FtZXJhRW5hYmxlZDtcbiAgaWYgKGFWaWRlbyAhPT0gYlZpZGVvKSB7XG4gICAgaWYgKGFWaWRlbykge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuLy8gc3JjL3NvcnRpbmcvc29ydC10cmFjay1idW5kbGVzLnRzXG5mdW5jdGlvbiBzb3J0VHJhY2tSZWZlcmVuY2VzKHRyYWNrcykge1xuICBjb25zdCBsb2NhbFRyYWNrcyA9IFtdO1xuICBjb25zdCBzY3JlZW5TaGFyZVRyYWNrcyA9IFtdO1xuICBjb25zdCBjYW1lcmFUcmFja3MgPSBbXTtcbiAgY29uc3QgdW5kZWZpbmVkVHJhY2tzID0gW107XG4gIHRyYWNrcy5mb3JFYWNoKCh0cmFja1JlZikgPT4ge1xuICAgIGlmICh0cmFja1JlZi5wYXJ0aWNpcGFudC5pc0xvY2FsICYmIHRyYWNrUmVmLnNvdXJjZSA9PT0gVHJhY2syLlNvdXJjZS5DYW1lcmEpIHtcbiAgICAgIGxvY2FsVHJhY2tzLnB1c2godHJhY2tSZWYpO1xuICAgIH0gZWxzZSBpZiAodHJhY2tSZWYuc291cmNlID09PSBUcmFjazIuU291cmNlLlNjcmVlblNoYXJlKSB7XG4gICAgICBzY3JlZW5TaGFyZVRyYWNrcy5wdXNoKHRyYWNrUmVmKTtcbiAgICB9IGVsc2UgaWYgKHRyYWNrUmVmLnNvdXJjZSA9PT0gVHJhY2syLlNvdXJjZS5DYW1lcmEpIHtcbiAgICAgIGNhbWVyYVRyYWNrcy5wdXNoKHRyYWNrUmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdW5kZWZpbmVkVHJhY2tzLnB1c2godHJhY2tSZWYpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNvcnRlZFNjcmVlblNoYXJlVHJhY2tzID0gc29ydFNjcmVlblNoYXJlVHJhY2tzKHNjcmVlblNoYXJlVHJhY2tzKTtcbiAgY29uc3Qgc29ydGVkQ2FtZXJhVHJhY2tzID0gc29ydENhbWVyYVRyYWNrcyhjYW1lcmFUcmFja3MpO1xuICByZXR1cm4gWy4uLmxvY2FsVHJhY2tzLCAuLi5zb3J0ZWRTY3JlZW5TaGFyZVRyYWNrcywgLi4uc29ydGVkQ2FtZXJhVHJhY2tzLCAuLi51bmRlZmluZWRUcmFja3NdO1xufVxuZnVuY3Rpb24gc29ydFNjcmVlblNoYXJlVHJhY2tzKHNjcmVlblNoYXJlVHJhY2tzKSB7XG4gIGNvbnN0IGxvY2FsU2NyZWVuU2hhcmVzID0gW107XG4gIGNvbnN0IHJlbW90ZVNjcmVlblNoYXJlcyA9IFtdO1xuICBzY3JlZW5TaGFyZVRyYWNrcy5mb3JFYWNoKCh0cmFja1JlZikgPT4ge1xuICAgIGlmICh0cmFja1JlZi5wYXJ0aWNpcGFudC5pc0xvY2FsKSB7XG4gICAgICBsb2NhbFNjcmVlblNoYXJlcy5wdXNoKHRyYWNrUmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3RlU2NyZWVuU2hhcmVzLnB1c2godHJhY2tSZWYpO1xuICAgIH1cbiAgfSk7XG4gIGxvY2FsU2NyZWVuU2hhcmVzLnNvcnQoKGEsIGIpID0+IHNvcnRQYXJ0aWNpcGFudHNCeUpvaW5lZEF0KGEucGFydGljaXBhbnQsIGIucGFydGljaXBhbnQpKTtcbiAgcmVtb3RlU2NyZWVuU2hhcmVzLnNvcnQoKGEsIGIpID0+IHNvcnRQYXJ0aWNpcGFudHNCeUpvaW5lZEF0KGEucGFydGljaXBhbnQsIGIucGFydGljaXBhbnQpKTtcbiAgY29uc3Qgc29ydGVkU2NyZWVuU2hhcmVUcmFja1JlZnMgPSBbLi4ucmVtb3RlU2NyZWVuU2hhcmVzLCAuLi5sb2NhbFNjcmVlblNoYXJlc107XG4gIHJldHVybiBzb3J0ZWRTY3JlZW5TaGFyZVRyYWNrUmVmcztcbn1cbmZ1bmN0aW9uIHNvcnRDYW1lcmFUcmFja3MoY2FtZXJhVHJhY2tSZWZlcmVuY2VzKSB7XG4gIGNvbnN0IGxvY2FsQ2FtZXJhVHJhY2tzID0gW107XG4gIGNvbnN0IHJlbW90ZUNhbWVyYVRyYWNrcyA9IFtdO1xuICBjYW1lcmFUcmFja1JlZmVyZW5jZXMuZm9yRWFjaCgodHJhY2tSZWYpID0+IHtcbiAgICBpZiAodHJhY2tSZWYucGFydGljaXBhbnQuaXNMb2NhbCkge1xuICAgICAgbG9jYWxDYW1lcmFUcmFja3MucHVzaCh0cmFja1JlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW90ZUNhbWVyYVRyYWNrcy5wdXNoKHRyYWNrUmVmKTtcbiAgICB9XG4gIH0pO1xuICByZW1vdGVDYW1lcmFUcmFja3Muc29ydCgoYSwgYikgPT4ge1xuICAgIGlmIChhLnBhcnRpY2lwYW50LmlzU3BlYWtpbmcgJiYgYi5wYXJ0aWNpcGFudC5pc1NwZWFraW5nKSB7XG4gICAgICByZXR1cm4gc29ydFBhcnRpY2lwYW50c0J5QXVkaW9MZXZlbChhLnBhcnRpY2lwYW50LCBiLnBhcnRpY2lwYW50KTtcbiAgICB9XG4gICAgaWYgKGEucGFydGljaXBhbnQuaXNTcGVha2luZyAhPT0gYi5wYXJ0aWNpcGFudC5pc1NwZWFraW5nKSB7XG4gICAgICByZXR1cm4gc29ydFBhcnRpY2lwYW50c0J5SXNTcGVha2luZyhhLnBhcnRpY2lwYW50LCBiLnBhcnRpY2lwYW50KTtcbiAgICB9XG4gICAgaWYgKGEucGFydGljaXBhbnQubGFzdFNwb2tlQXQgIT09IGIucGFydGljaXBhbnQubGFzdFNwb2tlQXQpIHtcbiAgICAgIHJldHVybiBzb3J0UGFydGljaXBhbnRzQnlMYXN0U3Bva2VuQVQoYS5wYXJ0aWNpcGFudCwgYi5wYXJ0aWNpcGFudCk7XG4gICAgfVxuICAgIGlmIChpc1RyYWNrUmVmZXJlbmNlKGEpICE9PSBpc1RyYWNrUmVmZXJlbmNlKGIpKSB7XG4gICAgICByZXR1cm4gc29ydFRyYWNrUmVmZXJlbmNlc0J5VHlwZShhLCBiKTtcbiAgICB9XG4gICAgaWYgKGEucGFydGljaXBhbnQuaXNDYW1lcmFFbmFibGVkICE9PSBiLnBhcnRpY2lwYW50LmlzQ2FtZXJhRW5hYmxlZCkge1xuICAgICAgcmV0dXJuIHNvcnRUcmFja1JlZnNCeUlzQ2FtZXJhRW5hYmxlZChhLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvcnRQYXJ0aWNpcGFudHNCeUpvaW5lZEF0KGEucGFydGljaXBhbnQsIGIucGFydGljaXBhbnQpO1xuICB9KTtcbiAgcmV0dXJuIFsuLi5sb2NhbENhbWVyYVRyYWNrcywgLi4ucmVtb3RlQ2FtZXJhVHJhY2tzXTtcbn1cblxuLy8gc3JjL3NvcnRpbmcvc29ydC1wYXJ0aWNpcGFudHMudHNcbmltcG9ydCB7IExvY2FsUGFydGljaXBhbnQgYXMgTG9jYWxQYXJ0aWNpcGFudDIgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmZ1bmN0aW9uIHNvcnRQYXJ0aWNpcGFudHMocGFydGljaXBhbnRzKSB7XG4gIGNvbnN0IHNvcnRlZFBhcnRpY2lwYW50cyA9IFsuLi5wYXJ0aWNpcGFudHNdO1xuICBzb3J0ZWRQYXJ0aWNpcGFudHMuc29ydCgoYSwgYikgPT4ge1xuICAgIGlmIChhLmlzU3BlYWtpbmcgJiYgYi5pc1NwZWFraW5nKSB7XG4gICAgICByZXR1cm4gc29ydFBhcnRpY2lwYW50c0J5QXVkaW9MZXZlbChhLCBiKTtcbiAgICB9XG4gICAgaWYgKGEuaXNTcGVha2luZyAhPT0gYi5pc1NwZWFraW5nKSB7XG4gICAgICByZXR1cm4gc29ydFBhcnRpY2lwYW50c0J5SXNTcGVha2luZyhhLCBiKTtcbiAgICB9XG4gICAgaWYgKGEubGFzdFNwb2tlQXQgIT09IGIubGFzdFNwb2tlQXQpIHtcbiAgICAgIHJldHVybiBzb3J0UGFydGljaXBhbnRzQnlMYXN0U3Bva2VuQVQoYSwgYik7XG4gICAgfVxuICAgIGNvbnN0IGFWaWRlbyA9IGEudmlkZW9UcmFja1B1YmxpY2F0aW9ucy5zaXplID4gMDtcbiAgICBjb25zdCBiVmlkZW8gPSBiLnZpZGVvVHJhY2tQdWJsaWNhdGlvbnMuc2l6ZSA+IDA7XG4gICAgaWYgKGFWaWRlbyAhPT0gYlZpZGVvKSB7XG4gICAgICBpZiAoYVZpZGVvKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc29ydFBhcnRpY2lwYW50c0J5Sm9pbmVkQXQoYSwgYik7XG4gIH0pO1xuICBjb25zdCBsb2NhbFBhcnRpY2lwYW50ID0gc29ydGVkUGFydGljaXBhbnRzLmZpbmQoKHApID0+IHAgaW5zdGFuY2VvZiBMb2NhbFBhcnRpY2lwYW50Mik7XG4gIGlmIChsb2NhbFBhcnRpY2lwYW50KSB7XG4gICAgY29uc3QgbG9jYWxJZHggPSBzb3J0ZWRQYXJ0aWNpcGFudHMuaW5kZXhPZihsb2NhbFBhcnRpY2lwYW50KTtcbiAgICBpZiAobG9jYWxJZHggPj0gMCkge1xuICAgICAgc29ydGVkUGFydGljaXBhbnRzLnNwbGljZShsb2NhbElkeCwgMSk7XG4gICAgICBpZiAoc29ydGVkUGFydGljaXBhbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc29ydGVkUGFydGljaXBhbnRzLnNwbGljZSgwLCAwLCBsb2NhbFBhcnRpY2lwYW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNvcnRlZFBhcnRpY2lwYW50cy5wdXNoKGxvY2FsUGFydGljaXBhbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc29ydGVkUGFydGljaXBhbnRzO1xufVxuXG4vLyBzcmMvaGVscGVyL2FycmF5LWhlbHBlci50c1xuZnVuY3Rpb24gY2h1bmsoaW5wdXQsIHNpemUpIHtcbiAgcmV0dXJuIGlucHV0LnJlZHVjZShcbiAgICAoYXJyLCBpdGVtLCBpZHgpID0+IHtcbiAgICAgIHJldHVybiBpZHggJSBzaXplID09PSAwID8gWy4uLmFyciwgW2l0ZW1dXSA6IFsuLi5hcnIuc2xpY2UoMCwgLTEpLCBbLi4uYXJyLnNsaWNlKC0xKVswXSwgaXRlbV1dO1xuICAgIH0sXG4gICAgW11cbiAgKTtcbn1cbmZ1bmN0aW9uIHppcChhMSwgYTIpIHtcbiAgY29uc3QgcmVzdWx0TGVuZ3RoID0gTWF0aC5tYXgoYTEubGVuZ3RoLCBhMi5sZW5ndGgpO1xuICByZXR1cm4gbmV3IEFycmF5KHJlc3VsdExlbmd0aCkuZmlsbChbXSkubWFwKChfdmFsLCBpZHgpID0+IFthMVtpZHhdLCBhMltpZHhdXSk7XG59XG5mdW5jdGlvbiBkaWZmZXJlbmNlQnkoYTEsIGEyLCBieSkge1xuICByZXR1cm4gYTEuZmlsdGVyKChjKSA9PiAhYTIubWFwKCh2KSA9PiBieSh2KSkuaW5jbHVkZXMoYnkoYykpKTtcbn1cblxuLy8gc3JjL3RyYWNrLXJlZmVyZW5jZS90ZXN0LXV0aWxzLnRzXG5pbXBvcnQgeyBQYXJ0aWNpcGFudCwgVHJhY2sgYXMgVHJhY2szLCBUcmFja1B1YmxpY2F0aW9uIH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5mdW5jdGlvbiBmbGF0VHJhY2tSZWZlcmVuY2VBcnJheShsaXN0KSB7XG4gIHJldHVybiBsaXN0Lm1hcCgoaXRlbSkgPT4ge1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgaXRlbSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIGAke2l0ZW19YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldFRyYWNrUmVmZXJlbmNlSWQoaXRlbSk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gc3JjL3NvcnRpbmcvdGlsZS1hcnJheS11cGRhdGUudHNcbmZ1bmN0aW9uIHZpc3VhbFBhZ2VDaGFuZ2Uoc3RhdGUsIG5leHQpIHtcbiAgcmV0dXJuIHtcbiAgICBkcm9wcGVkOiBkaWZmZXJlbmNlQnkoc3RhdGUsIG5leHQsIGdldFRyYWNrUmVmZXJlbmNlSWQpLFxuICAgIGFkZGVkOiBkaWZmZXJlbmNlQnkobmV4dCwgc3RhdGUsIGdldFRyYWNrUmVmZXJlbmNlSWQpXG4gIH07XG59XG5mdW5jdGlvbiBsaXN0TmVlZHNVcGRhdGluZyhjaGFuZ2VzKSB7XG4gIHJldHVybiBjaGFuZ2VzLmFkZGVkLmxlbmd0aCAhPT0gMCB8fCBjaGFuZ2VzLmRyb3BwZWQubGVuZ3RoICE9PSAwO1xufVxuZnVuY3Rpb24gZmluZEluZGV4KHRyYWNrUmVmZXJlbmNlLCB0cmFja1JlZmVyZW5jZXMpIHtcbiAgY29uc3QgaW5kZXhUb1JlcGxhY2UgPSB0cmFja1JlZmVyZW5jZXMuZmluZEluZGV4KFxuICAgICh0cmFja1JlZmVyZW5jZV8pID0+IGdldFRyYWNrUmVmZXJlbmNlSWQodHJhY2tSZWZlcmVuY2VfKSA9PT0gZ2V0VHJhY2tSZWZlcmVuY2VJZCh0cmFja1JlZmVyZW5jZSlcbiAgKTtcbiAgaWYgKGluZGV4VG9SZXBsYWNlID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBFbGVtZW50IG5vdCBwYXJ0IG9mIHRoZSBhcnJheTogJHtnZXRUcmFja1JlZmVyZW5jZUlkKFxuICAgICAgICB0cmFja1JlZmVyZW5jZVxuICAgICAgKX0gbm90IGluICR7ZmxhdFRyYWNrUmVmZXJlbmNlQXJyYXkodHJhY2tSZWZlcmVuY2VzKX1gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gaW5kZXhUb1JlcGxhY2U7XG59XG5mdW5jdGlvbiBzd2FwSXRlbXMobW92ZUZvcndhcmQsIG1vdmVCYWNrLCB0cmFja1JlZmVyZW5jZXMpIHtcbiAgY29uc3QgaW5kZXhUb1JlcGxhY2UgPSBmaW5kSW5kZXgobW92ZUZvcndhcmQsIHRyYWNrUmVmZXJlbmNlcyk7XG4gIGNvbnN0IGluZGV4UmVwbGFjZVdpdGggPSBmaW5kSW5kZXgobW92ZUJhY2ssIHRyYWNrUmVmZXJlbmNlcyk7XG4gIHRyYWNrUmVmZXJlbmNlcy5zcGxpY2UoaW5kZXhUb1JlcGxhY2UsIDEsIG1vdmVCYWNrKTtcbiAgdHJhY2tSZWZlcmVuY2VzLnNwbGljZShpbmRleFJlcGxhY2VXaXRoLCAxLCBtb3ZlRm9yd2FyZCk7XG4gIHJldHVybiB0cmFja1JlZmVyZW5jZXM7XG59XG5mdW5jdGlvbiBkcm9wSXRlbShpdGVtVG9Ecm9wLCBsaXN0KSB7XG4gIGNvbnN0IGluZGV4T2ZFbGVtZW50VG9Ecm9wID0gZmluZEluZGV4KGl0ZW1Ub0Ryb3AsIGxpc3QpO1xuICBsaXN0LnNwbGljZShpbmRleE9mRWxlbWVudFRvRHJvcCwgMSk7XG4gIHJldHVybiBsaXN0O1xufVxuZnVuY3Rpb24gYWRkSXRlbShpdGVtVG9BZGQsIGxpc3QpIHtcbiAgcmV0dXJuIFsuLi5saXN0LCBpdGVtVG9BZGRdO1xufVxuZnVuY3Rpb24gZGl2aWRlSW50b1BhZ2VzKGxpc3QsIG1heEVsZW1lbnRzT25QYWdlKSB7XG4gIGNvbnN0IHBhZ2VzID0gY2h1bmsobGlzdCwgbWF4RWxlbWVudHNPblBhZ2UpO1xuICByZXR1cm4gcGFnZXM7XG59XG5mdW5jdGlvbiB1cGRhdGVQYWdlcyhjdXJyZW50TGlzdCwgbmV4dExpc3QsIG1heEl0ZW1zT25QYWdlKSB7XG4gIGxldCB1cGRhdGVkTGlzdCA9IHJlZnJlc2hMaXN0KGN1cnJlbnRMaXN0LCBuZXh0TGlzdCk7XG4gIGlmICh1cGRhdGVkTGlzdC5sZW5ndGggPCBuZXh0TGlzdC5sZW5ndGgpIHtcbiAgICBjb25zdCBhZGRlZEl0ZW1zID0gZGlmZmVyZW5jZUJ5KG5leHRMaXN0LCB1cGRhdGVkTGlzdCwgZ2V0VHJhY2tSZWZlcmVuY2VJZCk7XG4gICAgdXBkYXRlZExpc3QgPSBbLi4udXBkYXRlZExpc3QsIC4uLmFkZGVkSXRlbXNdO1xuICB9XG4gIGNvbnN0IGN1cnJlbnRQYWdlcyA9IGRpdmlkZUludG9QYWdlcyh1cGRhdGVkTGlzdCwgbWF4SXRlbXNPblBhZ2UpO1xuICBjb25zdCBuZXh0UGFnZXMgPSBkaXZpZGVJbnRvUGFnZXMobmV4dExpc3QsIG1heEl0ZW1zT25QYWdlKTtcbiAgemlwKGN1cnJlbnRQYWdlcywgbmV4dFBhZ2VzKS5mb3JFYWNoKChbY3VycmVudFBhZ2UsIG5leHRQYWdlXSwgcGFnZUluZGV4KSA9PiB7XG4gICAgaWYgKGN1cnJlbnRQYWdlICYmIG5leHRQYWdlKSB7XG4gICAgICBjb25zdCB1cGRhdGVkUGFnZSA9IGRpdmlkZUludG9QYWdlcyh1cGRhdGVkTGlzdCwgbWF4SXRlbXNPblBhZ2UpW3BhZ2VJbmRleF07XG4gICAgICBjb25zdCBjaGFuZ2VzID0gdmlzdWFsUGFnZUNoYW5nZSh1cGRhdGVkUGFnZSwgbmV4dFBhZ2UpO1xuICAgICAgaWYgKGxpc3ROZWVkc1VwZGF0aW5nKGNoYW5nZXMpKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcbiAgICAgICAgICBgRGV0ZWN0ZWQgdmlzdWFsIGNoYW5nZXMgb24gcGFnZTogJHtwYWdlSW5kZXh9LCBjdXJyZW50OiAke2ZsYXRUcmFja1JlZmVyZW5jZUFycmF5KFxuICAgICAgICAgICAgY3VycmVudFBhZ2VcbiAgICAgICAgICApfSwgbmV4dDogJHtmbGF0VHJhY2tSZWZlcmVuY2VBcnJheShuZXh0UGFnZSl9YCxcbiAgICAgICAgICB7IGNoYW5nZXMgfVxuICAgICAgICApO1xuICAgICAgICBpZiAoY2hhbmdlcy5hZGRlZC5sZW5ndGggPT09IGNoYW5nZXMuZHJvcHBlZC5sZW5ndGgpIHtcbiAgICAgICAgICB6aXAoY2hhbmdlcy5hZGRlZCwgY2hhbmdlcy5kcm9wcGVkKS5mb3JFYWNoKChbYWRkZWQsIGRyb3BwZWRdKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWRkZWQgJiYgZHJvcHBlZCkge1xuICAgICAgICAgICAgICB1cGRhdGVkTGlzdCA9IHN3YXBJdGVtcyhhZGRlZCwgZHJvcHBlZCwgdXBkYXRlZExpc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGBGb3IgYSBzd2FwIGFjdGlvbiB3ZSBuZWVkIGEgYWRkaXRpb24gYW5kIGEgcmVtb3ZhbCBvbmUgaXMgbWlzc2luZzogJHthZGRlZH0sICR7ZHJvcHBlZH1gXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZXMuYWRkZWQubGVuZ3RoID09PSAwICYmIGNoYW5nZXMuZHJvcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY2hhbmdlcy5kcm9wcGVkLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHVwZGF0ZWRMaXN0ID0gZHJvcEl0ZW0oaXRlbSwgdXBkYXRlZExpc3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2VzLmFkZGVkLmxlbmd0aCA+IDAgJiYgY2hhbmdlcy5kcm9wcGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGNoYW5nZXMuYWRkZWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgdXBkYXRlZExpc3QgPSBhZGRJdGVtKGl0ZW0sIHVwZGF0ZWRMaXN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGlmICh1cGRhdGVkTGlzdC5sZW5ndGggPiBuZXh0TGlzdC5sZW5ndGgpIHtcbiAgICBjb25zdCBtaXNzaW5nSXRlbXMgPSBkaWZmZXJlbmNlQnkodXBkYXRlZExpc3QsIG5leHRMaXN0LCBnZXRUcmFja1JlZmVyZW5jZUlkKTtcbiAgICB1cGRhdGVkTGlzdCA9IHVwZGF0ZWRMaXN0LmZpbHRlcihcbiAgICAgIChpdGVtKSA9PiAhbWlzc2luZ0l0ZW1zLm1hcChnZXRUcmFja1JlZmVyZW5jZUlkKS5pbmNsdWRlcyhnZXRUcmFja1JlZmVyZW5jZUlkKGl0ZW0pKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZWRMaXN0O1xufVxuZnVuY3Rpb24gcmVmcmVzaExpc3QoY3VycmVudExpc3QsIG5leHRMaXN0KSB7XG4gIHJldHVybiBjdXJyZW50TGlzdC5tYXAoKGN1cnJlbnRJdGVtKSA9PiB7XG4gICAgY29uc3QgdXBkYXRlRm9yQ3VycmVudEl0ZW0gPSBuZXh0TGlzdC5maW5kKFxuICAgICAgKG5ld0l0ZW1fKSA9PiAoXG4gICAgICAgIC8vIElmIHRoZSBJRHMgbWF0Y2ggb3IgLi5cbiAgICAgICAgZ2V0VHJhY2tSZWZlcmVuY2VJZChjdXJyZW50SXRlbSkgPT09IGdldFRyYWNrUmVmZXJlbmNlSWQobmV3SXRlbV8pIHx8IC8vIC4uLiBpZiB0aGUgY3VycmVudCBpdGVtIGlzIGEgcGxhY2Vob2xkZXIgYW5kIHRoZSBuZXcgaXRlbSBpcyB0aGUgdHJhY2sgcmVmZXJlbmNlIGNhbiByZXBsYWNlIGl0LlxuICAgICAgICB0eXBlb2YgY3VycmVudEl0ZW0gIT09IFwibnVtYmVyXCIgJiYgaXNUcmFja1JlZmVyZW5jZVBsYWNlaG9sZGVyKGN1cnJlbnRJdGVtKSAmJiBpc1RyYWNrUmVmZXJlbmNlKG5ld0l0ZW1fKSAmJiBpc1BsYWNlaG9sZGVyUmVwbGFjZW1lbnQoY3VycmVudEl0ZW0sIG5ld0l0ZW1fKVxuICAgICAgKVxuICAgICk7XG4gICAgcmV0dXJuIHVwZGF0ZUZvckN1cnJlbnRJdGVtICE9IG51bGwgPyB1cGRhdGVGb3JDdXJyZW50SXRlbSA6IGN1cnJlbnRJdGVtO1xuICB9KTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvbWVkaWFUb2dnbGUudHNcbmltcG9ydCB7IFRyYWNrIGFzIFRyYWNrNyB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuaW1wb3J0IHsgU3ViamVjdCBhcyBTdWJqZWN0MiwgbWFwIGFzIG1hcDQsIHN0YXJ0V2l0aCBhcyBzdGFydFdpdGg0IH0gZnJvbSBcInJ4anNcIjtcblxuLy8gc3JjL29ic2VydmFibGVzL3BhcnRpY2lwYW50LnRzXG5pbXBvcnQgeyBQYXJ0aWNpcGFudEV2ZW50IGFzIFBhcnRpY2lwYW50RXZlbnQyLCBSb29tRXZlbnQgYXMgUm9vbUV2ZW50MywgVHJhY2sgYXMgVHJhY2s2IH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIGFzIE9ic2VydmFibGUyLCBtYXAgYXMgbWFwMywgc3RhcnRXaXRoIGFzIHN0YXJ0V2l0aDMsIHN3aXRjaE1hcCB9IGZyb20gXCJyeGpzXCI7XG5cbi8vIHNyYy9jb21wb25lbnRzL21lZGlhVHJhY2sudHNcbmltcG9ydCB7IFRyYWNrIGFzIFRyYWNrNCB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuaW1wb3J0IHsgbWFwLCBzdGFydFdpdGggfSBmcm9tIFwicnhqc1wiO1xuXG4vLyBzcmMvc3R5bGVzLWludGVyZmFjZS9jbGFzcy1wcmVmaXhlci50c1xuZnVuY3Rpb24gcHJlZml4Q2xhc3ModW5wcmVmaXhlZENsYXNzTmFtZSkge1xuICByZXR1cm4gYCR7Y3NzUHJlZml4fS0ke3VucHJlZml4ZWRDbGFzc05hbWV9YDtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvbWVkaWFUcmFjay50c1xuZnVuY3Rpb24gc2V0dXBNZWRpYVRyYWNrKHRyYWNrSWRlbnRpZmllcikge1xuICBjb25zdCBpbml0aWFsUHViID0gZ2V0VHJhY2tCeUlkZW50aWZpZXIodHJhY2tJZGVudGlmaWVyKTtcbiAgY29uc3QgdHJhY2tPYnNlcnZlciA9IG9ic2VydmVQYXJ0aWNpcGFudE1lZGlhKHRyYWNrSWRlbnRpZmllci5wYXJ0aWNpcGFudCkucGlwZShcbiAgICBtYXAoKCkgPT4ge1xuICAgICAgcmV0dXJuIGdldFRyYWNrQnlJZGVudGlmaWVyKHRyYWNrSWRlbnRpZmllcik7XG4gICAgfSksXG4gICAgc3RhcnRXaXRoKGluaXRpYWxQdWIpXG4gICk7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IHByZWZpeENsYXNzKFxuICAgIHRyYWNrSWRlbnRpZmllci5zb3VyY2UgPT09IFRyYWNrNC5Tb3VyY2UuQ2FtZXJhIHx8IHRyYWNrSWRlbnRpZmllci5zb3VyY2UgPT09IFRyYWNrNC5Tb3VyY2UuU2NyZWVuU2hhcmUgPyBcInBhcnRpY2lwYW50LW1lZGlhLXZpZGVvXCIgOiBcInBhcnRpY2lwYW50LW1lZGlhLWF1ZGlvXCJcbiAgKTtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lLCB0cmFja09ic2VydmVyIH07XG59XG5mdW5jdGlvbiBnZXRUcmFja0J5SWRlbnRpZmllcihvcHRpb25zKSB7XG4gIGlmIChpc1RyYWNrUmVmZXJlbmNlKG9wdGlvbnMpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMucHVibGljYXRpb247XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgeyBzb3VyY2UsIG5hbWUsIHBhcnRpY2lwYW50IH0gPSBvcHRpb25zO1xuICAgIGlmIChzb3VyY2UgJiYgbmFtZSkge1xuICAgICAgcmV0dXJuIHBhcnRpY2lwYW50LmdldFRyYWNrUHVibGljYXRpb25zKCkuZmluZCgocHViKSA9PiBwdWIuc291cmNlID09PSBzb3VyY2UgJiYgcHViLnRyYWNrTmFtZSA9PT0gbmFtZSk7XG4gICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gcGFydGljaXBhbnQuZ2V0VHJhY2tQdWJsaWNhdGlvbkJ5TmFtZShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHBhcnRpY2lwYW50LmdldFRyYWNrUHVibGljYXRpb24oc291cmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXQgbGVhc3Qgb25lIG9mIHNvdXJjZSBhbmQgbmFtZSBuZWVkcyB0byBiZSBkZWZpbmVkXCIpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBzcmMvb2JzZXJ2YWJsZXMvcm9vbS50c1xuaW1wb3J0IHsgU3ViamVjdCwgbWFwIGFzIG1hcDIsIE9ic2VydmFibGUsIHN0YXJ0V2l0aCBhcyBzdGFydFdpdGgyLCBmaW5hbGl6ZSwgZmlsdGVyLCBjb25jYXQgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgTG9jYWxQYXJ0aWNpcGFudCBhcyBMb2NhbFBhcnRpY2lwYW50MywgUm9vbSwgUm9vbUV2ZW50IGFzIFJvb21FdmVudDIsIFRyYWNrIGFzIFRyYWNrNSB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuZnVuY3Rpb24gb2JzZXJ2ZVJvb21FdmVudHMocm9vbSwgLi4uZXZlbnRzKSB7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgoc3Vic2NyaWJlKSA9PiB7XG4gICAgY29uc3Qgb25Sb29tVXBkYXRlID0gKCkgPT4ge1xuICAgICAgc3Vic2NyaWJlLm5leHQocm9vbSk7XG4gICAgfTtcbiAgICBldmVudHMuZm9yRWFjaCgoZXZ0KSA9PiB7XG4gICAgICByb29tLm9uKGV2dCwgb25Sb29tVXBkYXRlKTtcbiAgICB9KTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgIGV2ZW50cy5mb3JFYWNoKChldnQpID0+IHtcbiAgICAgICAgcm9vbS5vZmYoZXZ0LCBvblJvb21VcGRhdGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gIH0pLnBpcGUoc3RhcnRXaXRoMihyb29tKSk7XG4gIHJldHVybiBvYnNlcnZhYmxlO1xufVxuZnVuY3Rpb24gcm9vbUV2ZW50U2VsZWN0b3Iocm9vbSwgZXZlbnQpIHtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKChzdWJzY3JpYmUpID0+IHtcbiAgICBjb25zdCB1cGRhdGUgPSAoLi4ucGFyYW1zKSA9PiB7XG4gICAgICBzdWJzY3JpYmUubmV4dChwYXJhbXMpO1xuICAgIH07XG4gICAgcm9vbS5vbihldmVudCwgdXBkYXRlKTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgIHJvb20ub2ZmKGV2ZW50LCB1cGRhdGUpO1xuICAgIH07XG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICB9KTtcbiAgcmV0dXJuIG9ic2VydmFibGU7XG59XG5mdW5jdGlvbiByb29tT2JzZXJ2ZXIocm9vbSkge1xuICBjb25zdCBvYnNlcnZhYmxlID0gb2JzZXJ2ZVJvb21FdmVudHMoXG4gICAgcm9vbSxcbiAgICBSb29tRXZlbnQyLlBhcnRpY2lwYW50Q29ubmVjdGVkLFxuICAgIFJvb21FdmVudDIuUGFydGljaXBhbnREaXNjb25uZWN0ZWQsXG4gICAgUm9vbUV2ZW50Mi5BY3RpdmVTcGVha2Vyc0NoYW5nZWQsXG4gICAgUm9vbUV2ZW50Mi5UcmFja1N1YnNjcmliZWQsXG4gICAgUm9vbUV2ZW50Mi5UcmFja1Vuc3Vic2NyaWJlZCxcbiAgICBSb29tRXZlbnQyLkxvY2FsVHJhY2tQdWJsaXNoZWQsXG4gICAgUm9vbUV2ZW50Mi5Mb2NhbFRyYWNrVW5wdWJsaXNoZWQsXG4gICAgUm9vbUV2ZW50Mi5BdWRpb1BsYXliYWNrU3RhdHVzQ2hhbmdlZCxcbiAgICBSb29tRXZlbnQyLkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWRcbiAgKS5waXBlKHN0YXJ0V2l0aDIocm9vbSkpO1xuICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmZ1bmN0aW9uIGNvbm5lY3Rpb25TdGF0ZU9ic2VydmVyKHJvb20pIHtcbiAgcmV0dXJuIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuQ29ubmVjdGlvblN0YXRlQ2hhbmdlZCkucGlwZShcbiAgICBtYXAyKChbY29ubmVjdGlvblN0YXRlXSkgPT4gY29ubmVjdGlvblN0YXRlKSxcbiAgICBzdGFydFdpdGgyKHJvb20uc3RhdGUpXG4gICk7XG59XG5mdW5jdGlvbiBzY3JlZW5TaGFyZU9ic2VydmVyKHJvb20pIHtcbiAgbGV0IHNjcmVlblNoYXJlU3Vic2NyaWJlcjtcbiAgY29uc3Qgb2JzZXJ2ZXJzID0gW107XG4gIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgoc3Vic2NyaWJlcikgPT4ge1xuICAgIHNjcmVlblNoYXJlU3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIG9ic2VydmVycy5mb3JFYWNoKChvYnNlcnZlcikgPT4ge1xuICAgICAgICBvYnNlcnZlci51bnN1YnNjcmliZSgpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG4gIGNvbnN0IHNjcmVlblNoYXJlVHJhY2tzID0gW107XG4gIGNvbnN0IGhhbmRsZVN1YiA9IChwdWJsaWNhdGlvbiwgcGFydGljaXBhbnQpID0+IHtcbiAgICBpZiAocHVibGljYXRpb24uc291cmNlICE9PSBUcmFjazUuU291cmNlLlNjcmVlblNoYXJlICYmIHB1YmxpY2F0aW9uLnNvdXJjZSAhPT0gVHJhY2s1LlNvdXJjZS5TY3JlZW5TaGFyZUF1ZGlvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0cmFja01hcCA9IHNjcmVlblNoYXJlVHJhY2tzLmZpbmQoKHRyKSA9PiB0ci5wYXJ0aWNpcGFudC5pZGVudGl0eSA9PT0gcGFydGljaXBhbnQuaWRlbnRpdHkpO1xuICAgIGNvbnN0IGdldFNjcmVlblNoYXJlVHJhY2tzID0gKHBhcnRpY2lwYW50MikgPT4ge1xuICAgICAgcmV0dXJuIHBhcnRpY2lwYW50Mi5nZXRUcmFja1B1YmxpY2F0aW9ucygpLmZpbHRlcihcbiAgICAgICAgKHRyYWNrKSA9PiAodHJhY2suc291cmNlID09PSBUcmFjazUuU291cmNlLlNjcmVlblNoYXJlIHx8IHRyYWNrLnNvdXJjZSA9PT0gVHJhY2s1LlNvdXJjZS5TY3JlZW5TaGFyZUF1ZGlvKSAmJiB0cmFjay50cmFja1xuICAgICAgKTtcbiAgICB9O1xuICAgIGlmICghdHJhY2tNYXApIHtcbiAgICAgIHRyYWNrTWFwID0ge1xuICAgICAgICBwYXJ0aWNpcGFudCxcbiAgICAgICAgdHJhY2tzOiBnZXRTY3JlZW5TaGFyZVRyYWNrcyhwYXJ0aWNpcGFudClcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gc2NyZWVuU2hhcmVUcmFja3MuaW5kZXhPZih0cmFja01hcCk7XG4gICAgICBzY3JlZW5TaGFyZVRyYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdHJhY2tNYXAudHJhY2tzID0gZ2V0U2NyZWVuU2hhcmVUcmFja3MocGFydGljaXBhbnQpO1xuICAgIH1cbiAgICBpZiAodHJhY2tNYXAudHJhY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNjcmVlblNoYXJlVHJhY2tzLnB1c2godHJhY2tNYXApO1xuICAgIH1cbiAgICBzY3JlZW5TaGFyZVN1YnNjcmliZXIubmV4dChzY3JlZW5TaGFyZVRyYWNrcyk7XG4gIH07XG4gIG9ic2VydmVycy5wdXNoKFxuICAgIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuVHJhY2tTdWJzY3JpYmVkKS5zdWJzY3JpYmUoXG4gICAgICAoWywgLi4uYXJnc10pID0+IGhhbmRsZVN1YiguLi5hcmdzKVxuICAgIClcbiAgKTtcbiAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgcm9vbUV2ZW50U2VsZWN0b3Iocm9vbSwgUm9vbUV2ZW50Mi5UcmFja1Vuc3Vic2NyaWJlZCkuc3Vic2NyaWJlKFxuICAgICAgKFssIC4uLmFyZ3NdKSA9PiBoYW5kbGVTdWIoLi4uYXJncylcbiAgICApXG4gICk7XG4gIG9ic2VydmVycy5wdXNoKFxuICAgIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuTG9jYWxUcmFja1B1Ymxpc2hlZCkuc3Vic2NyaWJlKChhcmdzKSA9PiBoYW5kbGVTdWIoLi4uYXJncykpXG4gICk7XG4gIG9ic2VydmVycy5wdXNoKFxuICAgIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuTG9jYWxUcmFja1VucHVibGlzaGVkKS5zdWJzY3JpYmUoKGFyZ3MpID0+IHtcbiAgICAgIGhhbmRsZVN1YiguLi5hcmdzKTtcbiAgICB9KVxuICApO1xuICBvYnNlcnZlcnMucHVzaChcbiAgICByb29tRXZlbnRTZWxlY3Rvcihyb29tLCBSb29tRXZlbnQyLlRyYWNrTXV0ZWQpLnN1YnNjcmliZSgoYXJncykgPT4ge1xuICAgICAgaGFuZGxlU3ViKC4uLmFyZ3MpO1xuICAgIH0pXG4gICk7XG4gIG9ic2VydmVycy5wdXNoKFxuICAgIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuVHJhY2tVbm11dGVkKS5zdWJzY3JpYmUoKGFyZ3MpID0+IHtcbiAgICAgIGhhbmRsZVN1YiguLi5hcmdzKTtcbiAgICB9KVxuICApO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBmb3IgKGNvbnN0IHAgb2Ygcm9vbS5yZW1vdGVQYXJ0aWNpcGFudHMudmFsdWVzKCkpIHtcbiAgICAgIHAuZ2V0VHJhY2tQdWJsaWNhdGlvbnMoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xuICAgICAgICBoYW5kbGVTdWIodHJhY2ssIHApO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCAxKTtcbiAgcmV0dXJuIG9ic2VydmFibGU7XG59XG5mdW5jdGlvbiByb29tSW5mb09ic2VydmVyKHJvb20pIHtcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBvYnNlcnZlUm9vbUV2ZW50cyhcbiAgICByb29tLFxuICAgIFJvb21FdmVudDIuUm9vbU1ldGFkYXRhQ2hhbmdlZCxcbiAgICBSb29tRXZlbnQyLkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWRcbiAgKS5waXBlKFxuICAgIG1hcDIoKHIpID0+IHtcbiAgICAgIHJldHVybiB7IG5hbWU6IHIubmFtZSwgbWV0YWRhdGE6IHIubWV0YWRhdGEgfTtcbiAgICB9KVxuICApO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBhY3RpdmVTcGVha2VyT2JzZXJ2ZXIocm9vbSkge1xuICByZXR1cm4gcm9vbUV2ZW50U2VsZWN0b3Iocm9vbSwgUm9vbUV2ZW50Mi5BY3RpdmVTcGVha2Vyc0NoYW5nZWQpLnBpcGUoXG4gICAgbWFwMigoW3NwZWFrZXJzXSkgPT4gc3BlYWtlcnMpXG4gICk7XG59XG5mdW5jdGlvbiBjcmVhdGVNZWRpYURldmljZU9ic2VydmVyKGtpbmQsIG9uRXJyb3IsIHJlcXVlc3RQZXJtaXNzaW9ucyA9IHRydWUpIHtcbiAgdmFyIF9hO1xuICBjb25zdCBvbkRldmljZUNoYW5nZSA9ICgpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbmV3RGV2aWNlcyA9IHlpZWxkIFJvb20uZ2V0TG9jYWxEZXZpY2VzKGtpbmQsIHJlcXVlc3RQZXJtaXNzaW9ucyk7XG4gICAgICBkZXZpY2VTdWJqZWN0Lm5leHQobmV3RGV2aWNlcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgb25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogb25FcnJvcihlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBkZXZpY2VTdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IGRldmljZVN1YmplY3QucGlwZShcbiAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICB2YXIgX2EyO1xuICAgICAgKF9hMiA9IG5hdmlnYXRvciA9PSBudWxsID8gdm9pZCAwIDogbmF2aWdhdG9yLm1lZGlhRGV2aWNlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGV2aWNlY2hhbmdlXCIsIG9uRGV2aWNlQ2hhbmdlKTtcbiAgICB9KVxuICApO1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGlmICghd2luZG93LmlzU2VjdXJlQ29udGV4dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQWNjZXNzaW5nIG1lZGlhIGRldmljZXMgaXMgYXZhaWxhYmxlIG9ubHkgaW4gc2VjdXJlIGNvbnRleHRzIChIVFRQUyBhbmQgbG9jYWxob3N0KSwgaW4gc29tZSBvciBhbGwgc3VwcG9ydGluZyBicm93c2Vycy4gU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTmF2aWdhdG9yL21lZGlhRGV2aWNlc2BcbiAgICAgICk7XG4gICAgfVxuICAgIChfYSA9IG5hdmlnYXRvciA9PSBudWxsID8gdm9pZCAwIDogbmF2aWdhdG9yLm1lZGlhRGV2aWNlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmFkZEV2ZW50TGlzdGVuZXIoXCJkZXZpY2VjaGFuZ2VcIiwgb25EZXZpY2VDaGFuZ2UpO1xuICB9XG4gIHJldHVybiBjb25jYXQoXG4gICAgUm9vbS5nZXRMb2NhbERldmljZXMoa2luZCwgcmVxdWVzdFBlcm1pc3Npb25zKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgb25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogb25FcnJvcihlKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9KSxcbiAgICBvYnNlcnZhYmxlXG4gICk7XG59XG5mdW5jdGlvbiBjcmVhdGVEYXRhT2JzZXJ2ZXIocm9vbSkge1xuICByZXR1cm4gcm9vbUV2ZW50U2VsZWN0b3Iocm9vbSwgUm9vbUV2ZW50Mi5EYXRhUmVjZWl2ZWQpO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2hhdE9ic2VydmVyKHJvb20pIHtcbiAgcmV0dXJuIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuQ2hhdE1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gcm9vbUF1ZGlvUGxheWJhY2tBbGxvd2VkT2JzZXJ2YWJsZShyb29tKSB7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBvYnNlcnZlUm9vbUV2ZW50cyhyb29tLCBSb29tRXZlbnQyLkF1ZGlvUGxheWJhY2tTdGF0dXNDaGFuZ2VkKS5waXBlKFxuICAgIG1hcDIoKHJvb20yKSA9PiB7XG4gICAgICByZXR1cm4geyBjYW5QbGF5QXVkaW86IHJvb20yLmNhblBsYXliYWNrQXVkaW8gfTtcbiAgICB9KVxuICApO1xuICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmZ1bmN0aW9uIHJvb21WaWRlb1BsYXliYWNrQWxsb3dlZE9ic2VydmFibGUocm9vbSkge1xuICBjb25zdCBvYnNlcnZhYmxlID0gb2JzZXJ2ZVJvb21FdmVudHMocm9vbSwgUm9vbUV2ZW50Mi5WaWRlb1BsYXliYWNrU3RhdHVzQ2hhbmdlZCkucGlwZShcbiAgICBtYXAyKChyb29tMikgPT4ge1xuICAgICAgcmV0dXJuIHsgY2FuUGxheVZpZGVvOiByb29tMi5jYW5QbGF5YmFja1ZpZGVvIH07XG4gICAgfSlcbiAgKTtcbiAgcmV0dXJuIG9ic2VydmFibGU7XG59XG5mdW5jdGlvbiBjcmVhdGVBY3RpdmVEZXZpY2VPYnNlcnZhYmxlKHJvb20sIGtpbmQpIHtcbiAgcmV0dXJuIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuQWN0aXZlRGV2aWNlQ2hhbmdlZCkucGlwZShcbiAgICBmaWx0ZXIoKFtraW5kT2ZEZXZpY2VdKSA9PiBraW5kT2ZEZXZpY2UgPT09IGtpbmQpLFxuICAgIG1hcDIoKFtraW5kMiwgZGV2aWNlSWRdKSA9PiB7XG4gICAgICBsb2cuZGVidWcoXCJhY3RpdmVEZXZpY2VPYnNlcnZhYmxlIHwgUm9vbUV2ZW50LkFjdGl2ZURldmljZUNoYW5nZWRcIiwgeyBraW5kOiBraW5kMiwgZGV2aWNlSWQgfSk7XG4gICAgICByZXR1cm4gZGV2aWNlSWQ7XG4gICAgfSksXG4gICAgc3RhcnRXaXRoMihyb29tLmdldEFjdGl2ZURldmljZShraW5kKSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGVuY3J5cHRpb25TdGF0dXNPYnNlcnZhYmxlKHJvb20sIHBhcnRpY2lwYW50KSB7XG4gIHJldHVybiByb29tRXZlbnRTZWxlY3Rvcihyb29tLCBSb29tRXZlbnQyLlBhcnRpY2lwYW50RW5jcnlwdGlvblN0YXR1c0NoYW5nZWQpLnBpcGUoXG4gICAgZmlsdGVyKFxuICAgICAgKFssIHBdKSA9PiAocGFydGljaXBhbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcnRpY2lwYW50LmlkZW50aXR5KSA9PT0gKHAgPT0gbnVsbCA/IHZvaWQgMCA6IHAuaWRlbnRpdHkpIHx8ICFwICYmIChwYXJ0aWNpcGFudCA9PSBudWxsID8gdm9pZCAwIDogcGFydGljaXBhbnQuaWRlbnRpdHkpID09PSByb29tLmxvY2FsUGFydGljaXBhbnQuaWRlbnRpdHlcbiAgICApLFxuICAgIG1hcDIoKFtlbmNyeXB0ZWRdKSA9PiBlbmNyeXB0ZWQpLFxuICAgIHN0YXJ0V2l0aDIoXG4gICAgICBwYXJ0aWNpcGFudCBpbnN0YW5jZW9mIExvY2FsUGFydGljaXBhbnQzID8gcGFydGljaXBhbnQuaXNFMkVFRW5hYmxlZCA6ICEhKHBhcnRpY2lwYW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJ0aWNpcGFudC5pc0VuY3J5cHRlZClcbiAgICApXG4gICk7XG59XG5mdW5jdGlvbiByZWNvcmRpbmdTdGF0dXNPYnNlcnZhYmxlKHJvb20pIHtcbiAgcmV0dXJuIHJvb21FdmVudFNlbGVjdG9yKHJvb20sIFJvb21FdmVudDIuUmVjb3JkaW5nU3RhdHVzQ2hhbmdlZCkucGlwZShcbiAgICBtYXAyKChbcmVjb3JkaW5nXSkgPT4gcmVjb3JkaW5nKSxcbiAgICBzdGFydFdpdGgyKHJvb20uaXNSZWNvcmRpbmcpXG4gICk7XG59XG5cbi8vIHNyYy9vYnNlcnZhYmxlcy9wYXJ0aWNpcGFudC50c1xuZnVuY3Rpb24gb2JzZXJ2ZVBhcnRpY2lwYW50RXZlbnRzKHBhcnRpY2lwYW50LCAuLi5ldmVudHMpIHtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlMigoc3Vic2NyaWJlKSA9PiB7XG4gICAgY29uc3Qgb25QYXJ0aWNpcGFudFVwZGF0ZSA9ICgpID0+IHtcbiAgICAgIHN1YnNjcmliZS5uZXh0KHBhcnRpY2lwYW50KTtcbiAgICB9O1xuICAgIGV2ZW50cy5mb3JFYWNoKChldnQpID0+IHtcbiAgICAgIHBhcnRpY2lwYW50Lm9uKGV2dCwgb25QYXJ0aWNpcGFudFVwZGF0ZSk7XG4gICAgfSk7XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICBldmVudHMuZm9yRWFjaCgoZXZ0KSA9PiB7XG4gICAgICAgIHBhcnRpY2lwYW50Lm9mZihldnQsIG9uUGFydGljaXBhbnRVcGRhdGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gIH0pLnBpcGUoc3RhcnRXaXRoMyhwYXJ0aWNpcGFudCkpO1xuICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmZ1bmN0aW9uIG9ic2VydmVQYXJ0aWNpcGFudE1lZGlhKHBhcnRpY2lwYW50KSB7XG4gIGNvbnN0IHBhcnRpY2lwYW50T2JzZXJ2ZXIgPSBvYnNlcnZlUGFydGljaXBhbnRFdmVudHMoXG4gICAgcGFydGljaXBhbnQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuVHJhY2tNdXRlZCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5UcmFja1VubXV0ZWQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuUGFydGljaXBhbnRQZXJtaXNzaW9uc0NoYW5nZWQsXG4gICAgLy8gUGFydGljaXBhbnRFdmVudC5Jc1NwZWFraW5nQ2hhbmdlZCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5UcmFja1B1Ymxpc2hlZCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5UcmFja1VucHVibGlzaGVkLFxuICAgIFBhcnRpY2lwYW50RXZlbnQyLkxvY2FsVHJhY2tQdWJsaXNoZWQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuTG9jYWxUcmFja1VucHVibGlzaGVkLFxuICAgIFBhcnRpY2lwYW50RXZlbnQyLk1lZGlhRGV2aWNlc0Vycm9yLFxuICAgIFBhcnRpY2lwYW50RXZlbnQyLlRyYWNrU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZFxuICAgIC8vIFBhcnRpY2lwYW50RXZlbnQuQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkLFxuICApLnBpcGUoXG4gICAgbWFwMygocCkgPT4ge1xuICAgICAgY29uc3QgeyBpc01pY3JvcGhvbmVFbmFibGVkLCBpc0NhbWVyYUVuYWJsZWQsIGlzU2NyZWVuU2hhcmVFbmFibGVkIH0gPSBwO1xuICAgICAgY29uc3QgbWljcm9waG9uZVRyYWNrID0gcC5nZXRUcmFja1B1YmxpY2F0aW9uKFRyYWNrNi5Tb3VyY2UuTWljcm9waG9uZSk7XG4gICAgICBjb25zdCBjYW1lcmFUcmFjayA9IHAuZ2V0VHJhY2tQdWJsaWNhdGlvbihUcmFjazYuU291cmNlLkNhbWVyYSk7XG4gICAgICBjb25zdCBwYXJ0aWNpcGFudE1lZGlhID0ge1xuICAgICAgICBpc0NhbWVyYUVuYWJsZWQsXG4gICAgICAgIGlzTWljcm9waG9uZUVuYWJsZWQsXG4gICAgICAgIGlzU2NyZWVuU2hhcmVFbmFibGVkLFxuICAgICAgICBjYW1lcmFUcmFjayxcbiAgICAgICAgbWljcm9waG9uZVRyYWNrLFxuICAgICAgICBwYXJ0aWNpcGFudDogcFxuICAgICAgfTtcbiAgICAgIHJldHVybiBwYXJ0aWNpcGFudE1lZGlhO1xuICAgIH0pXG4gICk7XG4gIHJldHVybiBwYXJ0aWNpcGFudE9ic2VydmVyO1xufVxuZnVuY3Rpb24gY3JlYXRlVHJhY2tPYnNlcnZlcihwYXJ0aWNpcGFudCwgb3B0aW9ucykge1xuICByZXR1cm4gb2JzZXJ2ZVBhcnRpY2lwYW50TWVkaWEocGFydGljaXBhbnQpLnBpcGUoXG4gICAgbWFwMygoKSA9PiB7XG4gICAgICByZXR1cm4geyBwdWJsaWNhdGlvbjogZ2V0VHJhY2tCeUlkZW50aWZpZXIob3B0aW9ucykgfTtcbiAgICB9KVxuICApO1xufVxuZnVuY3Rpb24gcGFydGljaXBhbnRJbmZvT2JzZXJ2ZXIocGFydGljaXBhbnQpIHtcbiAgaWYgKCFwYXJ0aWNpcGFudCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgY29uc3Qgb2JzZXJ2ZXIgPSBvYnNlcnZlUGFydGljaXBhbnRFdmVudHMoXG4gICAgcGFydGljaXBhbnQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuUGFydGljaXBhbnRNZXRhZGF0YUNoYW5nZWQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuUGFydGljaXBhbnROYW1lQ2hhbmdlZFxuICApLnBpcGUoXG4gICAgbWFwMygoeyBuYW1lLCBpZGVudGl0eSwgbWV0YWRhdGEgfSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgaWRlbnRpdHksXG4gICAgICAgIG1ldGFkYXRhXG4gICAgICB9O1xuICAgIH0pLFxuICAgIHN0YXJ0V2l0aDMoe1xuICAgICAgbmFtZTogcGFydGljaXBhbnQubmFtZSxcbiAgICAgIGlkZW50aXR5OiBwYXJ0aWNpcGFudC5pZGVudGl0eSxcbiAgICAgIG1ldGFkYXRhOiBwYXJ0aWNpcGFudC5tZXRhZGF0YVxuICAgIH0pXG4gICk7XG4gIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3Rpb25RdWFsaXR5T2JzZXJ2ZXIocGFydGljaXBhbnQpIHtcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBwYXJ0aWNpcGFudEV2ZW50U2VsZWN0b3IoXG4gICAgcGFydGljaXBhbnQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkXG4gICkucGlwZShcbiAgICBtYXAzKChbcXVhbGl0eV0pID0+IHF1YWxpdHkpLFxuICAgIHN0YXJ0V2l0aDMocGFydGljaXBhbnQuY29ubmVjdGlvblF1YWxpdHkpXG4gICk7XG4gIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIHBhcnRpY2lwYW50RXZlbnRTZWxlY3RvcihwYXJ0aWNpcGFudCwgZXZlbnQpIHtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlMigoc3Vic2NyaWJlKSA9PiB7XG4gICAgY29uc3QgdXBkYXRlID0gKC4uLnBhcmFtcykgPT4ge1xuICAgICAgc3Vic2NyaWJlLm5leHQocGFyYW1zKTtcbiAgICB9O1xuICAgIHBhcnRpY2lwYW50Lm9uKGV2ZW50LCB1cGRhdGUpO1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgICAgcGFydGljaXBhbnQub2ZmKGV2ZW50LCB1cGRhdGUpO1xuICAgIH07XG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICB9KTtcbiAgcmV0dXJuIG9ic2VydmFibGU7XG59XG5mdW5jdGlvbiBtdXRlZE9ic2VydmVyKHRyYWNrUmVmKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgcmV0dXJuIG9ic2VydmVQYXJ0aWNpcGFudEV2ZW50cyhcbiAgICB0cmFja1JlZi5wYXJ0aWNpcGFudCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5UcmFja011dGVkLFxuICAgIFBhcnRpY2lwYW50RXZlbnQyLlRyYWNrVW5tdXRlZCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5UcmFja1N1YnNjcmliZWQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuVHJhY2tVbnN1YnNjcmliZWQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuTG9jYWxUcmFja1B1Ymxpc2hlZCxcbiAgICBQYXJ0aWNpcGFudEV2ZW50Mi5Mb2NhbFRyYWNrVW5wdWJsaXNoZWRcbiAgKS5waXBlKFxuICAgIG1hcDMoKHBhcnRpY2lwYW50KSA9PiB7XG4gICAgICB2YXIgX2EyLCBfYjI7XG4gICAgICBjb25zdCBwdWIgPSAoX2EyID0gdHJhY2tSZWYucHVibGljYXRpb24pICE9IG51bGwgPyBfYTIgOiBwYXJ0aWNpcGFudC5nZXRUcmFja1B1YmxpY2F0aW9uKHRyYWNrUmVmLnNvdXJjZSk7XG4gICAgICByZXR1cm4gKF9iMiA9IHB1YiA9PSBudWxsID8gdm9pZCAwIDogcHViLmlzTXV0ZWQpICE9IG51bGwgPyBfYjIgOiB0cnVlO1xuICAgIH0pLFxuICAgIHN0YXJ0V2l0aDMoXG4gICAgICAoX2QgPSAoX2MgPSAoX2EgPSB0cmFja1JlZi5wdWJsaWNhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmlzTXV0ZWQpICE9IG51bGwgPyBfYyA6IChfYiA9IHRyYWNrUmVmLnBhcnRpY2lwYW50LmdldFRyYWNrUHVibGljYXRpb24odHJhY2tSZWYuc291cmNlKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmlzTXV0ZWQpICE9IG51bGwgPyBfZCA6IHRydWVcbiAgICApXG4gICk7XG59XG5mdW5jdGlvbiBjcmVhdGVJc1NwZWFraW5nT2JzZXJ2ZXIocGFydGljaXBhbnQpIHtcbiAgcmV0dXJuIHBhcnRpY2lwYW50RXZlbnRTZWxlY3RvcihwYXJ0aWNpcGFudCwgUGFydGljaXBhbnRFdmVudDIuSXNTcGVha2luZ0NoYW5nZWQpLnBpcGUoXG4gICAgbWFwMygoW2lzU3BlYWtpbmddKSA9PiBpc1NwZWFraW5nKVxuICApO1xufVxuZnVuY3Rpb24gY29ubmVjdGVkUGFydGljaXBhbnRzT2JzZXJ2ZXIocm9vbSwgb3B0aW9ucyA9IHt9KSB7XG4gIHZhciBfYTtcbiAgbGV0IHN1YnNjcmliZXI7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTIoKHN1YikgPT4ge1xuICAgIHN1YnNjcmliZXIgPSBzdWI7XG4gICAgcmV0dXJuICgpID0+IGxpc3RlbmVyLnVuc3Vic2NyaWJlKCk7XG4gIH0pLnBpcGUoc3RhcnRXaXRoMyhBcnJheS5mcm9tKHJvb20ucmVtb3RlUGFydGljaXBhbnRzLnZhbHVlcygpKSkpO1xuICBjb25zdCBhZGRpdGlvbmFsUm9vbUV2ZW50cyA9IChfYSA9IG9wdGlvbnMuYWRkaXRpb25hbFJvb21FdmVudHMpICE9IG51bGwgPyBfYSA6IGFsbFBhcnRpY2lwYW50Um9vbUV2ZW50cztcbiAgY29uc3Qgcm9vbUV2ZW50cyA9IEFycmF5LmZyb20oXG4gICAgLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgICAgUm9vbUV2ZW50My5QYXJ0aWNpcGFudENvbm5lY3RlZCxcbiAgICAgIFJvb21FdmVudDMuUGFydGljaXBhbnREaXNjb25uZWN0ZWQsXG4gICAgICBSb29tRXZlbnQzLkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWQsXG4gICAgICAuLi5hZGRpdGlvbmFsUm9vbUV2ZW50c1xuICAgIF0pXG4gICk7XG4gIGNvbnN0IGxpc3RlbmVyID0gb2JzZXJ2ZVJvb21FdmVudHMocm9vbSwgLi4ucm9vbUV2ZW50cykuc3Vic2NyaWJlKFxuICAgIChyKSA9PiBzdWJzY3JpYmVyID09IG51bGwgPyB2b2lkIDAgOiBzdWJzY3JpYmVyLm5leHQoQXJyYXkuZnJvbShyLnJlbW90ZVBhcnRpY2lwYW50cy52YWx1ZXMoKSkpXG4gICk7XG4gIGlmIChyb29tLnJlbW90ZVBhcnRpY2lwYW50cy5zaXplID4gMCkge1xuICAgIHN1YnNjcmliZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHN1YnNjcmliZXIubmV4dChBcnJheS5mcm9tKHJvb20ucmVtb3RlUGFydGljaXBhbnRzLnZhbHVlcygpKSk7XG4gIH1cbiAgcmV0dXJuIG9ic2VydmFibGU7XG59XG5mdW5jdGlvbiBjb25uZWN0ZWRQYXJ0aWNpcGFudE9ic2VydmVyKHJvb20sIGlkZW50aXR5LCBvcHRpb25zID0ge30pIHtcbiAgdmFyIF9hO1xuICBjb25zdCBhZGRpdGlvbmFsRXZlbnRzID0gKF9hID0gb3B0aW9ucy5hZGRpdGlvbmFsRXZlbnRzKSAhPSBudWxsID8gX2EgOiBhbGxQYXJ0aWNpcGFudEV2ZW50cztcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG9ic2VydmVSb29tRXZlbnRzKFxuICAgIHJvb20sXG4gICAgUm9vbUV2ZW50My5QYXJ0aWNpcGFudENvbm5lY3RlZCxcbiAgICBSb29tRXZlbnQzLlBhcnRpY2lwYW50RGlzY29ubmVjdGVkLFxuICAgIFJvb21FdmVudDMuQ29ubmVjdGlvblN0YXRlQ2hhbmdlZFxuICApLnBpcGUoXG4gICAgc3dpdGNoTWFwKChyKSA9PiB7XG4gICAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHIuZ2V0UGFydGljaXBhbnRCeUlkZW50aXR5KGlkZW50aXR5KTtcbiAgICAgIGlmIChwYXJ0aWNpcGFudCkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZVBhcnRpY2lwYW50RXZlbnRzKHBhcnRpY2lwYW50LCAuLi5hZGRpdGlvbmFsRXZlbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTIoKHN1YnNjcmliZSkgPT4gc3Vic2NyaWJlLm5leHQodm9pZCAwKSk7XG4gICAgICB9XG4gICAgfSksXG4gICAgc3RhcnRXaXRoMyhyb29tLmdldFBhcnRpY2lwYW50QnlJZGVudGl0eShpZGVudGl0eSkpXG4gICk7XG4gIHJldHVybiBvYnNlcnZhYmxlO1xufVxuZnVuY3Rpb24gcGFydGljaXBhbnRQZXJtaXNzaW9uT2JzZXJ2ZXIocGFydGljaXBhbnQpIHtcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBwYXJ0aWNpcGFudEV2ZW50U2VsZWN0b3IoXG4gICAgcGFydGljaXBhbnQsXG4gICAgUGFydGljaXBhbnRFdmVudDIuUGFydGljaXBhbnRQZXJtaXNzaW9uc0NoYW5nZWRcbiAgKS5waXBlKFxuICAgIG1hcDMoKCkgPT4gcGFydGljaXBhbnQucGVybWlzc2lvbnMpLFxuICAgIHN0YXJ0V2l0aDMocGFydGljaXBhbnQucGVybWlzc2lvbnMpXG4gICk7XG4gIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIHBhcnRpY2lwYW50QnlJZGVudGlmaWVyT2JzZXJ2ZXIocm9vbSwgeyBraW5kLCBpZGVudGl0eSB9LCBvcHRpb25zID0ge30pIHtcbiAgdmFyIF9hO1xuICBjb25zdCBhZGRpdGlvbmFsRXZlbnRzID0gKF9hID0gb3B0aW9ucy5hZGRpdGlvbmFsRXZlbnRzKSAhPSBudWxsID8gX2EgOiBhbGxQYXJ0aWNpcGFudEV2ZW50cztcbiAgY29uc3QgbWF0Y2hlc0lkZW50aWZpZXIgPSAocGFydGljaXBhbnQpID0+IHtcbiAgICBsZXQgaXNNYXRjaCA9IHRydWU7XG4gICAgaWYgKGtpbmQpIHtcbiAgICAgIGlzTWF0Y2ggPSBpc01hdGNoICYmIHBhcnRpY2lwYW50LmtpbmQgPT09IGtpbmQ7XG4gICAgfVxuICAgIGlmIChpZGVudGl0eSkge1xuICAgICAgaXNNYXRjaCA9IGlzTWF0Y2ggJiYgcGFydGljaXBhbnQuaWRlbnRpdHkgPT09IGlkZW50aXR5O1xuICAgIH1cbiAgICByZXR1cm4gaXNNYXRjaDtcbiAgfTtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IG9ic2VydmVSb29tRXZlbnRzKFxuICAgIHJvb20sXG4gICAgUm9vbUV2ZW50My5QYXJ0aWNpcGFudENvbm5lY3RlZCxcbiAgICBSb29tRXZlbnQzLlBhcnRpY2lwYW50RGlzY29ubmVjdGVkLFxuICAgIFJvb21FdmVudDMuQ29ubmVjdGlvblN0YXRlQ2hhbmdlZFxuICApLnBpcGUoXG4gICAgc3dpdGNoTWFwKChyKSA9PiB7XG4gICAgICBjb25zdCBwYXJ0aWNpcGFudCA9IEFycmF5LmZyb20oci5yZW1vdGVQYXJ0aWNpcGFudHMudmFsdWVzKCkpLmZpbmQoXG4gICAgICAgIChwKSA9PiBtYXRjaGVzSWRlbnRpZmllcihwKVxuICAgICAgKTtcbiAgICAgIGlmIChwYXJ0aWNpcGFudCkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZVBhcnRpY2lwYW50RXZlbnRzKHBhcnRpY2lwYW50LCAuLi5hZGRpdGlvbmFsRXZlbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTIoKHN1YnNjcmliZSkgPT4gc3Vic2NyaWJlLm5leHQodm9pZCAwKSk7XG4gICAgICB9XG4gICAgfSksXG4gICAgc3RhcnRXaXRoMyhBcnJheS5mcm9tKHJvb20ucmVtb3RlUGFydGljaXBhbnRzLnZhbHVlcygpKS5maW5kKChwKSA9PiBtYXRjaGVzSWRlbnRpZmllcihwKSkpXG4gICk7XG4gIHJldHVybiBvYnNlcnZhYmxlO1xufVxuZnVuY3Rpb24gcGFydGljaXBhbnRBdHRyaWJ1dGVzT2JzZXJ2ZXIocGFydGljaXBhbnQpIHtcbiAgaWYgKHR5cGVvZiBwYXJ0aWNpcGFudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTIoKTtcbiAgfVxuICByZXR1cm4gcGFydGljaXBhbnRFdmVudFNlbGVjdG9yKHBhcnRpY2lwYW50LCBQYXJ0aWNpcGFudEV2ZW50Mi5BdHRyaWJ1dGVzQ2hhbmdlZCkucGlwZShcbiAgICBtYXAzKChbY2hhbmdlZEF0dHJpYnV0ZXNdKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGFuZ2VkOiBjaGFuZ2VkQXR0cmlidXRlcyxcbiAgICAgICAgYXR0cmlidXRlczogcGFydGljaXBhbnQuYXR0cmlidXRlc1xuICAgICAgfTtcbiAgICB9KSxcbiAgICBzdGFydFdpdGgzKHsgY2hhbmdlZDogcGFydGljaXBhbnQuYXR0cmlidXRlcywgYXR0cmlidXRlczogcGFydGljaXBhbnQuYXR0cmlidXRlcyB9KVxuICApO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9tZWRpYVRvZ2dsZS50c1xuZnVuY3Rpb24gc2V0dXBNZWRpYVRvZ2dsZShzb3VyY2UsIHJvb20sIG9wdGlvbnMsIHB1Ymxpc2hPcHRpb25zLCBvbkVycm9yKSB7XG4gIGNvbnN0IHsgbG9jYWxQYXJ0aWNpcGFudCB9ID0gcm9vbTtcbiAgY29uc3QgZ2V0U291cmNlRW5hYmxlZCA9IChzb3VyY2UyLCBsb2NhbFBhcnRpY2lwYW50MikgPT4ge1xuICAgIGxldCBpc0VuYWJsZWQgPSBmYWxzZTtcbiAgICBzd2l0Y2ggKHNvdXJjZTIpIHtcbiAgICAgIGNhc2UgVHJhY2s3LlNvdXJjZS5DYW1lcmE6XG4gICAgICAgIGlzRW5hYmxlZCA9IGxvY2FsUGFydGljaXBhbnQyLmlzQ2FtZXJhRW5hYmxlZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRyYWNrNy5Tb3VyY2UuTWljcm9waG9uZTpcbiAgICAgICAgaXNFbmFibGVkID0gbG9jYWxQYXJ0aWNpcGFudDIuaXNNaWNyb3Bob25lRW5hYmxlZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRyYWNrNy5Tb3VyY2UuU2NyZWVuU2hhcmU6XG4gICAgICAgIGlzRW5hYmxlZCA9IGxvY2FsUGFydGljaXBhbnQyLmlzU2NyZWVuU2hhcmVFbmFibGVkO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gaXNFbmFibGVkO1xuICB9O1xuICBjb25zdCBlbmFibGVkT2JzZXJ2ZXIgPSBvYnNlcnZlUGFydGljaXBhbnRNZWRpYShsb2NhbFBhcnRpY2lwYW50KS5waXBlKFxuICAgIG1hcDQoKG1lZGlhKSA9PiB7XG4gICAgICByZXR1cm4gZ2V0U291cmNlRW5hYmxlZChzb3VyY2UsIG1lZGlhLnBhcnRpY2lwYW50KTtcbiAgICB9KSxcbiAgICBzdGFydFdpdGg0KGdldFNvdXJjZUVuYWJsZWQoc291cmNlLCBsb2NhbFBhcnRpY2lwYW50KSlcbiAgKTtcbiAgY29uc3QgcGVuZGluZ1N1YmplY3QgPSBuZXcgU3ViamVjdDIoKTtcbiAgY29uc3QgdG9nZ2xlID0gKGZvcmNlU3RhdGUsIGNhcHR1cmVPcHRpb25zKSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNhcHR1cmVPcHRpb25zICE9IG51bGwgPyBjYXB0dXJlT3B0aW9ucyA6IGNhcHR1cmVPcHRpb25zID0gb3B0aW9ucztcbiAgICAgIHBlbmRpbmdTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgICBjYXNlIFRyYWNrNy5Tb3VyY2UuQ2FtZXJhOlxuICAgICAgICAgIHlpZWxkIGxvY2FsUGFydGljaXBhbnQuc2V0Q2FtZXJhRW5hYmxlZChcbiAgICAgICAgICAgIGZvcmNlU3RhdGUgIT0gbnVsbCA/IGZvcmNlU3RhdGUgOiAhbG9jYWxQYXJ0aWNpcGFudC5pc0NhbWVyYUVuYWJsZWQsXG4gICAgICAgICAgICBjYXB0dXJlT3B0aW9ucyxcbiAgICAgICAgICAgIHB1Ymxpc2hPcHRpb25zXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gbG9jYWxQYXJ0aWNpcGFudC5pc0NhbWVyYUVuYWJsZWQ7XG4gICAgICAgIGNhc2UgVHJhY2s3LlNvdXJjZS5NaWNyb3Bob25lOlxuICAgICAgICAgIHlpZWxkIGxvY2FsUGFydGljaXBhbnQuc2V0TWljcm9waG9uZUVuYWJsZWQoXG4gICAgICAgICAgICBmb3JjZVN0YXRlICE9IG51bGwgPyBmb3JjZVN0YXRlIDogIWxvY2FsUGFydGljaXBhbnQuaXNNaWNyb3Bob25lRW5hYmxlZCxcbiAgICAgICAgICAgIGNhcHR1cmVPcHRpb25zLFxuICAgICAgICAgICAgcHVibGlzaE9wdGlvbnNcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBsb2NhbFBhcnRpY2lwYW50LmlzTWljcm9waG9uZUVuYWJsZWQ7XG4gICAgICAgIGNhc2UgVHJhY2s3LlNvdXJjZS5TY3JlZW5TaGFyZTpcbiAgICAgICAgICB5aWVsZCBsb2NhbFBhcnRpY2lwYW50LnNldFNjcmVlblNoYXJlRW5hYmxlZChcbiAgICAgICAgICAgIGZvcmNlU3RhdGUgIT0gbnVsbCA/IGZvcmNlU3RhdGUgOiAhbG9jYWxQYXJ0aWNpcGFudC5pc1NjcmVlblNoYXJlRW5hYmxlZCxcbiAgICAgICAgICAgIGNhcHR1cmVPcHRpb25zLFxuICAgICAgICAgICAgcHVibGlzaE9wdGlvbnNcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBsb2NhbFBhcnRpY2lwYW50LmlzU2NyZWVuU2hhcmVFbmFibGVkO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUcmllZCB0byB0b2dnbGUgdW5zdXBwb3J0ZWQgc291cmNlXCIpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChvbkVycm9yICYmIGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBvbkVycm9yID09IG51bGwgPyB2b2lkIDAgOiBvbkVycm9yKGUpO1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgcGVuZGluZ1N1YmplY3QubmV4dChmYWxzZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgY2xhc3NOYW1lID0gcHJlZml4Q2xhc3MoXCJidXR0b25cIik7XG4gIHJldHVybiB7XG4gICAgY2xhc3NOYW1lLFxuICAgIHRvZ2dsZSxcbiAgICBlbmFibGVkT2JzZXJ2ZXIsXG4gICAgcGVuZGluZ09ic2VydmVyOiBwZW5kaW5nU3ViamVjdC5hc09ic2VydmFibGUoKVxuICB9O1xufVxuZnVuY3Rpb24gc2V0dXBNYW51YWxUb2dnbGUoKSB7XG4gIGxldCBzdGF0ZSA9IGZhbHNlO1xuICBjb25zdCBlbmFibGVkU3ViamVjdCA9IG5ldyBTdWJqZWN0MigpO1xuICBjb25zdCBwZW5kaW5nU3ViamVjdCA9IG5ldyBTdWJqZWN0MigpO1xuICBjb25zdCB0b2dnbGUgPSAoZm9yY2VTdGF0ZSkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIHBlbmRpbmdTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgc3RhdGUgPSBmb3JjZVN0YXRlICE9IG51bGwgPyBmb3JjZVN0YXRlIDogIXN0YXRlO1xuICAgIGVuYWJsZWRTdWJqZWN0Lm5leHQoc3RhdGUpO1xuICAgIHBlbmRpbmdTdWJqZWN0Lm5leHQoZmFsc2UpO1xuICB9KTtcbiAgY29uc3QgY2xhc3NOYW1lID0gcHJlZml4Q2xhc3MoXCJidXR0b25cIik7XG4gIHJldHVybiB7XG4gICAgY2xhc3NOYW1lLFxuICAgIHRvZ2dsZSxcbiAgICBlbmFibGVkT2JzZXJ2ZXI6IGVuYWJsZWRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpLFxuICAgIHBlbmRpbmdPYnNlcnZlcjogcGVuZGluZ1N1YmplY3QuYXNPYnNlcnZhYmxlKClcbiAgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvbWVkaWFEZXZpY2VTZWxlY3QudHNcbmltcG9ydCB7XG4gIFRyYWNrIGFzIFRyYWNrOFxufSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XG5mdW5jdGlvbiBzZXR1cERldmljZVNlbGVjdG9yKGtpbmQsIHJvb20sIGxvY2FsVHJhY2spIHtcbiAgY29uc3QgYWN0aXZlRGV2aWNlU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Qodm9pZCAwKTtcbiAgY29uc3QgYWN0aXZlRGV2aWNlT2JzZXJ2YWJsZSA9IHJvb20gPyBjcmVhdGVBY3RpdmVEZXZpY2VPYnNlcnZhYmxlKHJvb20sIGtpbmQpIDogYWN0aXZlRGV2aWNlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgY29uc3Qgc2V0QWN0aXZlTWVkaWFEZXZpY2UgPSAoXzAsIC4uLl8xKSA9PiBfX2FzeW5jKHRoaXMsIFtfMCwgLi4uXzFdLCBmdW5jdGlvbiogKGlkLCBvcHRpb25zID0ge30pIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBpZiAocm9vbSkge1xuICAgICAgbG9nLmRlYnVnKGBTd2l0Y2hpbmcgYWN0aXZlIGRldmljZSBvZiBraW5kIFwiJHtraW5kfVwiIHdpdGggaWQgJHtpZH0uYCk7XG4gICAgICB5aWVsZCByb29tLnN3aXRjaEFjdGl2ZURldmljZShraW5kLCBpZCwgb3B0aW9ucy5leGFjdCk7XG4gICAgICBjb25zdCBhY3R1YWxEZXZpY2VJZCA9IChfYSA9IHJvb20uZ2V0QWN0aXZlRGV2aWNlKGtpbmQpKSAhPSBudWxsID8gX2EgOiBpZDtcbiAgICAgIGlmIChhY3R1YWxEZXZpY2VJZCAhPT0gaWQgJiYgaWQgIT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgIGxvZy5pbmZvKFxuICAgICAgICAgIGBXZSB0cmllZCB0byBzZWxlY3QgdGhlIGRldmljZSB3aXRoIGlkICgke2lkfSksIGJ1dCB0aGUgYnJvd3NlciBkZWNpZGVkIHRvIHNlbGVjdCB0aGUgZGV2aWNlIHdpdGggaWQgKCR7YWN0dWFsRGV2aWNlSWR9KSBpbnN0ZWFkLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGxldCB0YXJnZXRUcmFjayA9IHZvaWQgMDtcbiAgICAgIGlmIChraW5kID09PSBcImF1ZGlvaW5wdXRcIilcbiAgICAgICAgdGFyZ2V0VHJhY2sgPSAoX2IgPSByb29tLmxvY2FsUGFydGljaXBhbnQuZ2V0VHJhY2tQdWJsaWNhdGlvbihUcmFjazguU291cmNlLk1pY3JvcGhvbmUpKSA9PSBudWxsID8gdm9pZCAwIDogX2IudHJhY2s7XG4gICAgICBlbHNlIGlmIChraW5kID09PSBcInZpZGVvaW5wdXRcIikge1xuICAgICAgICB0YXJnZXRUcmFjayA9IChfYyA9IHJvb20ubG9jYWxQYXJ0aWNpcGFudC5nZXRUcmFja1B1YmxpY2F0aW9uKFRyYWNrOC5Tb3VyY2UuQ2FtZXJhKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLnRyYWNrO1xuICAgICAgfVxuICAgICAgY29uc3QgdXNlRGVmYXVsdCA9IGlkID09PSBcImRlZmF1bHRcIiAmJiAhdGFyZ2V0VHJhY2sgfHwgaWQgPT09IFwiZGVmYXVsdFwiICYmICh0YXJnZXRUcmFjayA9PSBudWxsID8gdm9pZCAwIDogdGFyZ2V0VHJhY2subWVkaWFTdHJlYW1UcmFjay5sYWJlbC5zdGFydHNXaXRoKFwiRGVmYXVsdFwiKSk7XG4gICAgICBhY3RpdmVEZXZpY2VTdWJqZWN0Lm5leHQodXNlRGVmYXVsdCA/IGlkIDogYWN0dWFsRGV2aWNlSWQpO1xuICAgIH0gZWxzZSBpZiAobG9jYWxUcmFjaykge1xuICAgICAgeWllbGQgbG9jYWxUcmFjay5zZXREZXZpY2VJZChvcHRpb25zLmV4YWN0ID8geyBleGFjdDogaWQgfSA6IGlkKTtcbiAgICAgIGNvbnN0IGFjdHVhbElkID0geWllbGQgbG9jYWxUcmFjay5nZXREZXZpY2VJZCgpO1xuICAgICAgYWN0aXZlRGV2aWNlU3ViamVjdC5uZXh0KFxuICAgICAgICBpZCA9PT0gXCJkZWZhdWx0XCIgJiYgbG9jYWxUcmFjay5tZWRpYVN0cmVhbVRyYWNrLmxhYmVsLnN0YXJ0c1dpdGgoXCJEZWZhdWx0XCIpID8gaWQgOiBhY3R1YWxJZFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGFjdGl2ZURldmljZVN1YmplY3QudmFsdWUgIT09IGlkKSB7XG4gICAgICBsb2cud2FybihcbiAgICAgICAgXCJkZXZpY2Ugc3dpdGNoIHNraXBwZWQsIHBsZWFzZSBwcm92aWRlIGVpdGhlciBhIHJvb20gb3IgYSBsb2NhbCB0cmFjayB0byBzd2l0Y2ggb24uIFwiXG4gICAgICApO1xuICAgICAgYWN0aXZlRGV2aWNlU3ViamVjdC5uZXh0KGlkKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBjbGFzc05hbWUgPSBwcmVmaXhDbGFzcyhcIm1lZGlhLWRldmljZS1zZWxlY3RcIik7XG4gIHJldHVybiB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGFjdGl2ZURldmljZU9ic2VydmFibGUsXG4gICAgc2V0QWN0aXZlTWVkaWFEZXZpY2VcbiAgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvZGlzY29ubmVjdEJ1dHRvbi50c1xuZnVuY3Rpb24gc2V0dXBEaXNjb25uZWN0QnV0dG9uKHJvb20pIHtcbiAgY29uc3QgZGlzY29ubmVjdCA9IChzdG9wVHJhY2tzKSA9PiB7XG4gICAgcm9vbS5kaXNjb25uZWN0KHN0b3BUcmFja3MpO1xuICB9O1xuICBjb25zdCBjbGFzc05hbWUgPSBwcmVmaXhDbGFzcyhcImRpc2Nvbm5lY3QtYnV0dG9uXCIpO1xuICByZXR1cm4geyBjbGFzc05hbWUsIGRpc2Nvbm5lY3QgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvY29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IudHNcbmZ1bmN0aW9uIHNldHVwQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IocGFydGljaXBhbnQpIHtcbiAgY29uc3QgY2xhc3NOYW1lID0gcHJlZml4Q2xhc3MoXCJjb25uZWN0aW9uLXF1YWxpdHlcIik7XG4gIGNvbnN0IGNvbm5lY3Rpb25RdWFsaXR5T2JzZXJ2ZXIgPSBjcmVhdGVDb25uZWN0aW9uUXVhbGl0eU9ic2VydmVyKHBhcnRpY2lwYW50KTtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lLCBjb25uZWN0aW9uUXVhbGl0eU9ic2VydmVyIH07XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL3RyYWNrTXV0ZWRJbmRpY2F0b3IudHNcbmltcG9ydCB7IFRyYWNrIGFzIFRyYWNrOSB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuZnVuY3Rpb24gc2V0dXBUcmFja011dGVkSW5kaWNhdG9yKHRyYWNrUmVmKSB7XG4gIGxldCBjbGFzc0ZvclNvdXJjZSA9IFwidHJhY2stbXV0ZWQtaW5kaWNhdG9yLWNhbWVyYVwiO1xuICBzd2l0Y2ggKHRyYWNrUmVmLnNvdXJjZSkge1xuICAgIGNhc2UgVHJhY2s5LlNvdXJjZS5DYW1lcmE6XG4gICAgICBjbGFzc0ZvclNvdXJjZSA9IFwidHJhY2stbXV0ZWQtaW5kaWNhdG9yLWNhbWVyYVwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBUcmFjazkuU291cmNlLk1pY3JvcGhvbmU6XG4gICAgICBjbGFzc0ZvclNvdXJjZSA9IFwidHJhY2stbXV0ZWQtaW5kaWNhdG9yLW1pY3JvcGhvbmVcIjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuICBjb25zdCBjbGFzc05hbWUgPSBwcmVmaXhDbGFzcyhjbGFzc0ZvclNvdXJjZSk7XG4gIGNvbnN0IG1lZGlhTXV0ZWRPYnNlcnZlciA9IG11dGVkT2JzZXJ2ZXIodHJhY2tSZWYpO1xuICByZXR1cm4geyBjbGFzc05hbWUsIG1lZGlhTXV0ZWRPYnNlcnZlciB9O1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9wYXJ0aWNpcGFudE5hbWUudHNcbmZ1bmN0aW9uIHNldHVwUGFydGljaXBhbnROYW1lKHBhcnRpY2lwYW50KSB7XG4gIGNvbnN0IGluZm9PYnNlcnZlciA9IHBhcnRpY2lwYW50SW5mb09ic2VydmVyKHBhcnRpY2lwYW50KTtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lOiBcImxrLXBhcnRpY2lwYW50LW5hbWVcIiwgaW5mb09ic2VydmVyIH07XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL3BhcnRpY2lwYW50VGlsZS50c1xuZnVuY3Rpb24gc2V0dXBQYXJ0aWNpcGFudFRpbGUoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IHByZWZpeENsYXNzKFwicGFydGljaXBhbnQtdGlsZVwiKTtcbiAgcmV0dXJuIHtcbiAgICBjbGFzc05hbWVcbiAgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvY2hhdC50c1xuaW1wb3J0IHsgY29tcGFyZVZlcnNpb25zLCBSb29tRXZlbnQgYXMgUm9vbUV2ZW50NCB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IGFzIEJlaGF2aW9yU3ViamVjdDIsIFN1YmplY3QgYXMgU3ViamVjdDMsIHNjYW4sIG1hcCBhcyBtYXA2LCB0YWtlVW50aWwsIG1lcmdlIH0gZnJvbSBcInJ4anNcIjtcblxuLy8gc3JjL29ic2VydmFibGVzL2RhdGFDaGFubmVsLnRzXG5pbXBvcnQgeyBPYnNlcnZhYmxlIGFzIE9ic2VydmFibGUzLCBmaWx0ZXIgYXMgZmlsdGVyMiwgbWFwIGFzIG1hcDUgfSBmcm9tIFwicnhqc1wiO1xudmFyIERhdGFUb3BpYyA9IHtcbiAgQ0hBVDogXCJsay1jaGF0LXRvcGljXCIsXG4gIENIQVRfVVBEQVRFOiBcImxrLWNoYXQtdXBkYXRlLXRvcGljXCJcbn07XG5mdW5jdGlvbiBzZW5kTWVzc2FnZShfMCwgXzEpIHtcbiAgcmV0dXJuIF9fYXN5bmModGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogKGxvY2FsUGFydGljaXBhbnQsIHBheWxvYWQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgcmVsaWFibGUsIGRlc3RpbmF0aW9uSWRlbnRpdGllcywgdG9waWMgfSA9IG9wdGlvbnM7XG4gICAgeWllbGQgbG9jYWxQYXJ0aWNpcGFudC5wdWJsaXNoRGF0YShwYXlsb2FkLCB7XG4gICAgICBkZXN0aW5hdGlvbklkZW50aXRpZXMsXG4gICAgICB0b3BpYyxcbiAgICAgIHJlbGlhYmxlXG4gICAgfSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gc2V0dXBEYXRhTWVzc2FnZUhhbmRsZXIocm9vbSwgdG9waWMsIG9uTWVzc2FnZSkge1xuICBjb25zdCB0b3BpY3MgPSBBcnJheS5pc0FycmF5KHRvcGljKSA/IHRvcGljIDogW3RvcGljXTtcbiAgY29uc3QgbWVzc2FnZU9ic2VydmFibGUgPSBjcmVhdGVEYXRhT2JzZXJ2ZXIocm9vbSkucGlwZShcbiAgICBmaWx0ZXIyKFxuICAgICAgKFssICwgLCBtZXNzYWdlVG9waWNdKSA9PiB0b3BpYyA9PT0gdm9pZCAwIHx8IG1lc3NhZ2VUb3BpYyAhPT0gdm9pZCAwICYmIHRvcGljcy5pbmNsdWRlcyhtZXNzYWdlVG9waWMpXG4gICAgKSxcbiAgICBtYXA1KChbcGF5bG9hZCwgcGFydGljaXBhbnQsICwgbWVzc2FnZVRvcGljXSkgPT4ge1xuICAgICAgY29uc3QgbXNnID0ge1xuICAgICAgICBwYXlsb2FkLFxuICAgICAgICB0b3BpYzogbWVzc2FnZVRvcGljLFxuICAgICAgICBmcm9tOiBwYXJ0aWNpcGFudFxuICAgICAgfTtcbiAgICAgIG9uTWVzc2FnZSA9PSBudWxsID8gdm9pZCAwIDogb25NZXNzYWdlKG1zZyk7XG4gICAgICByZXR1cm4gbXNnO1xuICAgIH0pXG4gICk7XG4gIGxldCBpc1NlbmRpbmdTdWJzY3JpYmVyO1xuICBjb25zdCBpc1NlbmRpbmdPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUzKChzdWJzY3JpYmVyKSA9PiB7XG4gICAgaXNTZW5kaW5nU3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gIH0pO1xuICBjb25zdCBzZW5kID0gKF8wLCAuLi5fMSkgPT4gX19hc3luYyh0aGlzLCBbXzAsIC4uLl8xXSwgZnVuY3Rpb24qIChwYXlsb2FkLCBvcHRpb25zID0ge30pIHtcbiAgICBpc1NlbmRpbmdTdWJzY3JpYmVyLm5leHQodHJ1ZSk7XG4gICAgdHJ5IHtcbiAgICAgIHlpZWxkIHNlbmRNZXNzYWdlKHJvb20ubG9jYWxQYXJ0aWNpcGFudCwgcGF5bG9hZCwgX19zcHJlYWRWYWx1ZXMoeyB0b3BpYzogdG9waWNzWzBdIH0sIG9wdGlvbnMpKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNTZW5kaW5nU3Vic2NyaWJlci5uZXh0KGZhbHNlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4geyBtZXNzYWdlT2JzZXJ2YWJsZSwgaXNTZW5kaW5nT2JzZXJ2YWJsZSwgc2VuZCB9O1xufVxuZnVuY3Rpb24gc2V0dXBDaGF0TWVzc2FnZUhhbmRsZXIocm9vbSkge1xuICBjb25zdCBjaGF0T2JzZXJ2YWJsZSA9IGNyZWF0ZUNoYXRPYnNlcnZlcihyb29tKTtcbiAgY29uc3Qgc2VuZCA9ICh0ZXh0KSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc3QgbXNnID0geWllbGQgcm9vbS5sb2NhbFBhcnRpY2lwYW50LnNlbmRDaGF0TWVzc2FnZSh0ZXh0KTtcbiAgICByZXR1cm4gbXNnO1xuICB9KTtcbiAgY29uc3QgZWRpdCA9ICh0ZXh0LCBvcmlnaW5hbE1zZykgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IG1zZyA9IHlpZWxkIHJvb20ubG9jYWxQYXJ0aWNpcGFudC5lZGl0Q2hhdE1lc3NhZ2UodGV4dCwgb3JpZ2luYWxNc2cpO1xuICAgIHJldHVybiBtc2c7XG4gIH0pO1xuICByZXR1cm4geyBjaGF0T2JzZXJ2YWJsZSwgc2VuZCwgZWRpdCB9O1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9jaGF0LnRzXG52YXIgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xudmFyIGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbnZhciB0b3BpY1N1YmplY3RNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xudmFyIGVuY29kZSA9IChtZXNzYWdlKSA9PiBlbmNvZGVyLmVuY29kZShKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XG52YXIgZGVjb2RlID0gKG1lc3NhZ2UpID0+IEpTT04ucGFyc2UoZGVjb2Rlci5kZWNvZGUobWVzc2FnZSkpO1xuZnVuY3Rpb24gc2V0dXBDaGF0KHJvb20sIG9wdGlvbnMpIHtcbiAgdmFyIF9hLCBfYjtcbiAgY29uc3Qgb25EZXN0cm95T2JzZXJ2YWJsZSA9IG5ldyBTdWJqZWN0MygpO1xuICBjb25zdCBzZXJ2ZXJTdXBwb3J0c0NoYXRBcGkgPSAoKSA9PiB7XG4gICAgdmFyIF9hMiwgX2IyLCBfYztcbiAgICByZXR1cm4gKChfYTIgPSByb29tLnNlcnZlckluZm8pID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZWRpdGlvbikgPT09IDEgfHwgISEoKF9iMiA9IHJvb20uc2VydmVySW5mbykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iMi52ZXJzaW9uKSAmJiBjb21wYXJlVmVyc2lvbnMoKF9jID0gcm9vbS5zZXJ2ZXJJbmZvKSA9PSBudWxsID8gdm9pZCAwIDogX2MudmVyc2lvbiwgXCIxLjE3LjJcIikgPiAwO1xuICB9O1xuICBjb25zdCB7IG1lc3NhZ2VEZWNvZGVyLCBtZXNzYWdlRW5jb2RlciwgY2hhbm5lbFRvcGljLCB1cGRhdGVDaGFubmVsVG9waWMgfSA9IG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMgOiB7fTtcbiAgY29uc3QgdG9waWMgPSBjaGFubmVsVG9waWMgIT0gbnVsbCA/IGNoYW5uZWxUb3BpYyA6IERhdGFUb3BpYy5DSEFUO1xuICBjb25zdCB1cGRhdGVUb3BpYyA9IHVwZGF0ZUNoYW5uZWxUb3BpYyAhPSBudWxsID8gdXBkYXRlQ2hhbm5lbFRvcGljIDogRGF0YVRvcGljLkNIQVRfVVBEQVRFO1xuICBsZXQgbmVlZHNTZXR1cCA9IGZhbHNlO1xuICBpZiAoIXRvcGljU3ViamVjdE1hcC5oYXMocm9vbSkpIHtcbiAgICBuZWVkc1NldHVwID0gdHJ1ZTtcbiAgfVxuICBjb25zdCB0b3BpY01hcCA9IChfYSA9IHRvcGljU3ViamVjdE1hcC5nZXQocm9vbSkpICE9IG51bGwgPyBfYSA6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IG1lc3NhZ2VTdWJqZWN0ID0gKF9iID0gdG9waWNNYXAuZ2V0KHRvcGljKSkgIT0gbnVsbCA/IF9iIDogbmV3IFN1YmplY3QzKCk7XG4gIHRvcGljTWFwLnNldCh0b3BpYywgbWVzc2FnZVN1YmplY3QpO1xuICB0b3BpY1N1YmplY3RNYXAuc2V0KHJvb20sIHRvcGljTWFwKTtcbiAgaWYgKG5lZWRzU2V0dXApIHtcbiAgICBjb25zdCB7IG1lc3NhZ2VPYnNlcnZhYmxlIH0gPSBzZXR1cERhdGFNZXNzYWdlSGFuZGxlcihyb29tLCBbdG9waWMsIHVwZGF0ZVRvcGljXSk7XG4gICAgbWVzc2FnZU9ic2VydmFibGUucGlwZSh0YWtlVW50aWwob25EZXN0cm95T2JzZXJ2YWJsZSkpLnN1YnNjcmliZShtZXNzYWdlU3ViamVjdCk7XG4gIH1cbiAgY29uc3QgeyBjaGF0T2JzZXJ2YWJsZSwgc2VuZDogc2VuZENoYXRNZXNzYWdlIH0gPSBzZXR1cENoYXRNZXNzYWdlSGFuZGxlcihyb29tKTtcbiAgY29uc3QgZmluYWxNZXNzYWdlRGVjb2RlciA9IG1lc3NhZ2VEZWNvZGVyICE9IG51bGwgPyBtZXNzYWdlRGVjb2RlciA6IGRlY29kZTtcbiAgY29uc3QgbWVzc2FnZXNPYnNlcnZhYmxlID0gbWVyZ2UoXG4gICAgbWVzc2FnZVN1YmplY3QucGlwZShcbiAgICAgIG1hcDYoKG1zZykgPT4ge1xuICAgICAgICBjb25zdCBwYXJzZWRNZXNzYWdlID0gZmluYWxNZXNzYWdlRGVjb2Rlcihtc2cucGF5bG9hZCk7XG4gICAgICAgIGNvbnN0IG5ld01lc3NhZ2UgPSBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBwYXJzZWRNZXNzYWdlKSwgeyBmcm9tOiBtc2cuZnJvbSB9KTtcbiAgICAgICAgaWYgKGlzSWdub3JhYmxlQ2hhdE1lc3NhZ2UobmV3TWVzc2FnZSkpIHtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdNZXNzYWdlO1xuICAgICAgfSlcbiAgICApLFxuICAgIGNoYXRPYnNlcnZhYmxlLnBpcGUoXG4gICAgICBtYXA2KChbbXNnLCBwYXJ0aWNpcGFudF0pID0+IHtcbiAgICAgICAgcmV0dXJuIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1zZyksIHsgZnJvbTogcGFydGljaXBhbnQgfSk7XG4gICAgICB9KVxuICAgIClcbiAgKS5waXBlKFxuICAgIHNjYW4oKGFjYywgdmFsdWUpID0+IHtcbiAgICAgIHZhciBfYTI7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBpZiAoXCJpZFwiIGluIHZhbHVlICYmIGFjYy5maW5kKChtc2cpID0+IHtcbiAgICAgICAgdmFyIF9hMywgX2IyO1xuICAgICAgICByZXR1cm4gKChfYTMgPSBtc2cuZnJvbSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMy5pZGVudGl0eSkgPT09ICgoX2IyID0gdmFsdWUuZnJvbSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iMi5pZGVudGl0eSkgJiYgbXNnLmlkID09PSB2YWx1ZS5pZDtcbiAgICAgIH0pKSB7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VJbmRleCA9IGFjYy5maW5kSW5kZXgoKG1zZykgPT4gbXNnLmlkID09PSB2YWx1ZS5pZCk7XG4gICAgICAgIGlmIChyZXBsYWNlSW5kZXggPiAtMSkge1xuICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTXNnID0gYWNjW3JlcGxhY2VJbmRleF07XG4gICAgICAgICAgYWNjW3JlcGxhY2VJbmRleF0gPSBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCB2YWx1ZSksIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogb3JpZ2luYWxNc2cudGltZXN0YW1wLFxuICAgICAgICAgICAgZWRpdFRpbWVzdGFtcDogKF9hMiA9IHZhbHVlLmVkaXRUaW1lc3RhbXApICE9IG51bGwgPyBfYTIgOiB2YWx1ZS50aW1lc3RhbXBcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gWy4uLmFjY107XG4gICAgICB9XG4gICAgICByZXR1cm4gWy4uLmFjYywgdmFsdWVdO1xuICAgIH0sIFtdKSxcbiAgICB0YWtlVW50aWwob25EZXN0cm95T2JzZXJ2YWJsZSlcbiAgKTtcbiAgY29uc3QgaXNTZW5kaW5nJCA9IG5ldyBCZWhhdmlvclN1YmplY3QyKGZhbHNlKTtcbiAgY29uc3QgZmluYWxNZXNzYWdlRW5jb2RlciA9IG1lc3NhZ2VFbmNvZGVyICE9IG51bGwgPyBtZXNzYWdlRW5jb2RlciA6IGVuY29kZTtcbiAgY29uc3Qgc2VuZCA9IChtZXNzYWdlKSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgaXNTZW5kaW5nJC5uZXh0KHRydWUpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjaGF0TWVzc2FnZSA9IHlpZWxkIHNlbmRDaGF0TWVzc2FnZShtZXNzYWdlKTtcbiAgICAgIGNvbnN0IGVuY29kZWRMZWdhY3lNc2cgPSBmaW5hbE1lc3NhZ2VFbmNvZGVyKF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGNoYXRNZXNzYWdlKSwge1xuICAgICAgICBpZ25vcmU6IHNlcnZlclN1cHBvcnRzQ2hhdEFwaSgpXG4gICAgICB9KSk7XG4gICAgICB5aWVsZCBzZW5kTWVzc2FnZShyb29tLmxvY2FsUGFydGljaXBhbnQsIGVuY29kZWRMZWdhY3lNc2csIHtcbiAgICAgICAgcmVsaWFibGU6IHRydWUsXG4gICAgICAgIHRvcGljXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjaGF0TWVzc2FnZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNTZW5kaW5nJC5uZXh0KGZhbHNlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCB1cGRhdGUgPSAobWVzc2FnZSwgb3JpZ2luYWxNZXNzYWdlT3JJZCkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgY29uc3Qgb3JpZ2luYWxNZXNzYWdlID0gdHlwZW9mIG9yaWdpbmFsTWVzc2FnZU9ySWQgPT09IFwic3RyaW5nXCIgPyB7IGlkOiBvcmlnaW5hbE1lc3NhZ2VPcklkLCBtZXNzYWdlOiBcIlwiLCB0aW1lc3RhbXAgfSA6IG9yaWdpbmFsTWVzc2FnZU9ySWQ7XG4gICAgaXNTZW5kaW5nJC5uZXh0KHRydWUpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBlZGl0ZWRNZXNzYWdlID0geWllbGQgcm9vbS5sb2NhbFBhcnRpY2lwYW50LmVkaXRDaGF0TWVzc2FnZShtZXNzYWdlLCBvcmlnaW5hbE1lc3NhZ2UpO1xuICAgICAgY29uc3QgZW5jb2RlZExlZ2FjeU1lc3NhZ2UgPSBmaW5hbE1lc3NhZ2VFbmNvZGVyKGVkaXRlZE1lc3NhZ2UpO1xuICAgICAgeWllbGQgc2VuZE1lc3NhZ2Uocm9vbS5sb2NhbFBhcnRpY2lwYW50LCBlbmNvZGVkTGVnYWN5TWVzc2FnZSwge1xuICAgICAgICB0b3BpYzogdXBkYXRlVG9waWMsXG4gICAgICAgIHJlbGlhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBlZGl0ZWRNZXNzYWdlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc1NlbmRpbmckLm5leHQoZmFsc2UpO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgb25EZXN0cm95T2JzZXJ2YWJsZS5uZXh0KCk7XG4gICAgb25EZXN0cm95T2JzZXJ2YWJsZS5jb21wbGV0ZSgpO1xuICAgIHRvcGljU3ViamVjdE1hcC5kZWxldGUocm9vbSk7XG4gIH1cbiAgcm9vbS5vbmNlKFJvb21FdmVudDQuRGlzY29ubmVjdGVkLCBkZXN0cm95KTtcbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlT2JzZXJ2YWJsZTogbWVzc2FnZXNPYnNlcnZhYmxlLFxuICAgIGlzU2VuZGluZ09ic2VydmFibGU6IGlzU2VuZGluZyQsXG4gICAgc2VuZCxcbiAgICB1cGRhdGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzSWdub3JhYmxlQ2hhdE1lc3NhZ2UobXNnKSB7XG4gIHJldHVybiBtc2cuaWdub3JlID09IHRydWU7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL3N0YXJ0QXVkaW8udHNcbmZ1bmN0aW9uIHNldHVwU3RhcnRBdWRpbygpIHtcbiAgY29uc3QgaGFuZGxlU3RhcnRBdWRpb1BsYXliYWNrID0gKHJvb20pID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICBsb2cuaW5mbyhcIlN0YXJ0IEF1ZGlvIGZvciByb29tOiBcIiwgcm9vbSk7XG4gICAgeWllbGQgcm9vbS5zdGFydEF1ZGlvKCk7XG4gIH0pO1xuICBjb25zdCBjbGFzc05hbWUgPSBwcmVmaXhDbGFzcyhcInN0YXJ0LWF1ZGlvLWJ1dHRvblwiKTtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lLCByb29tQXVkaW9QbGF5YmFja0FsbG93ZWRPYnNlcnZhYmxlLCBoYW5kbGVTdGFydEF1ZGlvUGxheWJhY2sgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvc3RhcnRWaWRlby50c1xuZnVuY3Rpb24gc2V0dXBTdGFydFZpZGVvKCkge1xuICBjb25zdCBoYW5kbGVTdGFydFZpZGVvUGxheWJhY2sgPSAocm9vbSkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIGxvZy5pbmZvKFwiU3RhcnQgVmlkZW8gZm9yIHJvb206IFwiLCByb29tKTtcbiAgICB5aWVsZCByb29tLnN0YXJ0VmlkZW8oKTtcbiAgfSk7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IHByZWZpeENsYXNzKFwic3RhcnQtYXVkaW8tYnV0dG9uXCIpO1xuICByZXR1cm4geyBjbGFzc05hbWUsIHJvb21WaWRlb1BsYXliYWNrQWxsb3dlZE9ic2VydmFibGUsIGhhbmRsZVN0YXJ0VmlkZW9QbGF5YmFjayB9O1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9jaGF0VG9nZ2xlLnRzXG5mdW5jdGlvbiBzZXR1cENoYXRUb2dnbGUoKSB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IFtwcmVmaXhDbGFzcyhcImJ1dHRvblwiKSwgcHJlZml4Q2xhc3MoXCJjaGF0LXRvZ2dsZVwiKV0uam9pbihcIiBcIik7XG4gIHJldHVybiB7IGNsYXNzTmFtZSB9O1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9mb2N1c1RvZ2dsZS50c1xuZnVuY3Rpb24gc2V0dXBGb2N1c1RvZ2dsZSgpIHtcbiAgY29uc3QgY2xhc3NOYW1lID0gW3ByZWZpeENsYXNzKFwiYnV0dG9uXCIpLCBwcmVmaXhDbGFzcyhcImZvY3VzLXRvZ2dsZS1idXR0b25cIildLmpvaW4oXCIgXCIpO1xuICByZXR1cm4geyBjbGFzc05hbWUgfTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvY2xlYXJQaW5CdXR0b24udHNcbmZ1bmN0aW9uIHNldHVwQ2xlYXJQaW5CdXR0b24oKSB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IFwibGstY2xlYXItcGluLWJ1dHRvbiBsay1idXR0b25cIjtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lIH07XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL3Jvb20udHNcbmZ1bmN0aW9uIHNldHVwTGl2ZUtpdFJvb20oKSB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IFwibGstcm9vbS1jb250YWluZXJcIjtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lIH07XG59XG5cbi8vIHNyYy9vYnNlcnZhYmxlcy90cmFjay50c1xuaW1wb3J0IHsgUm9vbUV2ZW50IGFzIFJvb21FdmVudDUsIFRyYWNrRXZlbnQgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmltcG9ydCB7IG1hcCBhcyBtYXA3LCBPYnNlcnZhYmxlIGFzIE9ic2VydmFibGU0LCBzdGFydFdpdGggYXMgc3RhcnRXaXRoNSB9IGZyb20gXCJyeGpzXCI7XG5mdW5jdGlvbiB0cmFja09ic2VydmFibGUodHJhY2spIHtcbiAgY29uc3QgdHJhY2tPYnNlcnZlciA9IG9ic2VydmVUcmFja0V2ZW50cyhcbiAgICB0cmFjayxcbiAgICBUcmFja0V2ZW50Lk11dGVkLFxuICAgIFRyYWNrRXZlbnQuVW5tdXRlZCxcbiAgICBUcmFja0V2ZW50LlN1YnNjcmliZWQsXG4gICAgVHJhY2tFdmVudC5VbnN1YnNjcmliZWRcbiAgKTtcbiAgcmV0dXJuIHRyYWNrT2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBvYnNlcnZlVHJhY2tFdmVudHModHJhY2ssIC4uLmV2ZW50cykge1xuICBjb25zdCBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU0KChzdWJzY3JpYmUpID0+IHtcbiAgICBjb25zdCBvblRyYWNrVXBkYXRlID0gKCkgPT4ge1xuICAgICAgc3Vic2NyaWJlLm5leHQodHJhY2spO1xuICAgIH07XG4gICAgZXZlbnRzLmZvckVhY2goKGV2dCkgPT4ge1xuICAgICAgdHJhY2sub24oZXZ0LCBvblRyYWNrVXBkYXRlKTtcbiAgICB9KTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgIGV2ZW50cy5mb3JFYWNoKChldnQpID0+IHtcbiAgICAgICAgdHJhY2sub2ZmKGV2dCwgb25UcmFja1VwZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfSkucGlwZShzdGFydFdpdGg1KHRyYWNrKSk7XG4gIHJldHVybiBvYnNlcnZhYmxlO1xufVxuZnVuY3Rpb24gZ2V0VHJhY2tSZWZlcmVuY2VzKHJvb20sIHNvdXJjZXMsIG9ubHlTdWJzY3JpYmVkVHJhY2tzID0gdHJ1ZSkge1xuICBjb25zdCBsb2NhbFBhcnRpY2lwYW50ID0gcm9vbS5sb2NhbFBhcnRpY2lwYW50O1xuICBjb25zdCBhbGxQYXJ0aWNpcGFudHMgPSBbbG9jYWxQYXJ0aWNpcGFudCwgLi4uQXJyYXkuZnJvbShyb29tLnJlbW90ZVBhcnRpY2lwYW50cy52YWx1ZXMoKSldO1xuICBjb25zdCB0cmFja1JlZmVyZW5jZXMgPSBbXTtcbiAgYWxsUGFydGljaXBhbnRzLmZvckVhY2goKHBhcnRpY2lwYW50KSA9PiB7XG4gICAgc291cmNlcy5mb3JFYWNoKChzb3VyY2UpID0+IHtcbiAgICAgIGNvbnN0IHNvdXJjZVJlZmVyZW5jZXMgPSBBcnJheS5mcm9tKFxuICAgICAgICBwYXJ0aWNpcGFudC50cmFja1B1YmxpY2F0aW9ucy52YWx1ZXMoKVxuICAgICAgKS5maWx0ZXIoXG4gICAgICAgICh0cmFjaykgPT4gdHJhY2suc291cmNlID09PSBzb3VyY2UgJiYgLy8gZWl0aGVyIHJldHVybiBhbGwgb3Igb25seSB0aGUgb25lcyB0aGF0IGFyZSBzdWJzY3JpYmVkXG4gICAgICAgICghb25seVN1YnNjcmliZWRUcmFja3MgfHwgdHJhY2sudHJhY2spXG4gICAgICApLm1hcCgodHJhY2spID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXJ0aWNpcGFudCxcbiAgICAgICAgICBwdWJsaWNhdGlvbjogdHJhY2ssXG4gICAgICAgICAgc291cmNlOiB0cmFjay5zb3VyY2VcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdHJhY2tSZWZlcmVuY2VzLnB1c2goLi4uc291cmNlUmVmZXJlbmNlcyk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4geyB0cmFja1JlZmVyZW5jZXMsIHBhcnRpY2lwYW50czogYWxsUGFydGljaXBhbnRzIH07XG59XG5mdW5jdGlvbiBnZXRQYXJ0aWNpcGFudFRyYWNrUmVmcyhwYXJ0aWNpcGFudCwgaWRlbnRpZmllciwgb25seVN1YnNjcmliZWRUcmFja3MgPSBmYWxzZSkge1xuICBjb25zdCB7IHNvdXJjZXMsIGtpbmQsIG5hbWUgfSA9IGlkZW50aWZpZXI7XG4gIGNvbnN0IHNvdXJjZVJlZmVyZW5jZXMgPSBBcnJheS5mcm9tKHBhcnRpY2lwYW50LnRyYWNrUHVibGljYXRpb25zLnZhbHVlcygpKS5maWx0ZXIoXG4gICAgKHB1YikgPT4gKCFzb3VyY2VzIHx8IHNvdXJjZXMuaW5jbHVkZXMocHViLnNvdXJjZSkpICYmICgha2luZCB8fCBwdWIua2luZCA9PT0ga2luZCkgJiYgKCFuYW1lIHx8IHB1Yi50cmFja05hbWUgPT09IG5hbWUpICYmIC8vIGVpdGhlciByZXR1cm4gYWxsIG9yIG9ubHkgdGhlIG9uZXMgdGhhdCBhcmUgc3Vic2NyaWJlZFxuICAgICghb25seVN1YnNjcmliZWRUcmFja3MgfHwgcHViLnRyYWNrKVxuICApLm1hcCgodHJhY2spID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFydGljaXBhbnQsXG4gICAgICBwdWJsaWNhdGlvbjogdHJhY2ssXG4gICAgICBzb3VyY2U6IHRyYWNrLnNvdXJjZVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gc291cmNlUmVmZXJlbmNlcztcbn1cbmZ1bmN0aW9uIHRyYWNrUmVmZXJlbmNlc09ic2VydmFibGUocm9vbSwgc291cmNlcywgb3B0aW9ucykge1xuICB2YXIgX2EsIF9iO1xuICBjb25zdCBhZGRpdGlvbmFsUm9vbUV2ZW50cyA9IChfYSA9IG9wdGlvbnMuYWRkaXRpb25hbFJvb21FdmVudHMpICE9IG51bGwgPyBfYSA6IGFsbFBhcnRpY2lwYW50Um9vbUV2ZW50cztcbiAgY29uc3Qgb25seVN1YnNjcmliZWRUcmFja3MgPSAoX2IgPSBvcHRpb25zLm9ubHlTdWJzY3JpYmVkKSAhPSBudWxsID8gX2IgOiB0cnVlO1xuICBjb25zdCByb29tRXZlbnRzID0gQXJyYXkuZnJvbShcbiAgICAoLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgICAgUm9vbUV2ZW50NS5QYXJ0aWNpcGFudENvbm5lY3RlZCxcbiAgICAgIFJvb21FdmVudDUuUGFydGljaXBhbnREaXNjb25uZWN0ZWQsXG4gICAgICBSb29tRXZlbnQ1LkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWQsXG4gICAgICBSb29tRXZlbnQ1LkxvY2FsVHJhY2tQdWJsaXNoZWQsXG4gICAgICBSb29tRXZlbnQ1LkxvY2FsVHJhY2tVbnB1Ymxpc2hlZCxcbiAgICAgIFJvb21FdmVudDUuVHJhY2tQdWJsaXNoZWQsXG4gICAgICBSb29tRXZlbnQ1LlRyYWNrVW5wdWJsaXNoZWQsXG4gICAgICBSb29tRXZlbnQ1LlRyYWNrU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZCxcbiAgICAgIC4uLmFkZGl0aW9uYWxSb29tRXZlbnRzXG4gICAgXSkpLnZhbHVlcygpXG4gICk7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBvYnNlcnZlUm9vbUV2ZW50cyhyb29tLCAuLi5yb29tRXZlbnRzKS5waXBlKFxuICAgIG1hcDcoKHJvb20yKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gZ2V0VHJhY2tSZWZlcmVuY2VzKHJvb20yLCBzb3VyY2VzLCBvbmx5U3Vic2NyaWJlZFRyYWNrcyk7XG4gICAgICBsb2cuZGVidWcoYFRyYWNrUmVmZXJlbmNlW10gd2FzIHVwZGF0ZWQuIChsZW5ndGggJHtkYXRhLnRyYWNrUmVmZXJlbmNlcy5sZW5ndGh9KWAsIGRhdGEpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSksXG4gICAgc3RhcnRXaXRoNShnZXRUcmFja1JlZmVyZW5jZXMocm9vbSwgc291cmNlcywgb25seVN1YnNjcmliZWRUcmFja3MpKVxuICApO1xuICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmZ1bmN0aW9uIHBhcnRpY2lwYW50VHJhY2tzT2JzZXJ2YWJsZShwYXJ0aWNpcGFudCwgdHJhY2tJZGVudGlmaWVyKSB7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBvYnNlcnZlUGFydGljaXBhbnRFdmVudHMocGFydGljaXBhbnQsIC4uLnBhcnRpY2lwYW50VHJhY2tFdmVudHMpLnBpcGUoXG4gICAgbWFwNygocGFydGljaXBhbnQyKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gZ2V0UGFydGljaXBhbnRUcmFja1JlZnMocGFydGljaXBhbnQyLCB0cmFja0lkZW50aWZpZXIpO1xuICAgICAgbG9nLmRlYnVnKGBUcmFja1JlZmVyZW5jZVtdIHdhcyB1cGRhdGVkLiAobGVuZ3RoICR7ZGF0YS5sZW5ndGh9KWAsIGRhdGEpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSksXG4gICAgc3RhcnRXaXRoNShnZXRQYXJ0aWNpcGFudFRyYWNrUmVmcyhwYXJ0aWNpcGFudCwgdHJhY2tJZGVudGlmaWVyKSlcbiAgKTtcbiAgcmV0dXJuIG9ic2VydmFibGU7XG59XG5mdW5jdGlvbiB0cmFja0V2ZW50U2VsZWN0b3IocHVibGljYXRpb24sIGV2ZW50KSB7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTQoKHN1YnNjcmliZSkgPT4ge1xuICAgIGNvbnN0IHVwZGF0ZSA9ICguLi5wYXJhbXMpID0+IHtcbiAgICAgIHN1YnNjcmliZS5uZXh0KHBhcmFtcyk7XG4gICAgfTtcbiAgICBwdWJsaWNhdGlvbi5vbihldmVudCwgdXBkYXRlKTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgIHB1YmxpY2F0aW9uLm9mZihldmVudCwgdXBkYXRlKTtcbiAgICB9O1xuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfSk7XG4gIHJldHVybiBvYnNlcnZhYmxlO1xufVxuZnVuY3Rpb24gdHJhY2tUcmFuc2NyaXB0aW9uT2JzZXJ2ZXIocHVibGljYXRpb24pIHtcbiAgcmV0dXJuIHRyYWNrRXZlbnRTZWxlY3RvcihwdWJsaWNhdGlvbiwgVHJhY2tFdmVudC5UcmFuc2NyaXB0aW9uUmVjZWl2ZWQpO1xufVxuZnVuY3Rpb24gdHJhY2tTeW5jVGltZU9ic2VydmVyKHRyYWNrKSB7XG4gIHJldHVybiB0cmFja0V2ZW50U2VsZWN0b3IodHJhY2ssIFRyYWNrRXZlbnQuVGltZVN5bmNVcGRhdGUpLnBpcGUoXG4gICAgbWFwNygoW3RpbWVVcGRhdGVdKSA9PiB0aW1lVXBkYXRlKVxuICApO1xufVxuXG4vLyBzcmMvb2JzZXJ2YWJsZXMvZG9tLWV2ZW50LnRzXG5pbXBvcnQgeyBjb25jYXQgYXMgY29uY2F0MiwgZGlzdGluY3RVbnRpbENoYW5nZWQsIGZyb21FdmVudCwgbWFwIGFzIG1hcDgsIG9mLCBza2lwVW50aWwsIHRpbWVvdXQgfSBmcm9tIFwicnhqc1wiO1xuZnVuY3Rpb24gY3JlYXRlSW50ZXJhY3RpbmdPYnNlcnZhYmxlKGh0bWxFbGVtZW50LCBpbmFjdGl2ZUFmdGVyID0gMWUzKSB7XG4gIGlmIChodG1sRWxlbWVudCA9PT0gbnVsbCkgcmV0dXJuIG9mKGZhbHNlKTtcbiAgY29uc3QgbW92ZSQgPSBmcm9tRXZlbnQoaHRtbEVsZW1lbnQsIFwibW91c2Vtb3ZlXCIsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKG1hcDgoKCkgPT4gdHJ1ZSkpO1xuICBjb25zdCBtb3ZlQW5kU3RvcCQgPSBtb3ZlJC5waXBlKFxuICAgIHRpbWVvdXQoe1xuICAgICAgZWFjaDogaW5hY3RpdmVBZnRlcixcbiAgICAgIHdpdGg6ICgpID0+IGNvbmNhdDIob2YoZmFsc2UpLCBtb3ZlQW5kU3RvcCQucGlwZShza2lwVW50aWwobW92ZSQpKSlcbiAgICB9KSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICk7XG4gIHJldHVybiBtb3ZlQW5kU3RvcCQ7XG59XG5cbi8vIHNyYy9wZXJzaXN0ZW50LXN0b3JhZ2UvbG9jYWwtc3RvcmFnZS1oZWxwZXJzLnRzXG5mdW5jdGlvbiBzYXZlVG9Mb2NhbFN0b3JhZ2Uoa2V5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGxvZy5lcnJvcihcIkxvY2FsIHN0b3JhZ2UgaXMgbm90IGF2YWlsYWJsZS5cIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCBub25FbXB0eVNldHRpbmdzID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgICBPYmplY3QuZW50cmllcyh2YWx1ZSkuZmlsdGVyKChbLCB2YWx1ZTJdKSA9PiB2YWx1ZTIgIT09IFwiXCIpXG4gICAgICApO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShub25FbXB0eVNldHRpbmdzKSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZy5lcnJvcihgRXJyb3Igc2V0dGluZyBpdGVtIHRvIGxvY2FsIHN0b3JhZ2U6ICR7ZXJyb3J9YCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGxvYWRGcm9tTG9jYWxTdG9yYWdlKGtleSkge1xuICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGxvZy5lcnJvcihcIkxvY2FsIHN0b3JhZ2UgaXMgbm90IGF2YWlsYWJsZS5cIik7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IGl0ZW0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIGlmICghaXRlbSkge1xuICAgICAgbG9nLndhcm4oYEl0ZW0gd2l0aCBrZXkgJHtrZXl9IGRvZXMgbm90IGV4aXN0IGluIGxvY2FsIHN0b3JhZ2UuYCk7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5wYXJzZShpdGVtKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2cuZXJyb3IoYEVycm9yIGdldHRpbmcgaXRlbSBmcm9tIGxvY2FsIHN0b3JhZ2U6ICR7ZXJyb3J9YCk7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlTG9jYWxTdG9yYWdlSW50ZXJmYWNlKGtleSkge1xuICByZXR1cm4ge1xuICAgIGxvYWQ6ICgpID0+IGxvYWRGcm9tTG9jYWxTdG9yYWdlKGtleSksXG4gICAgc2F2ZTogKHZhbHVlKSA9PiBzYXZlVG9Mb2NhbFN0b3JhZ2Uoa2V5LCB2YWx1ZSlcbiAgfTtcbn1cblxuLy8gc3JjL3BlcnNpc3RlbnQtc3RvcmFnZS91c2VyLWNob2ljZXMudHNcbnZhciBVU0VSX0NIT0lDRVNfS0VZID0gYCR7Y3NzUHJlZml4fS11c2VyLWNob2ljZXNgO1xudmFyIGRlZmF1bHRVc2VyQ2hvaWNlcyA9IHtcbiAgdmlkZW9FbmFibGVkOiB0cnVlLFxuICBhdWRpb0VuYWJsZWQ6IHRydWUsXG4gIHZpZGVvRGV2aWNlSWQ6IFwiXCIsXG4gIGF1ZGlvRGV2aWNlSWQ6IFwiXCIsXG4gIHVzZXJuYW1lOiBcIlwiXG59O1xudmFyIHsgbG9hZCwgc2F2ZSB9ID0gY3JlYXRlTG9jYWxTdG9yYWdlSW50ZXJmYWNlKFVTRVJfQ0hPSUNFU19LRVkpO1xuZnVuY3Rpb24gc2F2ZVVzZXJDaG9pY2VzKHVzZXJDaG9pY2VzLCBwcmV2ZW50U2F2ZSA9IGZhbHNlKSB7XG4gIGlmIChwcmV2ZW50U2F2ZSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBzYXZlKHVzZXJDaG9pY2VzKTtcbn1cbmZ1bmN0aW9uIGxvYWRVc2VyQ2hvaWNlcyhkZWZhdWx0cywgcHJldmVudExvYWQgPSBmYWxzZSkge1xuICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICBjb25zdCBmYWxsYmFjayA9IHtcbiAgICB2aWRlb0VuYWJsZWQ6IChfYSA9IGRlZmF1bHRzID09IG51bGwgPyB2b2lkIDAgOiBkZWZhdWx0cy52aWRlb0VuYWJsZWQpICE9IG51bGwgPyBfYSA6IGRlZmF1bHRVc2VyQ2hvaWNlcy52aWRlb0VuYWJsZWQsXG4gICAgYXVkaW9FbmFibGVkOiAoX2IgPSBkZWZhdWx0cyA9PSBudWxsID8gdm9pZCAwIDogZGVmYXVsdHMuYXVkaW9FbmFibGVkKSAhPSBudWxsID8gX2IgOiBkZWZhdWx0VXNlckNob2ljZXMuYXVkaW9FbmFibGVkLFxuICAgIHZpZGVvRGV2aWNlSWQ6IChfYyA9IGRlZmF1bHRzID09IG51bGwgPyB2b2lkIDAgOiBkZWZhdWx0cy52aWRlb0RldmljZUlkKSAhPSBudWxsID8gX2MgOiBkZWZhdWx0VXNlckNob2ljZXMudmlkZW9EZXZpY2VJZCxcbiAgICBhdWRpb0RldmljZUlkOiAoX2QgPSBkZWZhdWx0cyA9PSBudWxsID8gdm9pZCAwIDogZGVmYXVsdHMuYXVkaW9EZXZpY2VJZCkgIT0gbnVsbCA/IF9kIDogZGVmYXVsdFVzZXJDaG9pY2VzLmF1ZGlvRGV2aWNlSWQsXG4gICAgdXNlcm5hbWU6IChfZSA9IGRlZmF1bHRzID09IG51bGwgPyB2b2lkIDAgOiBkZWZhdWx0cy51c2VybmFtZSkgIT0gbnVsbCA/IF9lIDogZGVmYXVsdFVzZXJDaG9pY2VzLnVzZXJuYW1lXG4gIH07XG4gIGlmIChwcmV2ZW50TG9hZCkge1xuICAgIHJldHVybiBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBtYXliZUxvYWRlZE9iamVjdCA9IGxvYWQoKTtcbiAgICBjb25zdCByZXN1bHQgPSBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZmFsbGJhY2spLCBtYXliZUxvYWRlZE9iamVjdCAhPSBudWxsID8gbWF5YmVMb2FkZWRPYmplY3QgOiB7fSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuZXhwb3J0IHtcbiAgRGF0YVRvcGljLFxuICBHUklEX0xBWU9VVFMsXG4gIFBJTl9ERUZBVUxUX1NUQVRFLFxuICBXSURHRVRfREVGQVVMVF9TVEFURSxcbiAgYWN0aXZlU3BlYWtlck9ic2VydmVyLFxuICBhZGRNZWRpYVRpbWVzdGFtcFRvVHJhbnNjcmlwdGlvbixcbiAgYWxsUGFydGljaXBhbnRFdmVudHMsXG4gIGFsbFBhcnRpY2lwYW50Um9vbUV2ZW50cyxcbiAgYWxsUmVtb3RlUGFydGljaXBhbnRFdmVudHMsXG4gIGFsbFJlbW90ZVBhcnRpY2lwYW50Um9vbUV2ZW50cyxcbiAgYXR0YWNoSWZTdWJzY3JpYmVkLFxuICBjb21wdXRlTWVudVBvc2l0aW9uLFxuICBjb25uZWN0ZWRQYXJ0aWNpcGFudE9ic2VydmVyLFxuICBjb25uZWN0ZWRQYXJ0aWNpcGFudHNPYnNlcnZlcixcbiAgY29ubmVjdGlvblN0YXRlT2JzZXJ2ZXIsXG4gIGNyZWF0ZUFjdGl2ZURldmljZU9ic2VydmFibGUsXG4gIGNyZWF0ZUNoYXRPYnNlcnZlcixcbiAgY3JlYXRlQ29ubmVjdGlvblF1YWxpdHlPYnNlcnZlcixcbiAgY3JlYXRlRGF0YU9ic2VydmVyLFxuICBjcmVhdGVEZWZhdWx0R3JhbW1hcixcbiAgY3JlYXRlRW1haWxSZWdFeHAsXG4gIGNyZWF0ZUludGVyYWN0aW5nT2JzZXJ2YWJsZSxcbiAgY3JlYXRlSXNTcGVha2luZ09ic2VydmVyLFxuICBjcmVhdGVNZWRpYURldmljZU9ic2VydmVyLFxuICBjcmVhdGVUcmFja09ic2VydmVyLFxuICBjcmVhdGVVcmxSZWdFeHAsXG4gIGNzc1ByZWZpeCxcbiAgZGVkdXBlU2VnbWVudHMsXG4gIGRlZmF1bHRVc2VyQ2hvaWNlcyxcbiAgZGlkQWN0aXZlU2VnbWVudHNDaGFuZ2UsXG4gIGVuY3J5cHRpb25TdGF0dXNPYnNlcnZhYmxlLFxuICBnZXRBY3RpdmVUcmFuc2NyaXB0aW9uU2VnbWVudHMsXG4gIGdldFNjcm9sbEJhcldpZHRoLFxuICBnZXRUcmFja0J5SWRlbnRpZmllcixcbiAgZ2V0VHJhY2tSZWZlcmVuY2VJZCxcbiAgZ2V0VHJhY2tSZWZlcmVuY2VTb3VyY2UsXG4gIGlzRXF1YWxUcmFja1JlZixcbiAgaXNMb2NhbCxcbiAgaXNNb2JpbGVCcm93c2VyLFxuICBpc1BhcnRpY2lwYW50VHJhY2tSZWZlcmVuY2VQaW5uZWQsXG4gIGlzUGxhY2Vob2xkZXJSZXBsYWNlbWVudCxcbiAgaXNSZW1vdGUsXG4gIGlzU291cmNlV2l0T3B0aW9ucyxcbiAgaXNTb3VyY2VzV2l0aE9wdGlvbnMsXG4gIGlzVHJhY2tSZWZlcmVuY2UsXG4gIGlzVHJhY2tSZWZlcmVuY2VQaW5uZWQsXG4gIGlzVHJhY2tSZWZlcmVuY2VQbGFjZWhvbGRlcixcbiAgaXNXZWIsXG4gIGxvYWRVc2VyQ2hvaWNlcyxcbiAgbG9nLFxuICBtdXRlZE9ic2VydmVyLFxuICBvYnNlcnZlUGFydGljaXBhbnRFdmVudHMsXG4gIG9ic2VydmVQYXJ0aWNpcGFudE1lZGlhLFxuICBvYnNlcnZlUm9vbUV2ZW50cyxcbiAgb2JzZXJ2ZVRyYWNrRXZlbnRzLFxuICBwYXJ0aWNpcGFudEF0dHJpYnV0ZXNPYnNlcnZlcixcbiAgcGFydGljaXBhbnRCeUlkZW50aWZpZXJPYnNlcnZlcixcbiAgcGFydGljaXBhbnRFdmVudFNlbGVjdG9yLFxuICBwYXJ0aWNpcGFudEluZm9PYnNlcnZlcixcbiAgcGFydGljaXBhbnRQZXJtaXNzaW9uT2JzZXJ2ZXIsXG4gIHBhcnRpY2lwYW50VHJhY2tFdmVudHMsXG4gIHBhcnRpY2lwYW50VHJhY2tzT2JzZXJ2YWJsZSxcbiAgcmVjb3JkaW5nU3RhdHVzT2JzZXJ2YWJsZSxcbiAgcm9vbUF1ZGlvUGxheWJhY2tBbGxvd2VkT2JzZXJ2YWJsZSxcbiAgcm9vbUV2ZW50U2VsZWN0b3IsXG4gIHJvb21JbmZvT2JzZXJ2ZXIsXG4gIHJvb21PYnNlcnZlcixcbiAgcm9vbVZpZGVvUGxheWJhY2tBbGxvd2VkT2JzZXJ2YWJsZSxcbiAgc2F2ZVVzZXJDaG9pY2VzLFxuICBzY3JlZW5TaGFyZU9ic2VydmVyLFxuICBzZWxlY3RHcmlkTGF5b3V0LFxuICBzZW5kTWVzc2FnZSxcbiAgc2V0RGlmZmVyZW5jZSxcbiAgc2V0TG9nRXh0ZW5zaW9uLFxuICBzZXRMb2dMZXZlbCxcbiAgc2V0dXBDaGF0LFxuICBzZXR1cENoYXRNZXNzYWdlSGFuZGxlcixcbiAgc2V0dXBDaGF0VG9nZ2xlLFxuICBzZXR1cENsZWFyUGluQnV0dG9uLFxuICBzZXR1cENvbm5lY3Rpb25RdWFsaXR5SW5kaWNhdG9yLFxuICBzZXR1cERhdGFNZXNzYWdlSGFuZGxlcixcbiAgc2V0dXBEZXZpY2VTZWxlY3RvcixcbiAgc2V0dXBEaXNjb25uZWN0QnV0dG9uLFxuICBzZXR1cEZvY3VzVG9nZ2xlLFxuICBzZXR1cExpdmVLaXRSb29tLFxuICBzZXR1cE1hbnVhbFRvZ2dsZSxcbiAgc2V0dXBNZWRpYVRvZ2dsZSxcbiAgc2V0dXBNZWRpYVRyYWNrLFxuICBzZXR1cFBhcnRpY2lwYW50TmFtZSxcbiAgc2V0dXBQYXJ0aWNpcGFudFRpbGUsXG4gIHNldHVwU3RhcnRBdWRpbyxcbiAgc2V0dXBTdGFydFZpZGVvLFxuICBzZXR1cFRyYWNrTXV0ZWRJbmRpY2F0b3IsXG4gIHNvcnRQYXJ0aWNpcGFudHMsXG4gIHNvcnRUcmFja1JlZmVyZW5jZXMsXG4gIHN1cHBvcnRzU2NyZWVuU2hhcmluZyxcbiAgdG9rZW5pemUsXG4gIHRyYWNrRXZlbnRTZWxlY3RvcixcbiAgdHJhY2tPYnNlcnZhYmxlLFxuICB0cmFja1JlZmVyZW5jZXNPYnNlcnZhYmxlLFxuICB0cmFja1N5bmNUaW1lT2JzZXJ2ZXIsXG4gIHRyYWNrVHJhbnNjcmlwdGlvbk9ic2VydmVyLFxuICB1cGRhdGVQYWdlcyxcbiAgd2FzQ2xpY2tPdXRzaWRlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsImltcG9ydCB0eXBlIHsgV2lkZ2V0U3RhdGUgfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0IHR5cGUgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB0eXBlIENoYXRDb250ZXh0QWN0aW9uID1cbiAgfCB7IG1zZzogJ3Nob3dfY2hhdCcgfVxuICB8IHsgbXNnOiAnaGlkZV9jaGF0JyB9XG4gIHwgeyBtc2c6ICd0b2dnbGVfY2hhdCcgfVxuICB8IHsgbXNnOiAndW5yZWFkX21zZyc7IGNvdW50OiBudW1iZXIgfVxuICB8IHsgbXNnOiAndG9nZ2xlX3NldHRpbmdzJyB9O1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSBXaWRnZXRDb250ZXh0VHlwZSA9IHtcbiAgZGlzcGF0Y2g/OiBSZWFjdC5EaXNwYXRjaDxDaGF0Q29udGV4dEFjdGlvbj47XG4gIHN0YXRlPzogV2lkZ2V0U3RhdGU7XG59O1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gY2hhdFJlZHVjZXIoc3RhdGU6IFdpZGdldFN0YXRlLCBhY3Rpb246IENoYXRDb250ZXh0QWN0aW9uKTogV2lkZ2V0U3RhdGUge1xuICBpZiAoYWN0aW9uLm1zZyA9PT0gJ3Nob3dfY2hhdCcpIHtcbiAgICByZXR1cm4geyAuLi5zdGF0ZSwgc2hvd0NoYXQ6IHRydWUsIHVucmVhZE1lc3NhZ2VzOiAwIH07XG4gIH0gZWxzZSBpZiAoYWN0aW9uLm1zZyA9PT0gJ2hpZGVfY2hhdCcpIHtcbiAgICByZXR1cm4geyAuLi5zdGF0ZSwgc2hvd0NoYXQ6IGZhbHNlIH07XG4gIH0gZWxzZSBpZiAoYWN0aW9uLm1zZyA9PT0gJ3RvZ2dsZV9jaGF0Jykge1xuICAgIGNvbnN0IG5ld1N0YXRlID0geyAuLi5zdGF0ZSwgc2hvd0NoYXQ6ICFzdGF0ZS5zaG93Q2hhdCB9O1xuICAgIGlmIChuZXdTdGF0ZS5zaG93Q2hhdCA9PT0gdHJ1ZSkge1xuICAgICAgbmV3U3RhdGUudW5yZWFkTWVzc2FnZXMgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3U3RhdGU7XG4gIH0gZWxzZSBpZiAoYWN0aW9uLm1zZyA9PT0gJ3VucmVhZF9tc2cnKSB7XG4gICAgcmV0dXJuIHsgLi4uc3RhdGUsIHVucmVhZE1lc3NhZ2VzOiBhY3Rpb24uY291bnQgfTtcbiAgfSBlbHNlIGlmIChhY3Rpb24ubXNnID09PSAndG9nZ2xlX3NldHRpbmdzJykge1xuICAgIHJldHVybiB7IC4uLnN0YXRlLCBzaG93U2V0dGluZ3M6ICFzdGF0ZS5zaG93U2V0dGluZ3MgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyAuLi5zdGF0ZSB9O1xuICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IFBpblN0YXRlLCBUcmFja1JlZmVyZW5jZU9yUGxhY2Vob2xkZXIgfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0IHR5cGUgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB0eXBlIFBpbkFjdGlvbiA9XG4gIHwge1xuICAgICAgbXNnOiAnc2V0X3Bpbic7XG4gICAgICB0cmFja1JlZmVyZW5jZTogVHJhY2tSZWZlcmVuY2VPclBsYWNlaG9sZGVyO1xuICAgIH1cbiAgfCB7IG1zZzogJ2NsZWFyX3BpbicgfTtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHR5cGUgUGluQ29udGV4dFR5cGUgPSB7XG4gIGRpc3BhdGNoPzogUmVhY3QuRGlzcGF0Y2g8UGluQWN0aW9uPjtcbiAgc3RhdGU/OiBQaW5TdGF0ZTtcbn07XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBwaW5SZWR1Y2VyKHN0YXRlOiBQaW5TdGF0ZSwgYWN0aW9uOiBQaW5BY3Rpb24pOiBQaW5TdGF0ZSB7XG4gIGlmIChhY3Rpb24ubXNnID09PSAnc2V0X3BpbicpIHtcbiAgICByZXR1cm4gW2FjdGlvbi50cmFja1JlZmVyZW5jZV07XG4gIH0gZWxzZSBpZiAoYWN0aW9uLm1zZyA9PT0gJ2NsZWFyX3BpbicpIHtcbiAgICByZXR1cm4gW107XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHsgLi4uc3RhdGUgfTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUElOX0RFRkFVTFRfU1RBVEUsIFdJREdFVF9ERUZBVUxUX1NUQVRFIH0gZnJvbSAnQGxpdmVraXQvY29tcG9uZW50cy1jb3JlJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgUGluQ29udGV4dFR5cGUgfSBmcm9tICcuL3Bpbi1jb250ZXh0JztcbmltcG9ydCB0eXBlIHsgV2lkZ2V0Q29udGV4dFR5cGUgfSBmcm9tICcuL2NoYXQtY29udGV4dCc7XG5pbXBvcnQgeyBjaGF0UmVkdWNlciB9IGZyb20gJy4vY2hhdC1jb250ZXh0JztcbmltcG9ydCB7IHBpblJlZHVjZXIgfSBmcm9tICcuL3Bpbi1jb250ZXh0JztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIExheW91dENvbnRleHRUeXBlID0ge1xuICBwaW46IFBpbkNvbnRleHRUeXBlO1xuICB3aWRnZXQ6IFdpZGdldENvbnRleHRUeXBlO1xufTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBMYXlvdXRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxMYXlvdXRDb250ZXh0VHlwZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgYSBsYXlvdXQgY29udGV4dCBpcyBwcm92aWRlZCB2aWEgY29udGV4dC5cbiAqIElmIG5vIGxheW91dCBjb250ZXh0IGlzIHByb3ZpZGVkLCBhbiBlcnJvciBpcyB0aHJvd24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMYXlvdXRDb250ZXh0KCk6IExheW91dENvbnRleHRUeXBlIHtcbiAgY29uc3QgbGF5b3V0Q29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGF5b3V0Q29udGV4dCk7XG4gIGlmICghbGF5b3V0Q29udGV4dCkge1xuICAgIHRocm93IEVycm9yKCdUcmllZCB0byBhY2Nlc3MgTGF5b3V0Q29udGV4dCBjb250ZXh0IG91dHNpZGUgYSBMYXlvdXRDb250ZXh0UHJvdmlkZXIgcHJvdmlkZXIuJyk7XG4gIH1cbiAgcmV0dXJuIGxheW91dENvbnRleHQ7XG59XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0IGEgbGF5b3V0IGNvbnRleHQgaXMgcHJvdmlkZWQsIGVpdGhlciB2aWEgY29udGV4dCBvciBleHBsaWNpdGx5IGFzIGEgcGFyYW1ldGVyLlxuICogSWYgbm90IGluc2lkZSBhIGBMYXlvdXRDb250ZXh0YCBhbmQgbm8gbGF5b3V0IGNvbnRleHQgaXMgcHJvdmlkZWQsIGFuIGVycm9yIGlzIHRocm93bi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVuc3VyZUxheW91dENvbnRleHQobGF5b3V0Q29udGV4dD86IExheW91dENvbnRleHRUeXBlKSB7XG4gIGNvbnN0IGxheW91dCA9IHVzZU1heWJlTGF5b3V0Q29udGV4dCgpO1xuICBsYXlvdXRDb250ZXh0ID8/PSBsYXlvdXQ7XG4gIGlmICghbGF5b3V0Q29udGV4dCkge1xuICAgIHRocm93IEVycm9yKCdUcmllZCB0byBhY2Nlc3MgTGF5b3V0Q29udGV4dCBjb250ZXh0IG91dHNpZGUgYSBMYXlvdXRDb250ZXh0UHJvdmlkZXIgcHJvdmlkZXIuJyk7XG4gIH1cbiAgcmV0dXJuIGxheW91dENvbnRleHQ7XG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ3JlYXRlTGF5b3V0Q29udGV4dCgpOiBMYXlvdXRDb250ZXh0VHlwZSB7XG4gIGNvbnN0IFtwaW5TdGF0ZSwgcGluRGlzcGF0Y2hdID0gUmVhY3QudXNlUmVkdWNlcihwaW5SZWR1Y2VyLCBQSU5fREVGQVVMVF9TVEFURSk7XG4gIGNvbnN0IFt3aWRnZXRTdGF0ZSwgd2lkZ2V0RGlzcGF0Y2hdID0gUmVhY3QudXNlUmVkdWNlcihjaGF0UmVkdWNlciwgV0lER0VUX0RFRkFVTFRfU1RBVEUpO1xuICByZXR1cm4ge1xuICAgIHBpbjogeyBkaXNwYXRjaDogcGluRGlzcGF0Y2gsIHN0YXRlOiBwaW5TdGF0ZSB9LFxuICAgIHdpZGdldDogeyBkaXNwYXRjaDogd2lkZ2V0RGlzcGF0Y2gsIHN0YXRlOiB3aWRnZXRTdGF0ZSB9LFxuICB9O1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVuc3VyZUNyZWF0ZUxheW91dENvbnRleHQobGF5b3V0Q29udGV4dD86IExheW91dENvbnRleHRUeXBlKTogTGF5b3V0Q29udGV4dFR5cGUge1xuICBjb25zdCBbcGluU3RhdGUsIHBpbkRpc3BhdGNoXSA9IFJlYWN0LnVzZVJlZHVjZXIocGluUmVkdWNlciwgUElOX0RFRkFVTFRfU1RBVEUpO1xuICBjb25zdCBbd2lkZ2V0U3RhdGUsIHdpZGdldERpc3BhdGNoXSA9IFJlYWN0LnVzZVJlZHVjZXIoY2hhdFJlZHVjZXIsIFdJREdFVF9ERUZBVUxUX1NUQVRFKTtcbiAgcmV0dXJuIChcbiAgICBsYXlvdXRDb250ZXh0ID8/IHtcbiAgICAgIHBpbjogeyBkaXNwYXRjaDogcGluRGlzcGF0Y2gsIHN0YXRlOiBwaW5TdGF0ZSB9LFxuICAgICAgd2lkZ2V0OiB7IGRpc3BhdGNoOiB3aWRnZXREaXNwYXRjaCwgc3RhdGU6IHdpZGdldFN0YXRlIH0sXG4gICAgfVxuICApO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBsYXlvdXQgY29udGV4dCBmcm9tIHRoZSBgTGF5b3V0Q29udGV4dGAgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UgYHVuZGVmaW5lZGAuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNYXliZUxheW91dENvbnRleHQoKTogTGF5b3V0Q29udGV4dFR5cGUgfCB1bmRlZmluZWQge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMYXlvdXRDb250ZXh0KTtcbn1cbiIsImltcG9ydCB0eXBlIHsgVHJhY2tSZWZlcmVuY2VPclBsYWNlaG9sZGVyIH0gZnJvbSAnQGxpdmVraXQvY29tcG9uZW50cy1jb3JlJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBUaGlzIGNvbnRleHQgcHJvdmlkZXMgYSBgVHJhY2tSZWZlcmVuY2VPclBsYWNlaG9sZGVyYCB0byBhbGwgY2hpbGQgY29tcG9uZW50cy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFRyYWNrUmVmQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8VHJhY2tSZWZlcmVuY2VPclBsYWNlaG9sZGVyIHwgdW5kZWZpbmVkPihcbiAgdW5kZWZpbmVkLFxuKTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgYSB0cmFjayByZWZlcmVuY2UgaXMgcHJvdmlkZWQgdmlhIGNvbnRleHQuXG4gKiBJZiBub3QgaW5zaWRlIGEgYFRyYWNrUmVmQ29udGV4dGAsIGFuIGVycm9yIGlzIHRocm93bi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVRyYWNrUmVmQ29udGV4dCgpIHtcbiAgY29uc3QgdHJhY2tSZWZlcmVuY2UgPSBSZWFjdC51c2VDb250ZXh0KFRyYWNrUmVmQ29udGV4dCk7XG4gIGlmICghdHJhY2tSZWZlcmVuY2UpIHtcbiAgICB0aHJvdyBFcnJvcigndHJpZWQgdG8gYWNjZXNzIHRyYWNrIGNvbnRleHQgb3V0c2lkZSBvZiB0cmFjayBjb250ZXh0IHByb3ZpZGVyJyk7XG4gIH1cbiAgcmV0dXJuIHRyYWNrUmVmZXJlbmNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSB0cmFjayByZWZlcmVuY2UgZnJvbSB0aGUgYFRyYWNrUmVmQ29udGV4dGAgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UgYHVuZGVmaW5lZGAuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNYXliZVRyYWNrUmVmQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoVHJhY2tSZWZDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgYSB0cmFjayByZWZlcmVuY2UgaXMgcHJvdmlkZWQsIGVpdGhlciB2aWEgY29udGV4dCBvciBleHBsaWNpdGx5IGFzIGEgcGFyYW1ldGVyLlxuICogSWYgbm90IGluc2lkZSBhIGBUcmFja1JlZkNvbnRleHRgIGFuZCBubyB0cmFjayByZWZlcmVuY2UgaXMgcHJvdmlkZWQsIGFuIGVycm9yIGlzIHRocm93bi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVuc3VyZVRyYWNrUmVmKHRyYWNrUmVmPzogVHJhY2tSZWZlcmVuY2VPclBsYWNlaG9sZGVyKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VNYXliZVRyYWNrUmVmQ29udGV4dCgpO1xuICBjb25zdCByZWYgPSB0cmFja1JlZiA/PyBjb250ZXh0O1xuICBpZiAoIXJlZikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdObyBUcmFja1JlZiwgbWFrZSBzdXJlIHlvdSBhcmUgaW5zaWRlIGEgVHJhY2tSZWZDb250ZXh0IG9yIHBhc3MgdGhlIFRyYWNrUmVmIGV4cGxpY2l0bHknLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlZjtcbn1cbiIsImltcG9ydCB0eXBlIHsgUGFydGljaXBhbnQgfSBmcm9tICdsaXZla2l0LWNsaWVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VNYXliZVRyYWNrUmVmQ29udGV4dCB9IGZyb20gJy4vdHJhY2stcmVmZXJlbmNlLWNvbnRleHQnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IFBhcnRpY2lwYW50Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8UGFydGljaXBhbnQgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0IGEgcGFydGljaXBhbnQgaXMgcHJvdmlkZWQgdmlhIGNvbnRleHQuXG4gKiBJZiBub3QgaW5zaWRlIGEgYFBhcnRpY2lwYW50Q29udGV4dGAsIGFuIGVycm9yIGlzIHRocm93bi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVBhcnRpY2lwYW50Q29udGV4dCgpIHtcbiAgY29uc3QgcGFydGljaXBhbnQgPSBSZWFjdC51c2VDb250ZXh0KFBhcnRpY2lwYW50Q29udGV4dCk7XG4gIGlmICghcGFydGljaXBhbnQpIHtcbiAgICB0aHJvdyBFcnJvcigndHJpZWQgdG8gYWNjZXNzIHBhcnRpY2lwYW50IGNvbnRleHQgb3V0c2lkZSBvZiBwYXJ0aWNpcGFudCBjb250ZXh0IHByb3ZpZGVyJyk7XG4gIH1cbiAgcmV0dXJuIHBhcnRpY2lwYW50O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXJ0aWNpcGFudCBmcm9tIHRoZSBgUGFydGljaXBhbnRDb250ZXh0YCBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSBgdW5kZWZpbmVkYC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU1heWJlUGFydGljaXBhbnRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChQYXJ0aWNpcGFudENvbnRleHQpO1xufVxuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCBhIHBhcnRpY2lwYW50IGlzIHByb3ZpZGVkLCBlaXRoZXIgdmlhIGNvbnRleHQgb3IgZXhwbGljaXRseSBhcyBhIHBhcmFtZXRlci5cbiAqIElmIG5vdCBpbnNpZGUgYSBgUGFydGljaXBhbnRDb250ZXh0YCBhbmQgbm8gcGFydGljaXBhbnQgaXMgcHJvdmlkZWQsIGFuIGVycm9yIGlzIHRocm93bi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVuc3VyZVBhcnRpY2lwYW50KHBhcnRpY2lwYW50PzogUGFydGljaXBhbnQpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZU1heWJlUGFydGljaXBhbnRDb250ZXh0KCk7XG4gIGNvbnN0IHRyYWNrQ29udGV4dCA9IHVzZU1heWJlVHJhY2tSZWZDb250ZXh0KCk7XG4gIGNvbnN0IHAgPSBwYXJ0aWNpcGFudCA/PyBjb250ZXh0ID8/IHRyYWNrQ29udGV4dD8ucGFydGljaXBhbnQ7XG4gIGlmICghcCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdObyBwYXJ0aWNpcGFudCBwcm92aWRlZCwgbWFrZSBzdXJlIHlvdSBhcmUgaW5zaWRlIGEgcGFydGljaXBhbnQgY29udGV4dCBvciBwYXNzIHRoZSBwYXJ0aWNpcGFudCBleHBsaWNpdGx5JyxcbiAgICApO1xuICB9XG4gIHJldHVybiBwO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBSb29tIH0gZnJvbSAnbGl2ZWtpdC1jbGllbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IFJvb21Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxSb29tIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCBhIHJvb20gaXMgcHJvdmlkZWQgdmlhIGNvbnRleHQuXG4gKiBJZiBubyByb29tIGlzIHByb3ZpZGVkLCBhbiBlcnJvciBpcyB0aHJvd24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb29tQ29udGV4dCgpIHtcbiAgY29uc3QgY3R4ID0gUmVhY3QudXNlQ29udGV4dChSb29tQ29udGV4dCk7XG4gIGlmICghY3R4KSB7XG4gICAgdGhyb3cgRXJyb3IoJ3RyaWVkIHRvIGFjY2VzcyByb29tIGNvbnRleHQgb3V0c2lkZSBvZiBsaXZla2l0IHJvb20gY29tcG9uZW50Jyk7XG4gIH1cbiAgcmV0dXJuIGN0eDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByb29tIGNvbnRleHQgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UgdW5kZWZpbmVkLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWF5YmVSb29tQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoUm9vbUNvbnRleHQpO1xufVxuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCBhIHJvb20gaXMgcHJvdmlkZWQsIGVpdGhlciB2aWEgY29udGV4dCBvciBleHBsaWNpdGx5IGFzIGEgcGFyYW1ldGVyLlxuICogSWYgbm8gcm9vbSBpcyBwcm92aWRlZCwgYW4gZXJyb3IgaXMgdGhyb3duLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRW5zdXJlUm9vbShyb29tPzogUm9vbSkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlTWF5YmVSb29tQ29udGV4dCgpO1xuICBjb25zdCByID0gcm9vbSA/PyBjb250ZXh0O1xuICBpZiAoIXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnTm8gcm9vbSBwcm92aWRlZCwgbWFrZSBzdXJlIHlvdSBhcmUgaW5zaWRlIGEgUm9vbSBjb250ZXh0IG9yIHBhc3MgdGhlIHJvb20gZXhwbGljaXRseScsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlRmxhZ3Mge1xuICBhdXRvU3Vic2NyaXB0aW9uPzogYm9vbGVhbjtcbn1cblxudHlwZSBGZWF0dXJlQ29udGV4dDxUIGV4dGVuZHMgYm9vbGVhbiA9IGZhbHNlPiA9IFQgZXh0ZW5kcyB0cnVlXG4gID8gRmVhdHVyZUZsYWdzXG4gIDogRmVhdHVyZUZsYWdzIHwgdW5kZWZpbmVkO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgTEtGZWF0dXJlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8RmVhdHVyZUZsYWdzIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRmVhdHVyZUNvbnRleHQ8VCBleHRlbmRzIGJvb2xlYW4+KHJlcXVpcmU/OiBUKTogRmVhdHVyZUNvbnRleHQ8VD4ge1xuICBjb25zdCBjdHggPSBSZWFjdC51c2VDb250ZXh0KExLRmVhdHVyZUNvbnRleHQpIGFzIEZlYXR1cmVDb250ZXh0PFQ+O1xuICBpZiAocmVxdWlyZSA9PT0gdHJ1ZSkge1xuICAgIGlmIChjdHgpIHtcbiAgICAgIHJldHVybiBjdHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKCd0cmllZCB0byBhY2Nlc3MgZmVhdHVyZSBjb250ZXh0LCBidXQgbm9uZSBpcyBwcmVzZW50Jyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjdHg7XG59XG4iXSwibmFtZXMiOlsibWluIiwibWF4Iiwicm91bmQiLCJjcmVhdGVDb29yZHMiLCJ2Iiwib3Bwb3NpdGVTaWRlTWFwIiwib3Bwb3NpdGVBbGlnbm1lbnRNYXAiLCJjbGFtcCIsInN0YXJ0IiwidmFsdWUiLCJlbmQiLCJldmFsdWF0ZSIsInBhcmFtIiwiZ2V0U2lkZSIsInBsYWNlbWVudCIsImdldEFsaWdubWVudCIsImdldE9wcG9zaXRlQXhpcyIsImF4aXMiLCJnZXRBeGlzTGVuZ3RoIiwiZ2V0U2lkZUF4aXMiLCJnZXRBbGlnbm1lbnRBeGlzIiwiZ2V0QWxpZ25tZW50U2lkZXMiLCJyZWN0cyIsInJ0bCIsImFsaWdubWVudCIsImFsaWdubWVudEF4aXMiLCJsZW5ndGgiLCJtYWluQWxpZ25tZW50U2lkZSIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiZ2V0RXhwYW5kZWRQbGFjZW1lbnRzIiwib3Bwb3NpdGVQbGFjZW1lbnQiLCJnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudCIsImdldFNpZGVMaXN0Iiwic2lkZSIsImlzU3RhcnQiLCJsciIsInJsIiwidGIiLCJidCIsImdldE9wcG9zaXRlQXhpc1BsYWNlbWVudHMiLCJmbGlwQWxpZ25tZW50IiwiZGlyZWN0aW9uIiwibGlzdCIsImV4cGFuZFBhZGRpbmdPYmplY3QiLCJwYWRkaW5nIiwiZ2V0UGFkZGluZ09iamVjdCIsInJlY3RUb0NsaWVudFJlY3QiLCJyZWN0IiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsImNvbXB1dGVDb29yZHNGcm9tUGxhY2VtZW50IiwiX3JlZiIsInJlZmVyZW5jZSIsImZsb2F0aW5nIiwic2lkZUF4aXMiLCJhbGlnbkxlbmd0aCIsImlzVmVydGljYWwiLCJjb21tb25YIiwiY29tbW9uWSIsImNvbW1vbkFsaWduIiwiY29vcmRzIiwiY29tcHV0ZVBvc2l0aW9uIiwiY29uZmlnIiwic3RyYXRlZ3kiLCJtaWRkbGV3YXJlIiwicGxhdGZvcm0iLCJ2YWxpZE1pZGRsZXdhcmUiLCJzdGF0ZWZ1bFBsYWNlbWVudCIsIm1pZGRsZXdhcmVEYXRhIiwicmVzZXRDb3VudCIsImkiLCJuYW1lIiwiZm4iLCJuZXh0WCIsIm5leHRZIiwiZGF0YSIsInJlc2V0IiwiZGV0ZWN0T3ZlcmZsb3ciLCJzdGF0ZSIsIm9wdGlvbnMiLCJfYXdhaXQkcGxhdGZvcm0kaXNFbGUiLCJlbGVtZW50cyIsImJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwiZWxlbWVudENvbnRleHQiLCJhbHRCb3VuZGFyeSIsInBhZGRpbmdPYmplY3QiLCJlbGVtZW50IiwiY2xpcHBpbmdDbGllbnRSZWN0Iiwib2Zmc2V0UGFyZW50Iiwib2Zmc2V0U2NhbGUiLCJlbGVtZW50Q2xpZW50UmVjdCIsImZsaXAiLCJfbWlkZGxld2FyZURhdGEkYXJyb3ciLCJfbWlkZGxld2FyZURhdGEkZmxpcCIsImluaXRpYWxQbGFjZW1lbnQiLCJjaGVja01haW5BeGlzIiwiY2hlY2tDcm9zc0F4aXMiLCJzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMiLCJmYWxsYmFja1N0cmF0ZWd5IiwiZmFsbGJhY2tBeGlzU2lkZURpcmVjdGlvbiIsImRldGVjdE92ZXJmbG93T3B0aW9ucyIsImlzQmFzZVBsYWNlbWVudCIsImZhbGxiYWNrUGxhY2VtZW50cyIsInBsYWNlbWVudHMiLCJvdmVyZmxvdyIsIm92ZXJmbG93cyIsIm92ZXJmbG93c0RhdGEiLCJzaWRlcyIsIl9taWRkbGV3YXJlRGF0YSRmbGlwMiIsIl9vdmVyZmxvd3NEYXRhJGZpbHRlciIsIm5leHRJbmRleCIsIm5leHRQbGFjZW1lbnQiLCJyZXNldFBsYWNlbWVudCIsImQiLCJhIiwiYiIsIl9vdmVyZmxvd3NEYXRhJG1hcCRzbyIsImFjYyIsImNvbnZlcnRWYWx1ZVRvQ29vcmRzIiwibWFpbkF4aXNNdWx0aSIsImNyb3NzQXhpc011bHRpIiwicmF3VmFsdWUiLCJtYWluQXhpcyIsImNyb3NzQXhpcyIsIm9mZnNldCIsIl9taWRkbGV3YXJlRGF0YSRvZmZzZSIsImRpZmZDb29yZHMiLCJzaGlmdCIsImxpbWl0ZXIiLCJtYWluQXhpc0Nvb3JkIiwiY3Jvc3NBeGlzQ29vcmQiLCJtaW5TaWRlIiwibWF4U2lkZSIsImxpbWl0ZWRDb29yZHMiLCJoYXNXaW5kb3ciLCJnZXROb2RlTmFtZSIsIm5vZGUiLCJpc05vZGUiLCJnZXRXaW5kb3ciLCJfbm9kZSRvd25lckRvY3VtZW50IiwiZ2V0RG9jdW1lbnRFbGVtZW50IiwiaXNFbGVtZW50IiwiaXNIVE1MRWxlbWVudCIsImlzU2hhZG93Um9vdCIsImlzT3ZlcmZsb3dFbGVtZW50Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiZGlzcGxheSIsImdldENvbXB1dGVkU3R5bGUiLCJpc1RhYmxlRWxlbWVudCIsImlzVG9wTGF5ZXIiLCJzZWxlY3RvciIsImlzQ29udGFpbmluZ0Jsb2NrIiwiZWxlbWVudE9yQ3NzIiwid2Via2l0IiwiaXNXZWJLaXQiLCJjc3MiLCJnZXRDb250YWluaW5nQmxvY2siLCJjdXJyZW50Tm9kZSIsImdldFBhcmVudE5vZGUiLCJpc0xhc3RUcmF2ZXJzYWJsZU5vZGUiLCJnZXROb2RlU2Nyb2xsIiwicmVzdWx0IiwiZ2V0TmVhcmVzdE92ZXJmbG93QW5jZXN0b3IiLCJwYXJlbnROb2RlIiwiZ2V0T3ZlcmZsb3dBbmNlc3RvcnMiLCJ0cmF2ZXJzZUlmcmFtZXMiLCJfbm9kZSRvd25lckRvY3VtZW50MiIsInNjcm9sbGFibGVBbmNlc3RvciIsImlzQm9keSIsIndpbiIsImZyYW1lRWxlbWVudCIsImdldEZyYW1lRWxlbWVudCIsImdldENzc0RpbWVuc2lvbnMiLCJoYXNPZmZzZXQiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInNob3VsZEZhbGxiYWNrIiwidW53cmFwRWxlbWVudCIsImdldFNjYWxlIiwiZG9tRWxlbWVudCIsIiQiLCJub09mZnNldHMiLCJnZXRWaXN1YWxPZmZzZXRzIiwic2hvdWxkQWRkVmlzdWFsT2Zmc2V0cyIsImlzRml4ZWQiLCJmbG9hdGluZ09mZnNldFBhcmVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImluY2x1ZGVTY2FsZSIsImlzRml4ZWRTdHJhdGVneSIsImNsaWVudFJlY3QiLCJzY2FsZSIsInZpc3VhbE9mZnNldHMiLCJvZmZzZXRXaW4iLCJjdXJyZW50V2luIiwiY3VycmVudElGcmFtZSIsImlmcmFtZVNjYWxlIiwiaWZyYW1lUmVjdCIsImxlZnQiLCJ0b3AiLCJjb252ZXJ0T2Zmc2V0UGFyZW50UmVsYXRpdmVSZWN0VG9WaWV3cG9ydFJlbGF0aXZlUmVjdCIsImRvY3VtZW50RWxlbWVudCIsInRvcExheWVyIiwic2Nyb2xsIiwib2Zmc2V0cyIsImlzT2Zmc2V0UGFyZW50QW5FbGVtZW50Iiwib2Zmc2V0UmVjdCIsImdldENsaWVudFJlY3RzIiwiZ2V0V2luZG93U2Nyb2xsQmFyWCIsImxlZnRTY3JvbGwiLCJnZXREb2N1bWVudFJlY3QiLCJodG1sIiwiYm9keSIsImdldFZpZXdwb3J0UmVjdCIsInZpc3VhbFZpZXdwb3J0IiwidmlzdWFsVmlld3BvcnRCYXNlZCIsImdldElubmVyQm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0Q2xpZW50UmVjdEZyb21DbGlwcGluZ0FuY2VzdG9yIiwiY2xpcHBpbmdBbmNlc3RvciIsImhhc0ZpeGVkUG9zaXRpb25BbmNlc3RvciIsInN0b3BOb2RlIiwiZ2V0Q2xpcHBpbmdFbGVtZW50QW5jZXN0b3JzIiwiY2FjaGUiLCJjYWNoZWRSZXN1bHQiLCJlbCIsImN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlIiwiZWxlbWVudElzRml4ZWQiLCJjb21wdXRlZFN0eWxlIiwiY3VycmVudE5vZGVJc0NvbnRhaW5pbmciLCJhbmNlc3RvciIsImdldENsaXBwaW5nUmVjdCIsImNsaXBwaW5nQW5jZXN0b3JzIiwiZmlyc3RDbGlwcGluZ0FuY2VzdG9yIiwiY2xpcHBpbmdSZWN0IiwiYWNjUmVjdCIsImdldERpbWVuc2lvbnMiLCJnZXRSZWN0UmVsYXRpdmVUb09mZnNldFBhcmVudCIsImh0bWxYIiwiaHRtbFkiLCJodG1sUmVjdCIsImlzU3RhdGljUG9zaXRpb25lZCIsImdldFRydWVPZmZzZXRQYXJlbnQiLCJwb2x5ZmlsbCIsInJhd09mZnNldFBhcmVudCIsImdldE9mZnNldFBhcmVudCIsInN2Z09mZnNldFBhcmVudCIsImdldEVsZW1lbnRSZWN0cyIsImdldE9mZnNldFBhcmVudEZuIiwiZ2V0RGltZW5zaW9uc0ZuIiwiZmxvYXRpbmdEaW1lbnNpb25zIiwiaXNSVEwiLCJvZmZzZXQkMSIsInNoaWZ0JDEiLCJmbGlwJDEiLCJtZXJnZWRPcHRpb25zIiwicGxhdGZvcm1XaXRoQ2FjaGUiLCJjb21wdXRlUG9zaXRpb24kMSIsInJvb3QiLCJkZWZpbml0aW9uIiwibW9kdWxlIiwidGhpcyIsIm5vb3AiLCJ1bmRlZmluZWRUeXBlIiwiaXNJRSIsImxvZ01ldGhvZHMiLCJfbG9nZ2Vyc0J5TmFtZSIsImRlZmF1bHRMb2dnZXIiLCJiaW5kTWV0aG9kIiwib2JqIiwibWV0aG9kTmFtZSIsIm1ldGhvZCIsInRyYWNlRm9ySUUiLCJyZWFsTWV0aG9kIiwicmVwbGFjZUxvZ2dpbmdNZXRob2RzIiwibGV2ZWwiLCJlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzIiwiZGVmYXVsdE1ldGhvZEZhY3RvcnkiLCJfbGV2ZWwiLCJfbG9nZ2VyTmFtZSIsIkxvZ2dlciIsImZhY3RvcnkiLCJzZWxmIiwiaW5oZXJpdGVkTGV2ZWwiLCJkZWZhdWx0TGV2ZWwiLCJ1c2VyTGV2ZWwiLCJzdG9yYWdlS2V5IiwicGVyc2lzdExldmVsSWZQb3NzaWJsZSIsImxldmVsTnVtIiwibGV2ZWxOYW1lIiwiZ2V0UGVyc2lzdGVkTGV2ZWwiLCJzdG9yZWRMZXZlbCIsImNvb2tpZSIsImNvb2tpZU5hbWUiLCJsb2NhdGlvbiIsImNsZWFyUGVyc2lzdGVkTGV2ZWwiLCJub3JtYWxpemVMZXZlbCIsImlucHV0IiwicGVyc2lzdCIsImNoaWxkTmFtZSIsImluaXRpYWxMZXZlbCIsImxvZ2dlciIsIl9sb2ciLCJleHRlbmRTdGF0aWNzIiwicCIsIl9fZXh0ZW5kcyIsIl9fIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsImUiLCJyZWplY3RlZCIsIl9fZ2VuZXJhdG9yIiwiXyIsInQiLCJmIiwiZyIsInZlcmIiLCJuIiwib3AiLCJfX3ZhbHVlcyIsIm8iLCJzIiwibSIsIl9fcmVhZCIsInIiLCJhciIsImVycm9yIiwiX19zcHJlYWRBcnJheSIsInRvIiwiZnJvbSIsInBhY2siLCJsIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJxIiwiYXdhaXRSZXR1cm4iLCJyZXN1bWUiLCJzZXR0bGUiLCJmdWxmaWxsIiwiX19hc3luY1ZhbHVlcyIsImlzRnVuY3Rpb24iLCJjcmVhdGVFcnJvckNsYXNzIiwiY3JlYXRlSW1wbCIsIl9zdXBlciIsImluc3RhbmNlIiwiY3RvckZ1bmMiLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiZXJyb3JzIiwiZXJyIiwiYXJyUmVtb3ZlIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiU3Vic2NyaXB0aW9uIiwiaW5pdGlhbFRlYXJkb3duIiwiZV8xIiwiX2EiLCJlXzIiLCJfYiIsIl9wYXJlbnRhZ2UiLCJfcGFyZW50YWdlXzEiLCJfcGFyZW50YWdlXzFfMSIsInBhcmVudF8xIiwiZV8xXzEiLCJpbml0aWFsRmluYWxpemVyIiwiX2ZpbmFsaXplcnMiLCJfZmluYWxpemVyc18xIiwiX2ZpbmFsaXplcnNfMV8xIiwiZmluYWxpemVyIiwiZXhlY0ZpbmFsaXplciIsImVfMl8xIiwidGVhcmRvd24iLCJwYXJlbnQiLCJlbXB0eSIsIkVNUFRZX1NVQlNDUklQVElPTiIsImlzU3Vic2NyaXB0aW9uIiwidGltZW91dFByb3ZpZGVyIiwiaGFuZGxlciIsInRpbWVvdXQiLCJhcmdzIiwiX2kiLCJoYW5kbGUiLCJkZWxlZ2F0ZSIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwiZXJyb3JDb250ZXh0IiwiY2IiLCJTdWJzY3JpYmVyIiwiZGVzdGluYXRpb24iLCJfdGhpcyIsIkVNUFRZX09CU0VSVkVSIiwibmV4dCIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJfYmluZCIsImJpbmQiLCJDb25zdW1lck9ic2VydmVyIiwicGFydGlhbE9ic2VydmVyIiwiaGFuZGxlVW5oYW5kbGVkRXJyb3IiLCJvYnNlcnZlck9yTmV4dCIsImNvbnRleHRfMSIsImRlZmF1bHRFcnJvckhhbmRsZXIiLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwicHJldiIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJvcGVyYXRvciIsInN1YnNjcmliZXIiLCJpc1N1YnNjcmliZXIiLCJzb3VyY2UiLCJzaW5rIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsIlN5bWJvbF9vYnNlcnZhYmxlIiwib3BlcmF0aW9ucyIsImlzT2JzZXJ2ZXIiLCJoYXNMaWZ0Iiwib3BlcmF0ZSIsImluaXQiLCJsaWZ0ZWRTb3VyY2UiLCJjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIiLCJvbk5leHQiLCJvbkNvbXBsZXRlIiwib25FcnJvciIsIm9uRmluYWxpemUiLCJPcGVyYXRvclN1YnNjcmliZXIiLCJzaG91bGRVbnN1YnNjcmliZSIsImNsb3NlZF8xIiwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IiLCJTdWJqZWN0Iiwic3ViamVjdCIsIkFub255bW91c1N1YmplY3QiLCJfYyIsIm9ic2VydmVyIiwib2JzZXJ2ZXJzIiwiaGFzRXJyb3IiLCJpc1N0b3BwZWQiLCJ0aHJvd25FcnJvciIsIkJlaGF2aW9yU3ViamVjdCIsIl92YWx1ZSIsInN1YnNjcmlwdGlvbiIsImRhdGVUaW1lc3RhbXBQcm92aWRlciIsIkFjdGlvbiIsInNjaGVkdWxlciIsIndvcmsiLCJkZWxheSIsImludGVydmFsUHJvdmlkZXIiLCJBc3luY0FjdGlvbiIsImlkIiwiX2lkIiwiX3NjaGVkdWxlciIsIl9kZWxheSIsImVycm9yZWQiLCJlcnJvclZhbHVlIiwiYWN0aW9ucyIsIlNjaGVkdWxlciIsInNjaGVkdWxlckFjdGlvbkN0b3IiLCJub3ciLCJBc3luY1NjaGVkdWxlciIsIlNjaGVkdWxlckFjdGlvbiIsImFjdGlvbiIsImFzeW5jU2NoZWR1bGVyIiwiRU1QVFkiLCJpc1NjaGVkdWxlciIsImxhc3QiLCJwb3BTY2hlZHVsZXIiLCJwb3BOdW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJpc0FycmF5TGlrZSIsImlzUHJvbWlzZSIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJpc0FzeW5jSXRlcmFibGUiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsImdldFN5bWJvbEl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJpc0l0ZXJhYmxlIiwiU3ltYm9sX2l0ZXJhdG9yIiwicmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciIsInJlYWRhYmxlU3RyZWFtIiwicmVhZGVyIiwiZG9uZSIsImlzUmVhZGFibGVTdHJlYW1MaWtlIiwiaW5uZXJGcm9tIiwiZnJvbUludGVyb3BPYnNlcnZhYmxlIiwiZnJvbUFycmF5TGlrZSIsImZyb21Qcm9taXNlIiwiZnJvbUFzeW5jSXRlcmFibGUiLCJmcm9tSXRlcmFibGUiLCJmcm9tUmVhZGFibGVTdHJlYW1MaWtlIiwib2JzIiwiYXJyYXkiLCJwcm9taXNlIiwiaXRlcmFibGUiLCJpdGVyYWJsZV8xIiwiaXRlcmFibGVfMV8xIiwiYXN5bmNJdGVyYWJsZSIsInByb2Nlc3MiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsImV4ZWN1dGVTY2hlZHVsZSIsInBhcmVudFN1YnNjcmlwdGlvbiIsInJlcGVhdCIsInNjaGVkdWxlU3Vic2NyaXB0aW9uIiwib2JzZXJ2ZU9uIiwic3Vic2NyaWJlT24iLCJzY2hlZHVsZU9ic2VydmFibGUiLCJzY2hlZHVsZVByb21pc2UiLCJzY2hlZHVsZUFycmF5Iiwic2NoZWR1bGVJdGVyYWJsZSIsInNjaGVkdWxlQXN5bmNJdGVyYWJsZSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVkIiwib2YiLCJpc1ZhbGlkRGF0ZSIsIlRpbWVvdXRFcnJvciIsImluZm8iLCJzY2hlZHVsZXJBcmciLCJmaXJzdCIsImVhY2giLCJfd2l0aCIsInRpbWVvdXRFcnJvckZhY3RvcnkiLCJfZCIsIm1ldGEiLCJvcmlnaW5hbFNvdXJjZVN1YnNjcmlwdGlvbiIsInRpbWVyU3Vic2NyaXB0aW9uIiwibGFzdFZhbHVlIiwic2VlbiIsInN0YXJ0VGltZXIiLCJtYXAiLCJwcm9qZWN0IiwiaXNBcnJheSIsImNhbGxPckFwcGx5IiwibWFwT25lT3JNYW55QXJncyIsIm1lcmdlSW50ZXJuYWxzIiwiY29uY3VycmVudCIsIm9uQmVmb3JlTmV4dCIsImV4cGFuZCIsImlubmVyU3ViU2NoZWR1bGVyIiwiYWRkaXRpb25hbEZpbmFsaXplciIsImJ1ZmZlciIsImFjdGl2ZSIsImlzQ29tcGxldGUiLCJjaGVja0NvbXBsZXRlIiwib3V0ZXJOZXh0IiwiZG9Jbm5lclN1YiIsImlubmVyQ29tcGxldGUiLCJpbm5lclZhbHVlIiwiX2xvb3BfMSIsImJ1ZmZlcmVkVmFsdWUiLCJtZXJnZU1hcCIsInJlc3VsdFNlbGVjdG9yIiwiaWkiLCJtZXJnZUFsbCIsImNvbmNhdEFsbCIsImNvbmNhdCIsIm5vZGVFdmVudEVtaXR0ZXJNZXRob2RzIiwiZXZlbnRUYXJnZXRNZXRob2RzIiwianF1ZXJ5TWV0aG9kcyIsImZyb21FdmVudCIsInRhcmdldCIsImV2ZW50TmFtZSIsImlzRXZlbnRUYXJnZXQiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsInRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5IiwiaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlciIsImFkZCIsInJlbW92ZSIsInN1YlRhcmdldCIsIm1lcmdlIiwic291cmNlcyIsImZpbHRlciIsInByZWRpY2F0ZSIsInNjYW5JbnRlcm5hbHMiLCJhY2N1bXVsYXRvciIsInNlZWQiLCJoYXNTZWVkIiwiZW1pdE9uTmV4dCIsImVtaXRCZWZvcmVDb21wbGV0ZSIsImhhc1N0YXRlIiwiZGlzdGluY3RVbnRpbENoYW5nZWQiLCJjb21wYXJhdG9yIiwia2V5U2VsZWN0b3IiLCJkZWZhdWx0Q29tcGFyZSIsInByZXZpb3VzS2V5IiwiY3VycmVudEtleSIsImZpbmFsaXplIiwiY2FsbGJhY2siLCJzY2FuIiwic2tpcFVudGlsIiwibm90aWZpZXIiLCJ0YWtpbmciLCJza2lwU3Vic2NyaWJlciIsInN0YXJ0V2l0aCIsInZhbHVlcyIsInN3aXRjaE1hcCIsImlubmVyU3Vic2NyaWJlciIsImlubmVySW5kZXgiLCJvdXRlckluZGV4IiwidGFrZVVudGlsIiwiX19kZWZQcm9wIiwiX19kZWZQcm9wcyIsIl9fZ2V0T3duUHJvcERlc2NzIiwiX19nZXRPd25Qcm9wU3ltYm9scyIsIl9faGFzT3duUHJvcCIsIl9fcHJvcElzRW51bSIsIl9fZGVmTm9ybWFsUHJvcCIsImtleSIsIl9fc3ByZWFkVmFsdWVzIiwicHJvcCIsIl9fc3ByZWFkUHJvcHMiLCJfX2FzeW5jIiwiX190aGlzIiwiX19hcmd1bWVudHMiLCJjc3NQcmVmaXgiLCJpc1RyYWNrUmVmZXJlbmNlIiwidHJhY2tSZWZlcmVuY2UiLCJpc1RyYWNrUmVmZXJlbmNlU3Vic2NyaWJlZCIsImlzVHJhY2tSZWZlcmVuY2VQdWJsaXNoZWQiLCJpc1RyYWNrUmVmZXJlbmNlUGxhY2Vob2xkZXIiLCJnZXRUcmFja1JlZmVyZW5jZUlkIiwiaXNFcXVhbFRyYWNrUmVmIiwiaXNUcmFja1JlZmVyZW5jZVBpbm5lZCIsInBpblN0YXRlIiwicGlubmVkVHJhY2tSZWZlcmVuY2UiLCJpc1BsYWNlaG9sZGVyUmVwbGFjZW1lbnQiLCJjdXJyZW50VHJhY2tSZWYiLCJuZXh0VHJhY2tSZWYiLCJpc0xvY2FsIiwiTG9jYWxQYXJ0aWNpcGFudCIsImdldFNjcm9sbEJhcldpZHRoIiwiaW5uZXIiLCJvdXRlciIsIncxIiwidzIiLCJpc1dlYiIsImNyZWF0ZVVybFJlZ0V4cCIsInByb3RvY29sIiwiYXV0aCIsImlwIiwicmVnZXgyIiwicmVnZXgiLCJjcmVhdGVFbWFpbFJlZ0V4cCIsImV4YWN0IiwiY29tcHV0ZU1lbnVQb3NpdGlvbiIsImJ1dHRvbiIsIm1lbnUiLCJ3YXNDbGlja091dHNpZGUiLCJpbnNpZGVFbGVtZW50IiwiZXZlbnQiLCJjcmVhdGVEZWZhdWx0R3JhbW1hciIsInRva2VuaXplIiwiZ3JhbW1hciIsIm1hdGNoZXMiLCJ0eXBlIiwicngiLCJ3ZWlnaHQiLCJjb250ZW50IiwidG9rZW5zIiwicG9zIiwiYWxsUmVtb3RlUGFydGljaXBhbnRSb29tRXZlbnRzIiwiUm9vbUV2ZW50IiwiYWxsUGFydGljaXBhbnRSb29tRXZlbnRzIiwicGFydGljaXBhbnRUcmFja0V2ZW50cyIsIlBhcnRpY2lwYW50RXZlbnQiLCJhbGxSZW1vdGVQYXJ0aWNpcGFudEV2ZW50cyIsImFsbFBhcnRpY2lwYW50RXZlbnRzIiwibG9nIiwibG9nbGV2ZWwiLCJzZXRMb2dMZXZlbCIsInNldENsaWVudFNka0xvZ0xldmVsIiwic2V0TG9nRXh0ZW5zaW9uIiwiZXh0ZW5zaW9uIiwib3JpZ2luYWxGYWN0b3J5IiwiY29uZmlnTGV2ZWwiLCJsb2dnZXJOYW1lIiwicmF3TWV0aG9kIiwibG9nTGV2ZWwiLCJMb2dMZXZlbEVudW0iLCJuZWVkTG9nIiwibXNnIiwiY29udGV4dCIsInNldENsaWVudFNka0xvZ0V4dGVuc2lvbiIsIkdSSURfTEFZT1VUUyIsInNlbGVjdEdyaWRMYXlvdXQiLCJsYXlvdXREZWZpbml0aW9ucyIsInBhcnRpY2lwYW50Q291bnQiLCJsYXlvdXRzIiwiZXhwYW5kQW5kU29ydExheW91dERlZmluaXRpb25zIiwiY3VycmVudExheW91dEluZGV4IiwiY29udGFpbmVyT3JpZW50YXRpb24iLCJsYXlvdXQiLCJsYXlvdXRfIiwiYWxsTGF5b3V0cyIsImlzQmlnZ2VyTGF5b3V0QXZhaWxhYmxlIiwiZml0c09yaWVudGF0aW9uIiwibGF5b3V0SXNCaWdnZXJUaGFuQ3VycmVudCIsImxheW91dEZpdHNTYW1lQW1vdW50T2ZQYXJ0aWNpcGFudHMiLCJzbWFsbGVyTGF5b3V0Iiwic3VwcG9ydHNTY3JlZW5TaGFyaW5nIiwiYWRkTWVkaWFUaW1lc3RhbXBUb1RyYW5zY3JpcHRpb24iLCJzZWdtZW50IiwidGltZXN0YW1wcyIsImRlZHVwZVNlZ21lbnRzIiwicHJldlNlZ21lbnRzIiwibmV3U2VnbWVudHMiLCJ3aW5kb3dTaXplIiwidmFsIiwiUElOX0RFRkFVTFRfU1RBVEUiLCJXSURHRVRfREVGQVVMVF9TVEFURSIsImlzU291cmNlV2l0T3B0aW9ucyIsImlzU291cmNlc1dpdGhPcHRpb25zIiwic29ydFBhcnRpY2lwYW50c0J5QXVkaW9MZXZlbCIsInNvcnRQYXJ0aWNpcGFudHNCeUlzU3BlYWtpbmciLCJzb3J0UGFydGljaXBhbnRzQnlMYXN0U3Bva2VuQVQiLCJzb3J0UGFydGljaXBhbnRzQnlKb2luZWRBdCIsInNvcnRUcmFja1JlZmVyZW5jZXNCeVR5cGUiLCJzb3J0VHJhY2tSZWZzQnlJc0NhbWVyYUVuYWJsZWQiLCJhVmlkZW8iLCJiVmlkZW8iLCJzb3J0VHJhY2tSZWZlcmVuY2VzIiwidHJhY2tzIiwibG9jYWxUcmFja3MiLCJzY3JlZW5TaGFyZVRyYWNrcyIsImNhbWVyYVRyYWNrcyIsInVuZGVmaW5lZFRyYWNrcyIsInRyYWNrUmVmIiwiVHJhY2syIiwic29ydGVkU2NyZWVuU2hhcmVUcmFja3MiLCJzb3J0U2NyZWVuU2hhcmVUcmFja3MiLCJzb3J0ZWRDYW1lcmFUcmFja3MiLCJzb3J0Q2FtZXJhVHJhY2tzIiwibG9jYWxTY3JlZW5TaGFyZXMiLCJyZW1vdGVTY3JlZW5TaGFyZXMiLCJjYW1lcmFUcmFja1JlZmVyZW5jZXMiLCJsb2NhbENhbWVyYVRyYWNrcyIsInJlbW90ZUNhbWVyYVRyYWNrcyIsInNvcnRQYXJ0aWNpcGFudHMiLCJwYXJ0aWNpcGFudHMiLCJzb3J0ZWRQYXJ0aWNpcGFudHMiLCJsb2NhbFBhcnRpY2lwYW50IiwiTG9jYWxQYXJ0aWNpcGFudDIiLCJsb2NhbElkeCIsImNodW5rIiwic2l6ZSIsImlkeCIsInppcCIsImExIiwiYTIiLCJyZXN1bHRMZW5ndGgiLCJfdmFsIiwiZGlmZmVyZW5jZUJ5IiwiYnkiLCJjIiwiZmxhdFRyYWNrUmVmZXJlbmNlQXJyYXkiLCJ2aXN1YWxQYWdlQ2hhbmdlIiwibGlzdE5lZWRzVXBkYXRpbmciLCJjaGFuZ2VzIiwiZmluZEluZGV4IiwidHJhY2tSZWZlcmVuY2VzIiwiaW5kZXhUb1JlcGxhY2UiLCJ0cmFja1JlZmVyZW5jZV8iLCJzd2FwSXRlbXMiLCJtb3ZlRm9yd2FyZCIsIm1vdmVCYWNrIiwiaW5kZXhSZXBsYWNlV2l0aCIsImRyb3BJdGVtIiwiaXRlbVRvRHJvcCIsImluZGV4T2ZFbGVtZW50VG9Ecm9wIiwiYWRkSXRlbSIsIml0ZW1Ub0FkZCIsImRpdmlkZUludG9QYWdlcyIsIm1heEVsZW1lbnRzT25QYWdlIiwidXBkYXRlUGFnZXMiLCJjdXJyZW50TGlzdCIsIm5leHRMaXN0IiwibWF4SXRlbXNPblBhZ2UiLCJ1cGRhdGVkTGlzdCIsInJlZnJlc2hMaXN0IiwiYWRkZWRJdGVtcyIsImN1cnJlbnRQYWdlcyIsIm5leHRQYWdlcyIsImN1cnJlbnRQYWdlIiwibmV4dFBhZ2UiLCJwYWdlSW5kZXgiLCJ1cGRhdGVkUGFnZSIsImFkZGVkIiwiZHJvcHBlZCIsIm1pc3NpbmdJdGVtcyIsImN1cnJlbnRJdGVtIiwidXBkYXRlRm9yQ3VycmVudEl0ZW0iLCJuZXdJdGVtXyIsInByZWZpeENsYXNzIiwidW5wcmVmaXhlZENsYXNzTmFtZSIsInNldHVwTWVkaWFUcmFjayIsInRyYWNrSWRlbnRpZmllciIsImluaXRpYWxQdWIiLCJnZXRUcmFja0J5SWRlbnRpZmllciIsInRyYWNrT2JzZXJ2ZXIiLCJvYnNlcnZlUGFydGljaXBhbnRNZWRpYSIsIlRyYWNrNCIsInBhcnRpY2lwYW50IiwicHViIiwib2JzZXJ2ZVJvb21FdmVudHMiLCJyb29tIiwiZXZlbnRzIiwib25Sb29tVXBkYXRlIiwiZXZ0Iiwic3RhcnRXaXRoMiIsInJvb21FdmVudFNlbGVjdG9yIiwidXBkYXRlIiwicGFyYW1zIiwiY29ubmVjdGlvblN0YXRlT2JzZXJ2ZXIiLCJSb29tRXZlbnQyIiwibWFwMiIsImNvbm5lY3Rpb25TdGF0ZSIsInJvb21JbmZvT2JzZXJ2ZXIiLCJhY3RpdmVTcGVha2VyT2JzZXJ2ZXIiLCJzcGVha2VycyIsImNyZWF0ZU1lZGlhRGV2aWNlT2JzZXJ2ZXIiLCJraW5kIiwicmVxdWVzdFBlcm1pc3Npb25zIiwib25EZXZpY2VDaGFuZ2UiLCJuZXdEZXZpY2VzIiwiUm9vbSIsImRldmljZVN1YmplY3QiLCJfYTIiLCJjcmVhdGVEYXRhT2JzZXJ2ZXIiLCJjcmVhdGVDaGF0T2JzZXJ2ZXIiLCJyb29tQXVkaW9QbGF5YmFja0FsbG93ZWRPYnNlcnZhYmxlIiwicm9vbTIiLCJyb29tVmlkZW9QbGF5YmFja0FsbG93ZWRPYnNlcnZhYmxlIiwiY3JlYXRlQWN0aXZlRGV2aWNlT2JzZXJ2YWJsZSIsImtpbmRPZkRldmljZSIsImtpbmQyIiwiZGV2aWNlSWQiLCJlbmNyeXB0aW9uU3RhdHVzT2JzZXJ2YWJsZSIsImVuY3J5cHRlZCIsIkxvY2FsUGFydGljaXBhbnQzIiwicmVjb3JkaW5nU3RhdHVzT2JzZXJ2YWJsZSIsInJlY29yZGluZyIsIm9ic2VydmVQYXJ0aWNpcGFudEV2ZW50cyIsIk9ic2VydmFibGUyIiwib25QYXJ0aWNpcGFudFVwZGF0ZSIsInN0YXJ0V2l0aDMiLCJQYXJ0aWNpcGFudEV2ZW50MiIsIm1hcDMiLCJpc01pY3JvcGhvbmVFbmFibGVkIiwiaXNDYW1lcmFFbmFibGVkIiwiaXNTY3JlZW5TaGFyZUVuYWJsZWQiLCJtaWNyb3Bob25lVHJhY2siLCJUcmFjazYiLCJjYW1lcmFUcmFjayIsInBhcnRpY2lwYW50SW5mb09ic2VydmVyIiwibWV0YWRhdGEiLCJjcmVhdGVDb25uZWN0aW9uUXVhbGl0eU9ic2VydmVyIiwicGFydGljaXBhbnRFdmVudFNlbGVjdG9yIiwicXVhbGl0eSIsIm11dGVkT2JzZXJ2ZXIiLCJfYjIiLCJjcmVhdGVJc1NwZWFraW5nT2JzZXJ2ZXIiLCJpc1NwZWFraW5nIiwiY29ubmVjdGVkUGFydGljaXBhbnRzT2JzZXJ2ZXIiLCJzdWIiLCJsaXN0ZW5lciIsImFkZGl0aW9uYWxSb29tRXZlbnRzIiwicm9vbUV2ZW50cyIsIlJvb21FdmVudDMiLCJjb25uZWN0ZWRQYXJ0aWNpcGFudE9ic2VydmVyIiwiYWRkaXRpb25hbEV2ZW50cyIsInBhcnRpY2lwYW50UGVybWlzc2lvbk9ic2VydmVyIiwicGFydGljaXBhbnRCeUlkZW50aWZpZXJPYnNlcnZlciIsIm1hdGNoZXNJZGVudGlmaWVyIiwiaXNNYXRjaCIsInBhcnRpY2lwYW50QXR0cmlidXRlc09ic2VydmVyIiwiY2hhbmdlZEF0dHJpYnV0ZXMiLCJzZXR1cE1lZGlhVG9nZ2xlIiwicHVibGlzaE9wdGlvbnMiLCJnZXRTb3VyY2VFbmFibGVkIiwic291cmNlMiIsImxvY2FsUGFydGljaXBhbnQyIiwiaXNFbmFibGVkIiwiVHJhY2s3IiwiZW5hYmxlZE9ic2VydmVyIiwibWFwNCIsIm1lZGlhIiwic3RhcnRXaXRoNCIsInBlbmRpbmdTdWJqZWN0IiwiU3ViamVjdDIiLCJ0b2dnbGUiLCJmb3JjZVN0YXRlIiwiY2FwdHVyZU9wdGlvbnMiLCJzZXR1cE1hbnVhbFRvZ2dsZSIsImVuYWJsZWRTdWJqZWN0Iiwic2V0dXBEZXZpY2VTZWxlY3RvciIsImxvY2FsVHJhY2siLCJhY3RpdmVEZXZpY2VTdWJqZWN0IiwiYWN0aXZlRGV2aWNlT2JzZXJ2YWJsZSIsInNldEFjdGl2ZU1lZGlhRGV2aWNlIiwiXzAiLCJfMSIsImFjdHVhbERldmljZUlkIiwidGFyZ2V0VHJhY2siLCJUcmFjazgiLCJ1c2VEZWZhdWx0IiwiYWN0dWFsSWQiLCJzZXR1cERpc2Nvbm5lY3RCdXR0b24iLCJkaXNjb25uZWN0Iiwic3RvcFRyYWNrcyIsInNldHVwQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IiLCJjbGFzc05hbWUiLCJjb25uZWN0aW9uUXVhbGl0eU9ic2VydmVyIiwic2V0dXBUcmFja011dGVkSW5kaWNhdG9yIiwiY2xhc3NGb3JTb3VyY2UiLCJUcmFjazkiLCJtZWRpYU11dGVkT2JzZXJ2ZXIiLCJzZXR1cFBhcnRpY2lwYW50TmFtZSIsInNldHVwUGFydGljaXBhbnRUaWxlIiwiRGF0YVRvcGljIiwic2VuZE1lc3NhZ2UiLCJwYXlsb2FkIiwicmVsaWFibGUiLCJkZXN0aW5hdGlvbklkZW50aXRpZXMiLCJ0b3BpYyIsInNldHVwRGF0YU1lc3NhZ2VIYW5kbGVyIiwib25NZXNzYWdlIiwidG9waWNzIiwibWVzc2FnZU9ic2VydmFibGUiLCJmaWx0ZXIyIiwibWVzc2FnZVRvcGljIiwibWFwNSIsImlzU2VuZGluZ1N1YnNjcmliZXIiLCJpc1NlbmRpbmdPYnNlcnZhYmxlIiwiT2JzZXJ2YWJsZTMiLCJzZXR1cENoYXRNZXNzYWdlSGFuZGxlciIsInRleHQiLCJvcmlnaW5hbE1zZyIsImVuY29kZXIiLCJkZWNvZGVyIiwidG9waWNTdWJqZWN0TWFwIiwiZW5jb2RlIiwibWVzc2FnZSIsImRlY29kZSIsInNldHVwQ2hhdCIsIm9uRGVzdHJveU9ic2VydmFibGUiLCJTdWJqZWN0MyIsInNlcnZlclN1cHBvcnRzQ2hhdEFwaSIsImNvbXBhcmVWZXJzaW9ucyIsIm1lc3NhZ2VEZWNvZGVyIiwibWVzc2FnZUVuY29kZXIiLCJjaGFubmVsVG9waWMiLCJ1cGRhdGVDaGFubmVsVG9waWMiLCJ1cGRhdGVUb3BpYyIsIm5lZWRzU2V0dXAiLCJ0b3BpY01hcCIsIm1lc3NhZ2VTdWJqZWN0IiwiY2hhdE9ic2VydmFibGUiLCJzZW5kQ2hhdE1lc3NhZ2UiLCJmaW5hbE1lc3NhZ2VEZWNvZGVyIiwibWVzc2FnZXNPYnNlcnZhYmxlIiwibWFwNiIsInBhcnNlZE1lc3NhZ2UiLCJuZXdNZXNzYWdlIiwiaXNJZ25vcmFibGVDaGF0TWVzc2FnZSIsIl9hMyIsInJlcGxhY2VJbmRleCIsImlzU2VuZGluZyQiLCJCZWhhdmlvclN1YmplY3QyIiwiZmluYWxNZXNzYWdlRW5jb2RlciIsInNlbmQiLCJjaGF0TWVzc2FnZSIsImVuY29kZWRMZWdhY3lNc2ciLCJvcmlnaW5hbE1lc3NhZ2VPcklkIiwidGltZXN0YW1wIiwib3JpZ2luYWxNZXNzYWdlIiwiZWRpdGVkTWVzc2FnZSIsImVuY29kZWRMZWdhY3lNZXNzYWdlIiwiZGVzdHJveSIsIlJvb21FdmVudDQiLCJzZXR1cFN0YXJ0QXVkaW8iLCJoYW5kbGVTdGFydEF1ZGlvUGxheWJhY2siLCJzZXR1cFN0YXJ0VmlkZW8iLCJoYW5kbGVTdGFydFZpZGVvUGxheWJhY2siLCJzZXR1cENoYXRUb2dnbGUiLCJzZXR1cEZvY3VzVG9nZ2xlIiwic2V0dXBDbGVhclBpbkJ1dHRvbiIsInNldHVwTGl2ZUtpdFJvb20iLCJnZXRUcmFja1JlZmVyZW5jZXMiLCJvbmx5U3Vic2NyaWJlZFRyYWNrcyIsImFsbFBhcnRpY2lwYW50cyIsInNvdXJjZVJlZmVyZW5jZXMiLCJ0cmFjayIsImdldFBhcnRpY2lwYW50VHJhY2tSZWZzIiwiaWRlbnRpZmllciIsInRyYWNrUmVmZXJlbmNlc09ic2VydmFibGUiLCJSb29tRXZlbnQ1IiwibWFwNyIsInN0YXJ0V2l0aDUiLCJwYXJ0aWNpcGFudFRyYWNrc09ic2VydmFibGUiLCJwYXJ0aWNpcGFudDIiLCJ0cmFja0V2ZW50U2VsZWN0b3IiLCJwdWJsaWNhdGlvbiIsIk9ic2VydmFibGU0IiwidHJhY2tUcmFuc2NyaXB0aW9uT2JzZXJ2ZXIiLCJUcmFja0V2ZW50IiwidHJhY2tTeW5jVGltZU9ic2VydmVyIiwidGltZVVwZGF0ZSIsImNyZWF0ZUludGVyYWN0aW5nT2JzZXJ2YWJsZSIsImh0bWxFbGVtZW50IiwiaW5hY3RpdmVBZnRlciIsIm1vdmUkIiwibWFwOCIsIm1vdmVBbmRTdG9wJCIsImNvbmNhdDIiLCJzYXZlVG9Mb2NhbFN0b3JhZ2UiLCJub25FbXB0eVNldHRpbmdzIiwidmFsdWUyIiwibG9hZEZyb21Mb2NhbFN0b3JhZ2UiLCJjcmVhdGVMb2NhbFN0b3JhZ2VJbnRlcmZhY2UiLCJVU0VSX0NIT0lDRVNfS0VZIiwiZGVmYXVsdFVzZXJDaG9pY2VzIiwibG9hZCIsInNhdmUiLCJzYXZlVXNlckNob2ljZXMiLCJ1c2VyQ2hvaWNlcyIsInByZXZlbnRTYXZlIiwibG9hZFVzZXJDaG9pY2VzIiwiZGVmYXVsdHMiLCJwcmV2ZW50TG9hZCIsIl9lIiwiZmFsbGJhY2siLCJtYXliZUxvYWRlZE9iamVjdCIsImNoYXRSZWR1Y2VyIiwibmV3U3RhdGUiLCJwaW5SZWR1Y2VyIiwiTGF5b3V0Q29udGV4dCIsIlJlYWN0IiwidXNlTGF5b3V0Q29udGV4dCIsImxheW91dENvbnRleHQiLCJ1c2VFbnN1cmVMYXlvdXRDb250ZXh0IiwidXNlTWF5YmVMYXlvdXRDb250ZXh0IiwidXNlQ3JlYXRlTGF5b3V0Q29udGV4dCIsInBpbkRpc3BhdGNoIiwid2lkZ2V0U3RhdGUiLCJ3aWRnZXREaXNwYXRjaCIsInVzZUVuc3VyZUNyZWF0ZUxheW91dENvbnRleHQiLCJUcmFja1JlZkNvbnRleHQiLCJ1c2VUcmFja1JlZkNvbnRleHQiLCJ1c2VNYXliZVRyYWNrUmVmQ29udGV4dCIsInVzZUVuc3VyZVRyYWNrUmVmIiwicmVmIiwiUGFydGljaXBhbnRDb250ZXh0IiwidXNlUGFydGljaXBhbnRDb250ZXh0IiwidXNlTWF5YmVQYXJ0aWNpcGFudENvbnRleHQiLCJ1c2VFbnN1cmVQYXJ0aWNpcGFudCIsInRyYWNrQ29udGV4dCIsIlJvb21Db250ZXh0IiwidXNlUm9vbUNvbnRleHQiLCJjdHgiLCJ1c2VNYXliZVJvb21Db250ZXh0IiwidXNlRW5zdXJlUm9vbSIsIkxLRmVhdHVyZUNvbnRleHQiLCJ1c2VGZWF0dXJlQ29udGV4dCIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/contexts-BggYqn0S.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/hooks-C6T19zG6.mjs":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/hooks-C6T19zG6.mjs ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ Et),\n/* harmony export */   B: () => (/* binding */ Lt),\n/* harmony export */   C: () => (/* binding */ Ye),\n/* harmony export */   D: () => (/* binding */ St),\n/* harmony export */   E: () => (/* binding */ Mt),\n/* harmony export */   F: () => (/* binding */ je),\n/* harmony export */   G: () => (/* binding */ z),\n/* harmony export */   H: () => (/* binding */ Xe),\n/* harmony export */   I: () => (/* binding */ Ct),\n/* harmony export */   J: () => (/* binding */ It),\n/* harmony export */   K: () => (/* binding */ Dt),\n/* harmony export */   L: () => (/* binding */ Rt),\n/* harmony export */   M: () => (/* binding */ G),\n/* harmony export */   N: () => (/* binding */ Nt),\n/* harmony export */   O: () => (/* binding */ Ze),\n/* harmony export */   P: () => (/* binding */ qt),\n/* harmony export */   Q: () => (/* binding */ Qt),\n/* harmony export */   R: () => (/* binding */ Ht),\n/* harmony export */   S: () => (/* binding */ Xt),\n/* harmony export */   T: () => (/* binding */ it),\n/* harmony export */   U: () => (/* binding */ lt),\n/* harmony export */   V: () => (/* binding */ Kt),\n/* harmony export */   W: () => (/* binding */ ft),\n/* harmony export */   X: () => (/* binding */ Yt),\n/* harmony export */   Y: () => (/* binding */ Zt),\n/* harmony export */   a: () => (/* binding */ O),\n/* harmony export */   b: () => (/* binding */ Ut),\n/* harmony export */   c: () => (/* binding */ yt),\n/* harmony export */   d: () => (/* binding */ Pt),\n/* harmony export */   e: () => (/* binding */ Tt),\n/* harmony export */   f: () => (/* binding */ Vt),\n/* harmony export */   g: () => (/* binding */ Bt),\n/* harmony export */   h: () => (/* binding */ _t),\n/* harmony export */   i: () => (/* binding */ ht),\n/* harmony export */   j: () => (/* binding */ b),\n/* harmony export */   k: () => (/* binding */ Jt),\n/* harmony export */   l: () => (/* binding */ Ot),\n/* harmony export */   m: () => (/* binding */ xt),\n/* harmony export */   n: () => (/* binding */ kt),\n/* harmony export */   o: () => (/* binding */ At),\n/* harmony export */   p: () => (/* binding */ zt),\n/* harmony export */   q: () => (/* binding */ He),\n/* harmony export */   r: () => (/* binding */ Ke),\n/* harmony export */   s: () => (/* binding */ jt),\n/* harmony export */   t: () => (/* binding */ Wt),\n/* harmony export */   u: () => (/* binding */ vt),\n/* harmony export */   v: () => (/* binding */ Ft),\n/* harmony export */   w: () => (/* binding */ $t),\n/* harmony export */   x: () => (/* binding */ wt),\n/* harmony export */   y: () => (/* binding */ Gt),\n/* harmony export */   z: () => (/* binding */ gt)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.2.14_react-dom@18.3.1_react@18.3.1__react@18.3.1_sass@1.80.3/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contexts-BggYqn0S.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/contexts-BggYqn0S.mjs\");\n/* harmony import */ var _room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./room-BeQGUa5w.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/room-BeQGUa5w.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.5.9/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n\n\n\n\nconst Qe = (e) => {\n  const n = react__WEBPACK_IMPORTED_MODULE_0__.useRef(e);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    n.current = e;\n  }), n;\n};\nfunction $e(e, n) {\n  const t = xe(), a = Qe(n);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    let s = !1;\n    const c = e.current;\n    if (!c) return;\n    function o(u, i) {\n      s || a.current(u, i);\n    }\n    return t == null || t.subscribe(c, o), () => {\n      s = !0, t == null || t.unsubscribe(c, o);\n    };\n  }, [e.current, t, a]), t == null ? void 0 : t.observer;\n}\nfunction Ge() {\n  let e = !1, n = [];\n  const t = /* @__PURE__ */ new Map();\n  if (typeof window > \"u\")\n    return;\n  const a = new ResizeObserver((s, c) => {\n    n = n.concat(s), e || window.requestAnimationFrame(() => {\n      const o = /* @__PURE__ */ new Set();\n      for (let u = 0; u < n.length; u++) {\n        if (o.has(n[u].target)) continue;\n        o.add(n[u].target);\n        const i = t.get(n[u].target);\n        i == null || i.forEach((d) => d(n[u], c));\n      }\n      n = [], e = !1;\n    }), e = !0;\n  });\n  return {\n    observer: a,\n    subscribe(s, c) {\n      a.observe(s);\n      const o = t.get(s) ?? [];\n      o.push(c), t.set(s, o);\n    },\n    unsubscribe(s, c) {\n      const o = t.get(s) ?? [];\n      if (o.length === 1) {\n        a.unobserve(s), t.delete(s);\n        return;\n      }\n      const u = o.indexOf(c);\n      u !== -1 && o.splice(u, 1), t.set(s, o);\n    }\n  };\n}\nlet D;\nconst xe = () => D || (D = Ge()), He = (e) => {\n  const [n, t] = react__WEBPACK_IMPORTED_MODULE_0__.useState({ width: 0, height: 0 });\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    if (e.current) {\n      const { width: s, height: c } = e.current.getBoundingClientRect();\n      t({ width: s, height: c });\n    }\n  }, [e.current]);\n  const a = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (s) => t(s.contentRect),\n    []\n  );\n  return $e(e, a), n;\n};\nfunction b(e, n, t = !0) {\n  const [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (t && s(n), typeof window > \"u\" || !e) return;\n    const c = e.subscribe(s);\n    return () => c.unsubscribe();\n  }, [e, t]), a;\n}\nfunction gt(e) {\n  const n = (c) => typeof window < \"u\" ? window.matchMedia(c).matches : !1, [t, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n(e));\n  function s() {\n    a(n(e));\n  }\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const c = window.matchMedia(e);\n    return s(), c.addListener ? c.addListener(s) : c.addEventListener(\"change\", s), () => {\n      c.removeListener ? c.removeListener(s) : c.removeEventListener(\"change\", s);\n    };\n  }, [e]), t;\n}\nfunction St(e) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e), t = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async () => {\n    await n.startAudio();\n  }, [n]), a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.r)(n),\n    [n]\n  ), { canPlayAudio: s } = b(a, {\n    canPlayAudio: n.canPlaybackAudio\n  });\n  return { canPlayAudio: s, startAudio: t };\n}\nfunction vt(e) {\n  const { state: n, dispatch: t } = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a)().pin;\n  return { buttonProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className: s } = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.b)();\n    return (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(e, {\n      className: s,\n      disabled: !(n != null && n.length),\n      onClick: () => {\n        t && t({ msg: \"clear_pin\" });\n      }\n    });\n  }, [e, t, n]) };\n}\nfunction ht(e = {}) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(e.participant), { className: t, connectionQualityObserver: a } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.d)(n),\n    [n]\n  ), s = b(a, livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionQuality.Unknown);\n  return { className: t, quality: s };\n}\nfunction O(e) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e), t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(n), [n]);\n  return b(t, n.state);\n}\nfunction Mt(e, n) {\n  const t = typeof e == \"function\" ? e : n, a = typeof e == \"string\" ? e : void 0, s = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), { send: c, messageObservable: o, isSendingObservable: u } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(s, a, t),\n    [s, a, t]\n  ), i = b(o, void 0), d = b(u, !1);\n  return {\n    message: i,\n    send: c,\n    isSending: d\n  };\n}\nfunction yt(e) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), t = O(n);\n  return { buttonProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className: s, disconnect: c } = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.h)(n);\n    return (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(e, {\n      className: s,\n      onClick: () => c(e.stopTracks ?? !0),\n      disabled: t === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Disconnected\n    });\n  }, [n, e, t]) };\n}\nfunction je(e) {\n  if (e.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.LocalTrackPublication) {\n    const n = e.publication.track;\n    if (n) {\n      const { facingMode: t } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.facingModeFromLocalTrack)(n);\n      return t;\n    }\n  }\n  return \"undefined\";\n}\nfunction Pt({ trackRef: e, props: n }) {\n  const t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(e), a = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.j)(), { className: s } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.k)(), []), c = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(t, a == null ? void 0 : a.pin.state), [t, a == null ? void 0 : a.pin.state]);\n  return { mergedProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(n, {\n      className: s,\n      onClick: (u) => {\n        var i, d, l, f, p;\n        (i = n.onClick) == null || i.call(n, u), c ? (l = a == null ? void 0 : (d = a.pin).dispatch) == null || l.call(d, {\n          msg: \"clear_pin\"\n        }) : (p = a == null ? void 0 : (f = a.pin).dispatch) == null || p.call(f, {\n          msg: \"set_pin\",\n          trackReference: t\n        });\n      }\n    }),\n    [n, s, t, c, a == null ? void 0 : a.pin]\n  ), inFocus: c };\n}\nfunction kt(e, n, t = {}) {\n  const a = t.gridLayouts ?? _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.G, { width: s, height: c } = He(e), o = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.n)(a, n, s, c);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    e.current && o && (e.current.style.setProperty(\"--lk-col-count\", o == null ? void 0 : o.columns.toString()), e.current.style.setProperty(\"--lk-row-count\", o == null ? void 0 : o.rows.toString()));\n  }, [e, o]), {\n    layout: o,\n    containerWidth: s,\n    containerHeight: c\n  };\n}\nfunction z(e, n = {}) {\n  var u, i;\n  const t = typeof e == \"string\" ? n.participant : e.participant, a = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(t), s = typeof e == \"string\" ? { participant: a, source: e } : e, [c, o] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    !!((u = s.publication) != null && u.isMuted || (i = a.getTrackPublication(s.source)) != null && i.isMuted)\n  );\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const d = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.o)(s).subscribe(o);\n    return () => d.unsubscribe();\n  }, [(0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.p)(s)]), c;\n}\nfunction Xe(e) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(e), t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.q)(n), [n]);\n  return b(t, n.isSpeaking);\n}\nfunction Ye(e = {}) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e.room), [t, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n.localParticipant), [s, c] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    t.isMicrophoneEnabled\n  ), [o, u] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    t.isMicrophoneEnabled\n  ), [i, d] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    t.lastMicrophoneError\n  ), [l, f] = react__WEBPACK_IMPORTED_MODULE_0__.useState(t.lastCameraError), [p, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    t.isMicrophoneEnabled\n  ), [g, S] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    void 0\n  ), [M, v] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0), P = (h) => {\n    u(h.isCameraEnabled), c(h.isMicrophoneEnabled), m(h.isScreenShareEnabled), v(h.cameraTrack), S(h.microphoneTrack), d(h.participant.lastMicrophoneError), f(h.participant.lastCameraError), a(h.participant);\n  };\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const h = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(n.localParticipant).subscribe(P);\n    return () => h.unsubscribe();\n  }, [n]), {\n    isMicrophoneEnabled: s,\n    isScreenShareEnabled: p,\n    isCameraEnabled: o,\n    microphoneTrack: g,\n    cameraTrack: M,\n    lastMicrophoneError: i,\n    lastCameraError: l,\n    localParticipant: t\n  };\n}\nfunction Et() {\n  const e = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(e.localParticipant),\n    [e]\n  );\n  return b(n, e.localParticipant.permissions);\n}\nfunction Tt({\n  kind: e,\n  room: n,\n  track: t,\n  requestPermissions: a,\n  onError: s\n}) {\n  const c = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.w)(), o = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.x)(e, s, a),\n    [e, a, s]\n  ), u = b(o, []), [i, d] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"\"), { className: l, activeDeviceObservable: f, setActiveMediaDevice: p } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.y)(e, n ?? c, t),\n    [e, n, c, t]\n  );\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const m = f.subscribe((g) => {\n      _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.info(\"setCurrentDeviceId\", g), g && d(g);\n    });\n    return () => {\n      m == null || m.unsubscribe();\n    };\n  }, [f]), { devices: u, className: l, activeDeviceId: i, setActiveMediaDevice: p };\n}\nfunction wt({\n  kind: e,\n  onError: n\n}) {\n  const t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.x)(e, n),\n    [e, n]\n  );\n  return b(t, []);\n}\nfunction Ke(e, n, t = {}) {\n  const a = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]), s = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1), c = n !== s.current, o = typeof t.customSortFunction == \"function\" ? t.customSortFunction(e) : (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.z)(e);\n  let u = [...o];\n  if (c === !1)\n    try {\n      u = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.A)(a.current, o, n);\n    } catch (i) {\n      _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.error(\"Error while running updatePages(): \", i);\n    }\n  return c ? a.current = o : a.current = u, s.current = n, u;\n}\nfunction At(e, n) {\n  const [t, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(1), s = Math.max(Math.ceil(n.length / e), 1);\n  t > s && a(s);\n  const c = t * e, o = c - e, u = (f) => {\n    a((p) => f === \"next\" ? p === s ? p : p + 1 : p === 1 ? p : p - 1);\n  }, i = (f) => {\n    f > s ? a(s) : f < 1 ? a(1) : a(f);\n  }, l = Ke(n, e).slice(o, c);\n  return {\n    totalPageCount: s,\n    nextPage: () => u(\"next\"),\n    prevPage: () => u(\"previous\"),\n    setPage: i,\n    firstItemIndex: o,\n    lastItemIndex: c,\n    tracks: l,\n    currentPage: t\n  };\n}\nfunction Ct(e = {}) {\n  let n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.B)();\n  e.participant && (n = e.participant);\n  const t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.C)(n), [n]), { identity: a, name: s, metadata: c } = b(t, {\n    name: n == null ? void 0 : n.name,\n    identity: n == null ? void 0 : n.identity,\n    metadata: n == null ? void 0 : n.metadata\n  });\n  return { identity: a, name: s, metadata: c };\n}\nfunction It(e = {}) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(e.participant), t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(n), [n]);\n  return b(t, n.permissions);\n}\nfunction Ot({\n  trackRef: e,\n  onParticipantClick: n,\n  disableSpeakingIndicator: t,\n  htmlProps: a\n}) {\n  const s = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(e), c = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className: p } = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.D)();\n    return (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(a, {\n      className: p,\n      onClick: (m) => {\n        var g;\n        if ((g = a.onClick) == null || g.call(a, m), typeof n == \"function\") {\n          const S = s.publication ?? s.participant.getTrackPublication(s.source);\n          n({ participant: s.participant, track: S });\n        }\n      }\n    });\n  }, [\n    a,\n    n,\n    s.publication,\n    s.source,\n    s.participant\n  ]), o = s.participant.getTrackPublication(livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    participant: s.participant,\n    source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n    publication: o\n  }), [o, s.participant]), i = z(s), d = z(u), l = Xe(s.participant), f = je(s);\n  return {\n    elementProps: {\n      \"data-lk-audio-muted\": d,\n      \"data-lk-video-muted\": i,\n      \"data-lk-speaking\": t === !0 ? !1 : l,\n      \"data-lk-local-participant\": s.participant.isLocal,\n      \"data-lk-source\": s.source,\n      \"data-lk-facing-mode\": f,\n      ...c\n    }\n  };\n}\nfunction G(e = {}) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e.room), [t, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const s = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.E)(n, {\n      additionalRoomEvents: e.updateOnlyOn\n    }).subscribe(a);\n    return () => s.unsubscribe();\n  }, [n, JSON.stringify(e.updateOnlyOn)]), t;\n}\nfunction Dt(e = {}) {\n  const n = G(e), { localParticipant: t } = Ye(e);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => [t, ...n],\n    [t, n]\n  );\n}\nfunction Lt(e) {\n  return e = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.F)(e), react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (e == null ? void 0 : e.pin.state) !== void 0 && e.pin.state.length >= 1 ? e.pin.state : [], [e.pin.state]);\n}\nfunction Rt(e, n = {}) {\n  const t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), [a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n.updateOnlyOn), s = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => typeof e == \"string\" ? (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.H)(t, e, {\n    additionalEvents: a\n  }) : (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.I)(t, e, {\n    additionalEvents: a\n  }), [t, JSON.stringify(e), a]), [c, o] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    p: void 0\n  });\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const u = s.subscribe((i) => o({ p: i }));\n    return () => u.unsubscribe();\n  }, [s]), c.p;\n}\nfunction Ft(e = {}) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e.room), t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.J)(n), [n]), { name: a, metadata: s } = b(t, {\n    name: n.name,\n    metadata: n.metadata\n  });\n  return { name: a, metadata: s };\n}\nfunction Ze() {\n  const e = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.K)(e), [e]);\n  return b(n, e.activeSpeakers);\n}\nfunction Nt(e) {\n  const [n, t] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.M)(e)\n  ), a = Ze();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    t((0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.M)(e));\n  }, [a, e]), n;\n}\nfunction Vt({ room: e, props: n }) {\n  const t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e), { className: a, roomAudioPlaybackAllowedObservable: s, handleStartAudioPlayback: c } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.N)(),\n    []\n  ), o = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => s(t),\n    [t, s]\n  ), { canPlayAudio: u } = b(o, {\n    canPlayAudio: t.canPlaybackAudio\n  });\n  return { mergedProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(n, {\n      className: a,\n      onClick: () => {\n        c(t);\n      },\n      style: { display: u ? \"none\" : \"block\" }\n    }),\n    [n, a, u, c, t]\n  ), canPlayAudio: u };\n}\nfunction Bt({ room: e, props: n }) {\n  const t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e), { className: a, roomVideoPlaybackAllowedObservable: s, handleStartVideoPlayback: c } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.O)(),\n    []\n  ), o = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => s(t),\n    [t, s]\n  ), { canPlayVideo: u } = b(o, {\n    canPlayVideo: t.canPlaybackVideo\n  });\n  return { mergedProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(n, {\n      className: a,\n      onClick: () => {\n        c(t);\n      },\n      style: { display: u ? \"none\" : \"block\" }\n    }),\n    [n, a, u, c, t]\n  ), canPlayVideo: u };\n}\nfunction zt(e, n = {}) {\n  const t = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), a = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), s = n.minSwipeDistance ?? 50, c = (i) => {\n    a.current = null, t.current = i.targetTouches[0].clientX;\n  }, o = (i) => {\n    a.current = i.targetTouches[0].clientX;\n  }, u = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    if (!t.current || !a.current)\n      return;\n    const i = t.current - a.current, d = i > s, l = i < -s;\n    d && n.onLeftSwipe && n.onLeftSwipe(), l && n.onRightSwipe && n.onRightSwipe();\n  }, [s, n]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const i = e.current;\n    return i && (i.addEventListener(\"touchstart\", c, { passive: !0 }), i.addEventListener(\"touchmove\", o, { passive: !0 }), i.addEventListener(\"touchend\", u, { passive: !0 })), () => {\n      i && (i.removeEventListener(\"touchstart\", c), i.removeEventListener(\"touchmove\", o), i.removeEventListener(\"touchend\", u));\n    };\n  }, [e, u]);\n}\nfunction Ut({ props: e }) {\n  const { dispatch: n, state: t } = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a)().widget, { className: a } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.P)(), []);\n  return { mergedProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(e, {\n    className: a,\n    onClick: () => {\n      n && n({ msg: \"toggle_chat\" });\n    },\n    \"aria-pressed\": t != null && t.showChat ? \"true\" : \"false\",\n    \"data-lk-unread-msgs\": t ? t.unreadMessages < 10 ? t.unreadMessages.toFixed(0) : \"9+\" : \"0\"\n  }), [e, a, n, t]) };\n}\nfunction qt(e, n, t = {}) {\n  const [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var o;\n    if (e === void 0)\n      throw Error(\"token endpoint needs to be defined\");\n    if (((o = t.userInfo) == null ? void 0 : o.identity) === void 0)\n      return;\n    (async () => {\n      _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"fetching token\");\n      const u = new URLSearchParams({ ...t.userInfo, roomName: n }), i = await fetch(`${e}?${u.toString()}`);\n      if (!i.ok) {\n        _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.error(\n          `Could not fetch token. Server responded with status ${i.status}: ${i.statusText}`\n        );\n        return;\n      }\n      const { accessToken: d } = await i.json();\n      s(d);\n    })();\n  }, [e, n, JSON.stringify(t)]), a;\n}\nfunction Jt(e) {\n  var c, o;\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(e), { className: t, mediaMutedObserver: a } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.Q)(n),\n    [(0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.p)(n)]\n  );\n  return { isMuted: b(\n    a,\n    !!((c = n.publication) != null && c.isMuted || (o = n.participant.getTrackPublication(n.source)) != null && o.isMuted)\n  ), className: t };\n}\nfunction _t({\n  source: e,\n  onChange: n,\n  initialState: t,\n  captureOptions: a,\n  publishOptions: s,\n  onDeviceError: c,\n  ...o\n}) {\n  var P;\n  const u = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.w)(), i = (P = u == null ? void 0 : u.localParticipant) == null ? void 0 : P.getTrackPublication(e), d = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1), { toggle: l, className: f, pendingObserver: p, enabledObserver: m } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => u ? (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.S)(e, u, a, s, c) : (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.T)(),\n    [u, e, JSON.stringify(a), s]\n  ), g = b(p, !1), S = b(m, t ?? !!(i != null && i.isEnabled));\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    n == null || n(S, d.current), d.current = !1;\n  }, [S, n]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    t !== void 0 && (_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"forcing initial toggle state\", e, t), l(t));\n  }, []);\n  const M = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_3__.m)(o, { className: f }), [o, f]), v = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (h) => {\n      var C;\n      d.current = !0, l().catch(() => d.current = !1), (C = o.onClick) == null || C.call(o, h);\n    },\n    [o, l]\n  );\n  return {\n    toggle: l,\n    enabled: S,\n    pending: g,\n    track: i,\n    buttonProps: {\n      ...M,\n      \"aria-pressed\": S,\n      \"data-lk-source\": e,\n      \"data-lk-enabled\": S,\n      disabled: g,\n      onClick: v\n    }\n  };\n}\nfunction Wt(e = [\n  livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera,\n  livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n  livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare,\n  livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShareAudio,\n  livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Unknown\n], n = {}) {\n  const t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(n.room), [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), [c, o] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => e.map((d) => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.U)(d) ? d.source : d), [JSON.stringify(e)]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const d = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.V)(t, u, {\n      additionalRoomEvents: n.updateOnlyOn,\n      onlySubscribed: n.onlySubscribed\n    }).subscribe(({ trackReferences: l, participants: f }) => {\n      _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"setting track bundles\", l, f), s(l), o(f);\n    });\n    return () => d.unsubscribe();\n  }, [\n    t,\n    JSON.stringify(n.onlySubscribed),\n    JSON.stringify(n.updateOnlyOn),\n    JSON.stringify(e)\n  ]), react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if ((0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.W)(e)) {\n      const d = tt(e, c), l = Array.from(a);\n      return c.forEach((f) => {\n        d.has(f.identity) && (d.get(f.identity) ?? []).forEach((m) => {\n          if (a.find(\n            ({ participant: S, publication: M }) => f.identity === S.identity && M.source === m\n          ))\n            return;\n          _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\n            `Add ${m} placeholder for participant ${f.identity}.`\n          );\n          const g = {\n            participant: f,\n            source: m\n          };\n          l.push(g);\n        });\n      }), l;\n    } else\n      return a;\n  }, [a, c, e]);\n}\nfunction et(e, n) {\n  const t = new Set(e);\n  for (const a of n)\n    t.delete(a);\n  return t;\n}\nfunction tt(e, n) {\n  const t = /* @__PURE__ */ new Map();\n  if ((0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.W)(e)) {\n    const a = e.filter((s) => s.withPlaceholder).map((s) => s.source);\n    n.forEach((s) => {\n      const c = s.getTrackPublications().map((u) => {\n        var i;\n        return (i = u.track) == null ? void 0 : i.source;\n      }).filter((u) => u !== void 0), o = Array.from(\n        et(new Set(a), new Set(c))\n      );\n      o.length > 0 && t.set(s.identity, o);\n    });\n  }\n  return t;\n}\nfunction nt(e) {\n  const [n, t] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.X)(e)), { trackObserver: a } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.Y)(e), [e.participant.sid ?? e.participant.identity, e.source]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const s = a.subscribe((c) => {\n      t(c);\n    });\n    return () => s == null ? void 0 : s.unsubscribe();\n  }, [a]), {\n    participant: e.participant,\n    source: e.source ?? livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Unknown,\n    publication: n\n  };\n}\nfunction Qt(e, n) {\n  const t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(n);\n  return nt({ name: e, participant: t });\n}\nfunction $t(e) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), t = O(n), a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => t === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Disconnected,\n    [t]\n  ), s = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.Z)(n, e),\n    [n, e, a]\n  ), c = b(s.isSendingObservable, !1), o = b(s.messageObservable, []);\n  return { send: s.send, update: s.update, chatMessages: o, isSending: c };\n}\nfunction Gt(e = {}) {\n  const [n, t] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__._)(e.defaults, e.preventLoad ?? !1)\n  ), a = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i) => {\n    t((d) => ({ ...d, audioEnabled: i }));\n  }, []), s = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i) => {\n    t((d) => ({ ...d, videoEnabled: i }));\n  }, []), c = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i) => {\n    t((d) => ({ ...d, audioDeviceId: i }));\n  }, []), o = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i) => {\n    t((d) => ({ ...d, videoDeviceId: i }));\n  }, []), u = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((i) => {\n    t((d) => ({ ...d, username: i }));\n  }, []);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.$)(n, e.preventSave ?? !1);\n  }, [n, e.preventSave]), {\n    userChoices: n,\n    saveAudioInputEnabled: a,\n    saveVideoInputEnabled: s,\n    saveAudioInputDeviceId: c,\n    saveVideoInputDeviceId: o,\n    saveUsername: u\n  };\n}\nfunction xt(e, n = {}) {\n  const t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(e), a = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(n.room), s = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a0)(a, t), [a, t]);\n  return b(\n    s,\n    t instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.LocalParticipant ? t.isE2EEEnabled : !!(t != null && t.isEncrypted)\n  );\n}\nfunction Ht(e, n = { fftSize: 32, smoothingTimeConstant: 0 }) {\n  const t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a1)(e) ? e.publication.track : e, [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!t || !t.mediaStream)\n      return;\n    const { cleanup: c, analyser: o } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createAudioAnalyser)(t, n), u = o.frequencyBinCount, i = new Uint8Array(u), l = setInterval(() => {\n      o.getByteFrequencyData(i);\n      let f = 0;\n      for (let p = 0; p < i.length; p++) {\n        const m = i[p];\n        f += m * m;\n      }\n      s(Math.sqrt(f / i.length) / 255);\n    }, 1e3 / 30);\n    return () => {\n      c(), clearInterval(l);\n    };\n  }, [t, t == null ? void 0 : t.mediaStream, JSON.stringify(n)]), a;\n}\nconst st = (e) => {\n  const n = (t) => {\n    let c = 1 - Math.max(-100, Math.min(-10, t)) * -1 / 100;\n    return c = Math.sqrt(c), c;\n  };\n  return e.map((t) => t === -1 / 0 ? 0 : n(t));\n}, at = {\n  bands: 5,\n  loPass: 100,\n  hiPass: 600,\n  updateInterval: 32,\n  analyserOptions: { fftSize: 2048 }\n};\nfunction jt(e, n = {}) {\n  var o;\n  const t = e instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track ? e : (o = e == null ? void 0 : e.publication) == null ? void 0 : o.track, a = { ...at, ...n }, [s, c] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    new Array(a.bands).fill(0)\n  );\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!t || !(t != null && t.mediaStream))\n      return;\n    const { analyser: u, cleanup: i } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createAudioAnalyser)(t, a.analyserOptions), d = u.frequencyBinCount, l = new Float32Array(d), p = setInterval(() => {\n      u.getFloatFrequencyData(l);\n      let m = new Float32Array(l.length);\n      for (let v = 0; v < l.length; v++)\n        m[v] = l[v];\n      m = m.slice(n.loPass, n.hiPass);\n      const g = st(m), S = Math.ceil(g.length / a.bands), M = [];\n      for (let v = 0; v < a.bands; v++) {\n        const P = g.slice(v * S, (v + 1) * S).reduce((h, C) => h += C, 0);\n        M.push(P / S);\n      }\n      c(M);\n    }, a.updateInterval);\n    return () => {\n      i(), clearInterval(p);\n    };\n  }, [t, t == null ? void 0 : t.mediaStream, JSON.stringify(n)]), s;\n}\nconst rt = {\n  barCount: 120,\n  volMultiplier: 5,\n  updateInterval: 20\n};\nfunction Xt(e, n = {}) {\n  var l;\n  const t = e instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track ? e : (l = e == null ? void 0 : e.publication) == null ? void 0 : l.track, a = { ...rt, ...n }, s = react__WEBPACK_IMPORTED_MODULE_0__.useRef(new Float32Array()), c = react__WEBPACK_IMPORTED_MODULE_0__.useRef(performance.now()), o = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0), [u, i] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), d = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((f) => {\n    i(\n      Array.from(\n        ot(f, a.barCount).map((p) => Math.sqrt(p) * a.volMultiplier)\n        // wave.slice(0, opts.barCount).map((v) => sigmoid(v * opts.volMultiplier, 0.08, 0.2)),\n      )\n    );\n  }, []);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!t || !(t != null && t.mediaStream))\n      return;\n    const { analyser: f, cleanup: p } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createAudioAnalyser)(t, {\n      fftSize: U(a.barCount)\n    }), m = U(a.barCount), g = new Float32Array(m), S = () => {\n      if (M = requestAnimationFrame(S), f.getFloatTimeDomainData(g), s.current.map((v, P) => v + g[P]), o.current += 1, performance.now() - c.current >= a.updateInterval) {\n        const v = g.map((P) => P / o.current);\n        d(v), c.current = performance.now(), o.current = 0;\n      }\n    };\n    let M = requestAnimationFrame(S);\n    return () => {\n      p(), cancelAnimationFrame(M);\n    };\n  }, [t, t == null ? void 0 : t.mediaStream, JSON.stringify(n), d]), {\n    bars: u\n  };\n}\nfunction U(e) {\n  return e < 32 ? 32 : ct(e);\n}\nfunction ct(e) {\n  let n = 2;\n  for (; e >>= 1; )\n    n <<= 1;\n  return n;\n}\nfunction ot(e, n) {\n  const t = Math.floor(e.length / n), a = new Float32Array(n);\n  for (let s = 0; s < n; s++) {\n    const c = t * s;\n    let o = 0;\n    for (let u = 0; u < t; u++)\n      o = o + Math.abs(e[c + u]);\n    a[s] = o / t;\n  }\n  return a;\n}\nfunction it(e, n) {\n  const t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(), a = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.B)(), s = n ? t.getParticipantByIdentity(n) : a, c = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => s ? (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a2)(s, { sources: e }) : void 0,\n    [s == null ? void 0 : s.sid, s == null ? void 0 : s.identity, JSON.stringify(e)]\n  );\n  return b(c, []);\n}\nfunction ut(e) {\n  var t, a, s;\n  const n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => {\n      var c;\n      return (c = e == null ? void 0 : e.publication) != null && c.track ? (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a3)(e == null ? void 0 : e.publication.track) : void 0;\n    },\n    [(t = e == null ? void 0 : e.publication) == null ? void 0 : t.track]\n  );\n  return b(n, {\n    timestamp: Date.now(),\n    rtpTimestamp: (s = (a = e == null ? void 0 : e.publication) == null ? void 0 : a.track) == null ? void 0 : s.rtpTimestamp\n  });\n}\nconst dt = {\n  bufferSize: 100\n  // maxAge: 2_000,\n};\nfunction lt(e, n) {\n  const t = { ...dt, ...n }, [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), c = ut(e), o = (u) => {\n    var i;\n    (i = t.onTranscription) == null || i.call(t, u), s(\n      (d) => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a5)(\n        d,\n        // when first receiving a segment, add the current media timestamp to it\n        u.map((l) => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a6)(l, c)),\n        t.bufferSize\n      )\n    );\n  };\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!(e != null && e.publication))\n      return;\n    const u = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a4)(e.publication).subscribe((i) => {\n      o(...i);\n    });\n    return () => {\n      u.unsubscribe();\n    };\n  }, [e && (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.p)(e), o]), { segments: a };\n}\nfunction ft(e = {}) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.B)(), t = e.participant ?? n, a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    // weird typescript constraint\n    () => t ? (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a7)(t) : (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a7)(t),\n    [t]\n  );\n  return b(a, {\n    attributes: t == null ? void 0 : t.attributes\n  });\n}\nfunction Yt(e, n = {}) {\n  const t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(n.participant), [a, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(t.attributes[e]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!t)\n      return;\n    const c = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a7)(t).subscribe((o) => {\n      o.changed[e] !== void 0 && s(o.attributes[e]);\n    });\n    return () => {\n      c.unsubscribe();\n    };\n  }, [t, e]), a;\n}\nconst q = \"lk.agent.state\";\nfunction Kt() {\n  const e = G().find((o) => o.kind === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ParticipantKind.AGENT), n = it([livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone], e == null ? void 0 : e.identity)[0], { segments: t } = lt(n), a = O(), { attributes: s } = ft({ participant: e }), c = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => a === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Disconnected ? \"disconnected\" : a === livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Connecting || !e || !(s != null && s[q]) ? \"connecting\" : s[q], [s, e, a]);\n  return {\n    agent: e,\n    state: c,\n    audioTrack: n,\n    agentTranscriptions: t,\n    agentAttributes: s\n  };\n}\nfunction Zt(e) {\n  const n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(e), t = O(n), a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.a8)(n), [n, t]);\n  return b(a, n.isRecording);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/hooks-C6T19zG6.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/krisp.mjs":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/krisp.mjs ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useKrispNoiseFilter: () => (/* binding */ b)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.2.14_react-dom@18.3.1_react@18.3.1__react@18.3.1_sass@1.80.3/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.5.9/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var _hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hooks-C6T19zG6.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/hooks-C6T19zG6.mjs\");\n\n\n\nfunction b(n = {}) {\n  const [o, f] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [u, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [p, l] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1);\n  let e = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.C)().microphoneTrack;\n  const [t, d] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  n.trackRef && (e = n.trackRef.publication);\n  const k = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async (r) => {\n    if (r) {\n      const { KrispNoiseFilter: s, isKrispNoiseFilterSupported: c } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9\").then(__webpack_require__.bind(__webpack_require__, /*! @livekit/krisp-noise-filter */ \"(ssr)/./node_modules/.pnpm/@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9/node_modules/@livekit/krisp-noise-filter/dist/index.js\"));\n      if (!c()) {\n        console.warn(\"Krisp noise filter is not supported in this browser\");\n        return;\n      }\n      t || d(s(n.filterOptions));\n    }\n    f((s) => (s !== r && a(!0), r));\n  }, []);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var r;\n    if (e && e.track instanceof livekit_client__WEBPACK_IMPORTED_MODULE_1__.LocalAudioTrack && t) {\n      const s = e.track.getProcessor();\n      s && s.name === \"livekit-noise-filter\" ? (a(!0), s.setEnabled(o).finally(() => {\n        a(!1), l(o);\n      })) : !s && o && (a(!0), (r = e == null ? void 0 : e.track) == null || r.setProcessor(t).then(() => t.setEnabled(o)).then(() => {\n        l(!0);\n      }).catch((c) => {\n        l(!1), console.error(c);\n      }).finally(() => {\n        a(!1);\n      }));\n    }\n  }, [o, e, t]), {\n    setNoiseFilterEnabled: k,\n    isNoiseFilterEnabled: p,\n    isNoiseFilterPending: u,\n    processor: t\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L2Rpc3Qva3Jpc3AubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFtQ2dCLFNBQUFBLEVBQW9CQyxJQUFzQyxJQUFJO0FBQzVFLFFBQU0sQ0FBQ0MsR0FBY0MsQ0FBZSxJQUFJQywyQ0FBYyxDQUFDLEVBQUssR0FDdEQsQ0FBQ0MsR0FBc0JDLENBQXVCLElBQUlGLDJDQUFjLENBQUMsRUFBSyxHQUN0RSxDQUFDRyxHQUFzQkMsQ0FBdUIsSUFBSUosMkNBQWMsQ0FBQyxFQUFLO0FBQ3hFLE1BQUFLLElBQWlCQyxzREFBQUEsQ0FBc0I7QUFDM0MsUUFBTSxDQUFDQyxHQUFnQkMsQ0FBaUIsSUFBSVIsMkNBQWMsQ0FFeEQ7QUFDRixFQUFJSCxFQUFRLGFBQ1ZRLElBQWlCUixFQUFRLFNBQVM7QUFHcEMsUUFBTVksSUFBd0JULDhDQUFpQixDQUFDLE9BQU9VLE1BQW9CO0FBQ3pFLFFBQUlBLEdBQVE7QUFDVixZQUFNLEVBQUUsa0JBQUFDLEdBQWtCLDZCQUFBQyxFQUFnQyxVQUFNLGtWQUUvRDtBQUVHLFdBQUNBLEtBQStCO0FBQ2xDLGdCQUFRLEtBQUsscURBQXFEO0FBQ2xFO0FBQUEsTUFDRjtBQUNBLE1BQUtMLEtBQ2VDLEVBQUFHLEVBQWlCZCxFQUFRLGFBQWEsQ0FBQztBQUFBLElBRTdEO0FBQ0EsSUFBQUUsRUFBZ0IsQ0FBQ2MsT0FDWEEsTUFBU0gsS0FDWFIsRUFBd0IsRUFBSSxHQUV2QlEsRUFDUjtBQUFBLEVBQ0gsR0FBRyxDQUFFO0FBRUwsU0FBQVYsNENBQWUsQ0FBQyxNQUFNOztBQUNwQixRQUFJSyxLQUFrQkEsRUFBZSxpQkFBaUJTLDJEQUFBQSxJQUFtQlAsR0FBZ0I7QUFDakYsWUFBQVEsSUFBbUJWLEVBQWUsTUFBTSxhQUFhO0FBQ3ZELE1BQUFVLEtBQW9CQSxFQUFpQixTQUFTLDBCQUNoRGIsRUFBd0IsRUFBSSxHQUMzQmEsRUFBK0MsV0FBV2pCLENBQVksRUFBRSxRQUFRLE1BQU07QUFDckYsUUFBQUksRUFBd0IsRUFBSyxHQUM3QkUsRUFBd0JOLENBQVk7QUFBQSxPQUNyQyxLQUNRLENBQUNpQixLQUFvQmpCLE1BQzlCSSxFQUF3QixFQUFJLElBQzVCYyxJQUFBWCxLQUFBLGdCQUFBQSxFQUFnQixVQUFoQixRQUFBVyxFQUNJLGFBQWFULEdBQ2QsS0FBSyxNQUFNQSxFQUFlLFdBQVdULENBQVksR0FDakQsS0FBSyxNQUFNO0FBQ1YsUUFBQU0sRUFBd0IsRUFBSTtBQUFBLFNBRTdCLE1BQU0sQ0FBQ2EsTUFBVztBQUNqQixRQUFBYixFQUF3QixFQUFLLEdBQzdCLFFBQVEsTUFBTWEsQ0FBQztBQUFBLFNBRWhCLFFBQVEsTUFBTTtBQUNiLFFBQUFmLEVBQXdCLEVBQUs7QUFBQTtBQUFBLElBR3JDO0FBQUEsRUFDQyxJQUFDSixHQUFjTyxHQUFnQkUsQ0FBYyxDQUFDLEdBRTFDO0FBQUEsSUFDTCx1QkFBQUU7QUFBQSxJQUNBLHNCQUFBTjtBQUFBLElBQ0Esc0JBQUFGO0FBQUEsSUFDQSxXQUFXTTtBQUFBO0FBRWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZla2l0LW1lZXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdmVraXQrY29tcG9uZW50cy1yZWFjdEAyLjYuNV9AbGl2ZWtpdCtrcmlzcC1ub2lzZS1maWx0ZXJAMC4yLjEyX2xpdmVraXQtY2xpZW50QDIuNS45X19saXZlX2xhdjZneWI3ejY2M2p4bG5laXg1cHNlcGV5L25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXJlYWN0L3NyYy9ob29rcy9jbG91ZC9rcmlzcC91c2VLcmlzcE5vaXNlRmlsdGVyLnRzP2ZjOTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTG9jYWxBdWRpb1RyYWNrIH0gZnJvbSAnbGl2ZWtpdC1jbGllbnQnO1xuaW1wb3J0IHR5cGUgeyBLcmlzcE5vaXNlRmlsdGVyUHJvY2Vzc29yLCBOb2lzZUZpbHRlck9wdGlvbnMgfSBmcm9tICdAbGl2ZWtpdC9rcmlzcC1ub2lzZS1maWx0ZXInO1xuaW1wb3J0IHR5cGUgeyBUcmFja1JlZmVyZW5jZU9yUGxhY2Vob2xkZXIgfSBmcm9tICdAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmUnO1xuaW1wb3J0IHsgdXNlTG9jYWxQYXJ0aWNpcGFudCB9IGZyb20gJy4uLy4uLy4uJztcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSB1c2VLcmlzcE5vaXNlRmlsdGVyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBieSBkZWZhdWx0IHRoZSBob29rIHdpbGwgdXNlIHRoZSBsb2NhbFBhcnRpY2lwYW50J3MgbWljcm9waG9uZSB0cmFjayBwdWJsaWNhdGlvbi5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIGJlaGF2aW9yIGJ5IHBhc3NpbmcgaW4gYSB0YXJnZXQgVHJhY2tSZWZlcmVuY2UgaGVyZVxuICAgKi9cbiAgdHJhY2tSZWY/OiBUcmFja1JlZmVyZW5jZU9yUGxhY2Vob2xkZXI7XG4gIGZpbHRlck9wdGlvbnM/OiBOb2lzZUZpbHRlck9wdGlvbnM7XG59XG5cbi8qKlxuICogVGhpcyBob29rIGlzIGEgY29udmVuaWVuY2UgaGVscGVyIGZvciBlbmFibGluZyBLcmlzcCBFbmhhbmNlZCBBdWRpbyBOb2lzZSBDYW5jZWxsYXRpb24gb24gTGl2ZUtpdCBhdWRpbyB0cmFja3MuXG4gKiBJdCByZXR1cm5zIGEgYHNldE5vaXNlRmlsdGVyRW5hYmxlZGAgbWV0aG9kIHRvIGNvbnZlbmllbnRseSB0b2dnbGUgYmV0d2VlbiBlbmFibGVkIGFuZCBkaXNhYmxlZCBzdGF0ZXMuXG4gKlxuICogQHJlbWFya3MgS3Jpc3Agbm9pc2UgZmlsdGVyIGlzIGEgZmVhdHVyZSB0aGF0J3Mgb25seSBzdXBwb3J0ZWQgb24gTGl2ZUtpdCBjbG91ZCBwbGFuc1xuICogQGFscGhhXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiAgIGNvbnN0IGtyaXNwID0gdXNlS3Jpc3BOb2lzZUZpbHRlcigpO1xuICogICByZXR1cm4gPGlucHV0XG4gICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgIG9uQ2hhbmdlPXsoZXYpID0+IGtyaXNwLnNldE5vaXNlRmlsdGVyRW5hYmxlZChldi50YXJnZXQuY2hlY2tlZCl9XG4gICAgICAgIGNoZWNrZWQ9e2tyaXNwLmlzTm9pc2VGaWx0ZXJFbmFibGVkfVxuICAgICAgICBkaXNhYmxlZD17a3Jpc3AuaXNOb2lzZUZpbHRlclBlbmRpbmd9XG4gICAgICAvPlxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VLcmlzcE5vaXNlRmlsdGVyKG9wdGlvbnM6IHVzZUtyaXNwTm9pc2VGaWx0ZXJPcHRpb25zID0ge30pIHtcbiAgY29uc3QgW3Nob3VsZEVuYWJsZSwgc2V0U2hvdWxkRW5hYmxlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2lzTm9pc2VGaWx0ZXJQZW5kaW5nLCBzZXRJc05vaXNlRmlsdGVyUGVuZGluZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpc05vaXNlRmlsdGVyRW5hYmxlZCwgc2V0SXNOb2lzZUZpbHRlckVuYWJsZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBsZXQgbWljUHVibGljYXRpb24gPSB1c2VMb2NhbFBhcnRpY2lwYW50KCkubWljcm9waG9uZVRyYWNrO1xuICBjb25zdCBba3Jpc3BQcm9jZXNzb3IsIHNldEtyaXNwUHJvY2Vzc29yXSA9IFJlYWN0LnVzZVN0YXRlPFxuICAgIEtyaXNwTm9pc2VGaWx0ZXJQcm9jZXNzb3IgfCB1bmRlZmluZWRcbiAgPigpO1xuICBpZiAob3B0aW9ucy50cmFja1JlZikge1xuICAgIG1pY1B1YmxpY2F0aW9uID0gb3B0aW9ucy50cmFja1JlZi5wdWJsaWNhdGlvbjtcbiAgfVxuXG4gIGNvbnN0IHNldE5vaXNlRmlsdGVyRW5hYmxlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKGFzeW5jIChlbmFibGU6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAoZW5hYmxlKSB7XG4gICAgICBjb25zdCB7IEtyaXNwTm9pc2VGaWx0ZXIsIGlzS3Jpc3BOb2lzZUZpbHRlclN1cHBvcnRlZCB9ID0gYXdhaXQgaW1wb3J0KFxuICAgICAgICAnQGxpdmVraXQva3Jpc3Atbm9pc2UtZmlsdGVyJ1xuICAgICAgKTtcblxuICAgICAgaWYgKCFpc0tyaXNwTm9pc2VGaWx0ZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0tyaXNwIG5vaXNlIGZpbHRlciBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWtyaXNwUHJvY2Vzc29yKSB7XG4gICAgICAgIHNldEtyaXNwUHJvY2Vzc29yKEtyaXNwTm9pc2VGaWx0ZXIob3B0aW9ucy5maWx0ZXJPcHRpb25zKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNldFNob3VsZEVuYWJsZSgocHJldikgPT4ge1xuICAgICAgaWYgKHByZXYgIT09IGVuYWJsZSkge1xuICAgICAgICBzZXRJc05vaXNlRmlsdGVyUGVuZGluZyh0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmFibGU7XG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtaWNQdWJsaWNhdGlvbiAmJiBtaWNQdWJsaWNhdGlvbi50cmFjayBpbnN0YW5jZW9mIExvY2FsQXVkaW9UcmFjayAmJiBrcmlzcFByb2Nlc3Nvcikge1xuICAgICAgY29uc3QgY3VycmVudFByb2Nlc3NvciA9IG1pY1B1YmxpY2F0aW9uLnRyYWNrLmdldFByb2Nlc3NvcigpO1xuICAgICAgaWYgKGN1cnJlbnRQcm9jZXNzb3IgJiYgY3VycmVudFByb2Nlc3Nvci5uYW1lID09PSAnbGl2ZWtpdC1ub2lzZS1maWx0ZXInKSB7XG4gICAgICAgIHNldElzTm9pc2VGaWx0ZXJQZW5kaW5nKHRydWUpO1xuICAgICAgICAoY3VycmVudFByb2Nlc3NvciBhcyBLcmlzcE5vaXNlRmlsdGVyUHJvY2Vzc29yKS5zZXRFbmFibGVkKHNob3VsZEVuYWJsZSkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgc2V0SXNOb2lzZUZpbHRlclBlbmRpbmcoZmFsc2UpO1xuICAgICAgICAgIHNldElzTm9pc2VGaWx0ZXJFbmFibGVkKHNob3VsZEVuYWJsZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICghY3VycmVudFByb2Nlc3NvciAmJiBzaG91bGRFbmFibGUpIHtcbiAgICAgICAgc2V0SXNOb2lzZUZpbHRlclBlbmRpbmcodHJ1ZSk7XG4gICAgICAgIG1pY1B1YmxpY2F0aW9uPy50cmFja1xuICAgICAgICAgID8uc2V0UHJvY2Vzc29yKGtyaXNwUHJvY2Vzc29yKVxuICAgICAgICAgIC50aGVuKCgpID0+IGtyaXNwUHJvY2Vzc29yLnNldEVuYWJsZWQoc2hvdWxkRW5hYmxlKSlcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBzZXRJc05vaXNlRmlsdGVyRW5hYmxlZCh0cnVlKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZTogYW55KSA9PiB7XG4gICAgICAgICAgICBzZXRJc05vaXNlRmlsdGVyRW5hYmxlZChmYWxzZSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgc2V0SXNOb2lzZUZpbHRlclBlbmRpbmcoZmFsc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3Nob3VsZEVuYWJsZSwgbWljUHVibGljYXRpb24sIGtyaXNwUHJvY2Vzc29yXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBzZXROb2lzZUZpbHRlckVuYWJsZWQsXG4gICAgaXNOb2lzZUZpbHRlckVuYWJsZWQsXG4gICAgaXNOb2lzZUZpbHRlclBlbmRpbmcsXG4gICAgcHJvY2Vzc29yOiBrcmlzcFByb2Nlc3NvcixcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJ1c2VLcmlzcE5vaXNlRmlsdGVyIiwib3B0aW9ucyIsInNob3VsZEVuYWJsZSIsInNldFNob3VsZEVuYWJsZSIsIlJlYWN0IiwiaXNOb2lzZUZpbHRlclBlbmRpbmciLCJzZXRJc05vaXNlRmlsdGVyUGVuZGluZyIsImlzTm9pc2VGaWx0ZXJFbmFibGVkIiwic2V0SXNOb2lzZUZpbHRlckVuYWJsZWQiLCJtaWNQdWJsaWNhdGlvbiIsInVzZUxvY2FsUGFydGljaXBhbnQiLCJrcmlzcFByb2Nlc3NvciIsInNldEtyaXNwUHJvY2Vzc29yIiwic2V0Tm9pc2VGaWx0ZXJFbmFibGVkIiwiZW5hYmxlIiwiS3Jpc3BOb2lzZUZpbHRlciIsImlzS3Jpc3BOb2lzZUZpbHRlclN1cHBvcnRlZCIsInByZXYiLCJMb2NhbEF1ZGlvVHJhY2siLCJjdXJyZW50UHJvY2Vzc29yIiwiX2EiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/krisp.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/prefabs.mjs":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/prefabs.mjs ***!
  \*************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioConference: () => (/* binding */ at),\n/* harmony export */   Chat: () => (/* binding */ ee),\n/* harmony export */   ControlBar: () => (/* binding */ te),\n/* harmony export */   MediaDeviceMenu: () => (/* binding */ O),\n/* harmony export */   PreJoin: () => (/* binding */ et),\n/* harmony export */   VideoConference: () => (/* binding */ tt),\n/* harmony export */   VoiceAssistantControlBar: () => (/* binding */ nt),\n/* harmony export */   usePreviewDevice: () => (/* binding */ Ze),\n/* harmony export */   usePreviewTracks: () => (/* binding */ ze)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.2.14_react-dom@18.3.1_react@18.3.1__react@18.3.1_sass@1.80.3/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components-Y1IPllFz.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/components-Y1IPllFz.mjs\");\n/* harmony import */ var _hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hooks-C6T19zG6.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/hooks-C6T19zG6.mjs\");\n/* harmony import */ var _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contexts-BggYqn0S.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/contexts-BggYqn0S.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.5.9/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var _room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./room-BeQGUa5w.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/room-BeQGUa5w.mjs\");\n\n\n\n\n\n\nfunction ee({\n  messageFormatter: a,\n  messageDecoder: l,\n  messageEncoder: i,\n  channelTopic: c,\n  ...E\n}) {\n  const p = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), m = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({ messageDecoder: l, messageEncoder: i, channelTopic: c }), [l, i, c]), { send: d, chatMessages: g, isSending: t } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.w)(u), r = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.j)(), o = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n  async function S(n) {\n    n.preventDefault(), p.current && p.current.value.trim() !== \"\" && d && (await d(p.current.value), p.current.value = \"\", p.current.focus());\n  }\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var n;\n    m && ((n = m.current) == null || n.scrollTo({ top: m.current.scrollHeight }));\n  }, [m, g]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var s, v, f, b, w;\n    if (!r || g.length === 0)\n      return;\n    if ((s = r.widget.state) != null && s.showChat && g.length > 0 && o.current !== ((v = g[g.length - 1]) == null ? void 0 : v.timestamp)) {\n      o.current = (f = g[g.length - 1]) == null ? void 0 : f.timestamp;\n      return;\n    }\n    const n = g.filter(\n      (L) => !o.current || L.timestamp > o.current\n    ).length, { widget: h } = r;\n    n > 0 && ((b = h.state) == null ? void 0 : b.unreadMessages) !== n && ((w = h.dispatch) == null || w.call(h, { msg: \"unread_msg\", count: n }));\n  }, [g, r == null ? void 0 : r.widget]), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ...E, className: \"lk-chat\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-chat-header\" }, \"Messages\", /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.C, { className: \"lk-close-button\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.S, null))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", { className: \"lk-list lk-chat-messages\", ref: m }, E.children ? g.map(\n    (n, h) => (0,_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.c)(E.children, {\n      entry: n,\n      key: n.id ?? h,\n      messageFormatter: a\n    })\n  ) : g.map((n, h, s) => {\n    const v = h >= 1 && s[h - 1].from === n.from, f = h >= 1 && n.timestamp - s[h - 1].timestamp < 6e4;\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.a,\n      {\n        key: n.id ?? h,\n        hideName: v,\n        hideTimestamp: v === !1 ? !1 : f,\n        entry: n,\n        messageFormatter: a\n      }\n    );\n  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", { className: \"lk-chat-form\", onSubmit: S }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"input\",\n    {\n      className: \"lk-form-control lk-chat-form-input\",\n      disabled: t,\n      ref: p,\n      type: \"text\",\n      placeholder: \"Enter a message...\",\n      onInput: (n) => n.stopPropagation(),\n      onKeyDown: (n) => n.stopPropagation(),\n      onKeyUp: (n) => n.stopPropagation()\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { type: \"submit\", className: \"lk-button lk-chat-form-button\", disabled: t }, \"Send\")));\n}\nfunction O({\n  kind: a,\n  initialSelection: l,\n  onActiveDeviceChange: i,\n  tracks: c,\n  requestPermissions: E = !1,\n  ...p\n}) {\n  const [m, u] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [d, g] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), [t, r] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!0), [o, S] = react__WEBPACK_IMPORTED_MODULE_0__.useState(E), n = (f, b) => {\n    _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"handle device change\"), u(!1), i == null || i(f, b);\n  }, h = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), s = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    m && S(!0);\n  }, [m]), react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {\n    h.current && s.current && (d || t) && (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.an)(h.current, s.current).then(({ x: f, y: b }) => {\n      s.current && Object.assign(s.current.style, { left: `${f}px`, top: `${b}px` });\n    }), r(!1);\n  }, [h, s, d, t]);\n  const v = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (f) => {\n      s.current && f.target !== h.current && m && (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ao)(s.current, f) && u(!1);\n    },\n    [m, s, h]\n  );\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => (document.addEventListener(\"click\", v), window.addEventListener(\"resize\", () => r(!0)), () => {\n    document.removeEventListener(\"click\", v), window.removeEventListener(\"resize\", () => r(!0));\n  }), [v, r]), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"button\",\n    {\n      className: \"lk-button lk-button-menu\",\n      \"aria-pressed\": m,\n      ...p,\n      onClick: () => u(!m),\n      ref: h\n    },\n    p.children\n  ), !p.disabled && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"div\",\n    {\n      className: \"lk-device-menu\",\n      ref: s,\n      style: { visibility: m ? \"visible\" : \"hidden\" }\n    },\n    a ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.M,\n      {\n        initialSelection: l,\n        onActiveDeviceChange: (f) => n(a, f),\n        onDeviceListChange: g,\n        kind: a,\n        track: c == null ? void 0 : c[a],\n        requestPermissions: o\n      }\n    ) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-device-menu-heading\" }, \"Audio inputs\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.M,\n      {\n        kind: \"audioinput\",\n        onActiveDeviceChange: (f) => n(\"audioinput\", f),\n        onDeviceListChange: g,\n        track: c == null ? void 0 : c.audioinput,\n        requestPermissions: o\n      }\n    ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-device-menu-heading\" }, \"Video inputs\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.M,\n      {\n        kind: \"videoinput\",\n        onActiveDeviceChange: (f) => n(\"videoinput\", f),\n        onDeviceListChange: g,\n        track: c == null ? void 0 : c.videoinput,\n        requestPermissions: o\n      }\n    ))\n  ));\n}\nfunction W() {\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    (0,_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.w)();\n  }, []);\n}\nfunction ze(a, l) {\n  const [i, c] = react__WEBPACK_IMPORTED_MODULE_0__.useState(), E = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => new livekit_client__WEBPACK_IMPORTED_MODULE_1__.Mutex(), []);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    let p = !1, m = [];\n    return E.lock().then(async (u) => {\n      try {\n        (a.audio || a.video) && (m = await (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createLocalTracks)(a), p ? m.forEach((d) => d.stop()) : c(m));\n      } catch (d) {\n        l && d instanceof Error ? l(d) : _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.error(d);\n      } finally {\n        u();\n      }\n    }), () => {\n      p = !0, m.forEach((u) => {\n        u.stop();\n      });\n    };\n  }, [JSON.stringify(a), l, E]), i;\n}\nfunction Ze(a, l, i) {\n  const [c, E] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), [p, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), u = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.x)({ kind: i }), [d, g] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    void 0\n  ), [t, r] = react__WEBPACK_IMPORTED_MODULE_0__.useState(), [o, S] = react__WEBPACK_IMPORTED_MODULE_0__.useState(l);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    S(l);\n  }, [l]);\n  const n = async (v, f) => {\n    try {\n      const b = f === \"videoinput\" ? await (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createLocalVideoTrack)({\n        deviceId: v,\n        resolution: livekit_client__WEBPACK_IMPORTED_MODULE_1__.VideoPresets.h720.resolution\n      }) : await (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.createLocalAudioTrack)({ deviceId: v }), w = await b.getDeviceId();\n      w && v !== w && (s.current = w, S(w)), r(b);\n    } catch (b) {\n      b instanceof Error && E(b);\n    }\n  }, h = async (v, f) => {\n    await v.setDeviceId(f), s.current = f;\n  }, s = react__WEBPACK_IMPORTED_MODULE_0__.useRef(o);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    a && !t && !c && !p && (_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"creating track\", i), m(!0), n(o, i).finally(() => {\n      m(!1);\n    }));\n  }, [a, t, c, p]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    t && (a ? d != null && d.deviceId && s.current !== (d == null ? void 0 : d.deviceId) ? (_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(`switching ${i} device from`, s.current, d.deviceId), h(t, d.deviceId)) : (_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(`unmuting local ${i} track`), t.unmute()) : (_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(`muting ${i} track`), t.mute().then(() => _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(t.mediaStreamTrack))));\n  }, [t, d, a, i]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => () => {\n    t && (_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(`stopping local ${i} track`), t.stop(), t.mute());\n  }, []), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    g(u == null ? void 0 : u.find((v) => v.deviceId === o));\n  }, [o, u]), {\n    selectedDevice: d,\n    localTrack: t,\n    deviceError: c\n  };\n}\nfunction et({\n  defaults: a = {},\n  onValidate: l,\n  onSubmit: i,\n  onError: c,\n  debug: E,\n  joinLabel: p = \"Join Room\",\n  micLabel: m = \"Microphone\",\n  camLabel: u = \"Camera\",\n  userLabel: d = \"Username\",\n  persistUserChoices: g = !0,\n  ...t\n}) {\n  const [r, o] = react__WEBPACK_IMPORTED_MODULE_0__.useState(_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ap), S = {\n    ...a.audioDeviceId !== void 0 && { audioDeviceId: a.audioDeviceId },\n    ...a.videoDeviceId !== void 0 && { videoDeviceId: a.videoDeviceId },\n    ...a.audioEnabled !== void 0 && { audioEnabled: a.audioEnabled },\n    ...a.videoEnabled !== void 0 && { videoEnabled: a.videoEnabled },\n    ...a.username !== void 0 && { username: a.username }\n  }, {\n    userChoices: n,\n    saveAudioInputDeviceId: h,\n    saveAudioInputEnabled: s,\n    saveVideoInputDeviceId: v,\n    saveVideoInputEnabled: f,\n    saveUsername: b\n  } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.y)({\n    defaults: S,\n    preventSave: !g,\n    preventLoad: !g\n  }), [w, L] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n.audioEnabled), [I, D] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n.videoEnabled), [T, $] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    n.audioDeviceId\n  ), [k, N] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    n.videoDeviceId\n  ), [V, ae] = react__WEBPACK_IMPORTED_MODULE_0__.useState(n.username);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    s(w);\n  }, [w, s]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    f(I);\n  }, [I, f]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    h(T);\n  }, [T, h]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    v(k);\n  }, [k, v]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    b(V);\n  }, [V, b]);\n  const A = ze(\n    {\n      audio: w ? { deviceId: n.audioDeviceId } : !1,\n      video: I ? { deviceId: n.videoDeviceId } : !1\n    },\n    c\n  ), U = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), M = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => A == null ? void 0 : A.filter((C) => C.kind === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Kind.Video)[0],\n    [A]\n  ), ne = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (M) {\n      const { facingMode: C } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_1__.facingModeFromLocalTrack)(M);\n      return C;\n    } else\n      return \"undefined\";\n  }, [M]), j = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => A == null ? void 0 : A.filter((C) => C.kind === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Kind.Audio)[0],\n    [A]\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => (U.current && M && (M.unmute(), M.attach(U.current)), () => {\n    M == null || M.detach();\n  }), [M]);\n  const [ce, se] = react__WEBPACK_IMPORTED_MODULE_0__.useState(), _ = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (C) => typeof l == \"function\" ? l(C) : C.username !== \"\",\n    [l]\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const C = {\n      username: V,\n      videoEnabled: I,\n      videoDeviceId: k,\n      audioEnabled: w,\n      audioDeviceId: T\n    };\n    o(C), se(_(C));\n  }, [V, I, _, w, T, k]);\n  function ie(C) {\n    C.preventDefault(), _(r) ? typeof i == \"function\" && i(r) : _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.warn(\"Validation failed with: \", r);\n  }\n  return W(), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-prejoin\", ...t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-video-container\" }, M && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", { ref: U, width: \"1280\", height: \"720\", \"data-lk-facing-mode\": ne }), (!M || !I) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-camera-off-note\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.b, null))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-container\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group audio\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.T,\n    {\n      initialState: w,\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n      onChange: (C) => L(C)\n    },\n    m\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    O,\n    {\n      initialSelection: T,\n      kind: \"audioinput\",\n      disabled: !j,\n      tracks: { audioinput: j },\n      onActiveDeviceChange: (C, F) => $(F)\n    }\n  ))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group video\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.T,\n    {\n      initialState: I,\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera,\n      onChange: (C) => D(C)\n    },\n    u\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    O,\n    {\n      initialSelection: k,\n      kind: \"videoinput\",\n      disabled: !M,\n      tracks: { videoinput: M },\n      onActiveDeviceChange: (C, F) => N(F)\n    }\n  )))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", { className: \"lk-username-container\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"input\",\n    {\n      className: \"lk-form-control\",\n      id: \"username\",\n      name: \"username\",\n      type: \"text\",\n      defaultValue: V,\n      placeholder: d,\n      onChange: (C) => ae(C.target.value),\n      autoComplete: \"off\"\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"button\",\n    {\n      className: \"lk-button lk-join-button\",\n      type: \"submit\",\n      onClick: ie,\n      disabled: !ce\n    },\n    p\n  )), E && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", null, \"User Choices:\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", { className: \"lk-list\", style: { overflow: \"hidden\", maxWidth: \"15rem\" } }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Username: \", `${r.username}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Video Enabled: \", `${r.videoEnabled}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Audio Enabled: \", `${r.audioEnabled}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Video Device: \", `${r.videoDeviceId}`), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Audio Device: \", `${r.audioDeviceId}`))));\n}\nfunction Ke({ props: a }) {\n  const { dispatch: l, state: i } = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a)().widget, c = \"lk-button lk-settings-toggle\";\n  return { mergedProps: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => (0,_room_BeQGUa5w_mjs__WEBPACK_IMPORTED_MODULE_5__.m)(a, {\n    className: c,\n    onClick: () => {\n      l && l({ msg: \"toggle_settings\" });\n    },\n    \"aria-pressed\": i != null && i.showSettings ? \"true\" : \"false\"\n  }), [a, c, l, i]) };\n}\nconst Ge = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  function(l, i) {\n    const { mergedProps: c } = Ke({ props: l });\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { ref: i, ...c }, l.children);\n  }\n);\nfunction te({\n  variation: a,\n  controls: l,\n  saveUserChoices: i = !0,\n  onDeviceError: c,\n  ...E\n}) {\n  var $;\n  const [p, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), u = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.j)();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var k, N;\n    ((k = u == null ? void 0 : u.widget.state) == null ? void 0 : k.showChat) !== void 0 && m((N = u == null ? void 0 : u.widget.state) == null ? void 0 : N.showChat);\n  }, [($ = u == null ? void 0 : u.widget.state) == null ? void 0 : $.showChat]);\n  const g = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.z)(`(max-width: ${p ? 1e3 : 760}px)`) ? \"minimal\" : \"verbose\";\n  a ?? (a = g);\n  const t = { leave: !0, ...l }, r = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.A)();\n  r ? (t.camera ?? (t.camera = r.canPublish), t.microphone ?? (t.microphone = r.canPublish), t.screenShare ?? (t.screenShare = r.canPublish), t.chat ?? (t.chat = r.canPublishData && (l == null ? void 0 : l.chat))) : (t.camera = !1, t.chat = !1, t.microphone = !1, t.screenShare = !1);\n  const o = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => a === \"minimal\" || a === \"verbose\",\n    [a]\n  ), S = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => a === \"textOnly\" || a === \"verbose\",\n    [a]\n  ), n = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.aq)(), [h, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), v = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (k) => {\n      s(k);\n    },\n    [s]\n  ), f = (0,_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.m)({ className: \"lk-control-bar\" }, E), {\n    saveAudioInputEnabled: b,\n    saveVideoInputEnabled: w,\n    saveAudioInputDeviceId: L,\n    saveVideoInputDeviceId: I\n  } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.y)({ preventSave: !i }), D = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (k, N) => N ? b(k) : null,\n    [b]\n  ), T = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (k, N) => N ? w(k) : null,\n    [w]\n  );\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ...f }, t.microphone && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.T,\n    {\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n      showIcon: o,\n      onChange: D,\n      onDeviceError: (k) => c == null ? void 0 : c({ source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone, error: k })\n    },\n    S && \"Microphone\"\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    O,\n    {\n      kind: \"audioinput\",\n      onActiveDeviceChange: (k, N) => L(N ?? \"\")\n    }\n  ))), t.camera && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.T,\n    {\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera,\n      showIcon: o,\n      onChange: T,\n      onDeviceError: (k) => c == null ? void 0 : c({ source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera, error: k })\n    },\n    S && \"Camera\"\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    O,\n    {\n      kind: \"videoinput\",\n      onActiveDeviceChange: (k, N) => I(N ?? \"\")\n    }\n  ))), t.screenShare && n && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.T,\n    {\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare,\n      captureOptions: { audio: !0, selfBrowserSurface: \"include\" },\n      showIcon: o,\n      onChange: v,\n      onDeviceError: (k) => c == null ? void 0 : c({ source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare, error: k })\n    },\n    S && (h ? \"Stop screen share\" : \"Share screen\")\n  ), t.chat && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.C, null, o && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.d, null), S && \"Chat\"), t.settings && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ge, null, o && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.e, null), S && \"Settings\"), t.leave && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.D, null, o && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.f, null), S && \"Leave\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.g, null));\n}\nfunction tt({\n  chatMessageFormatter: a,\n  chatMessageDecoder: l,\n  chatMessageEncoder: i,\n  SettingsComponent: c,\n  ...E\n}) {\n  var n, h;\n  const [p, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    showChat: !1,\n    unreadMessages: 0,\n    showSettings: !1\n  }), u = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), d = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(\n    [\n      { source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Camera, withPlaceholder: !0 },\n      { source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare, withPlaceholder: !1 }\n    ],\n    { updateOnlyOn: [livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.ActiveSpeakersChanged], onlySubscribed: !1 }\n  ), g = (s) => {\n    _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"updating widget state\", s), m(s);\n  }, t = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.ar)(), r = d.filter(_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a1).filter((s) => s.publication.source === livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.ScreenShare), o = (n = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.B)(t)) == null ? void 0 : n[0], S = d.filter((s) => !(0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.as)(s, o));\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var s, v, f, b, w, L;\n    if (r.some((I) => I.publication.isSubscribed) && u.current === null ? (_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"Auto set screen share focus:\", { newScreenShareTrack: r[0] }), (v = (s = t.pin).dispatch) == null || v.call(s, { msg: \"set_pin\", trackReference: r[0] }), u.current = r[0]) : u.current && !r.some(\n      (I) => {\n        var D, T;\n        return I.publication.trackSid === ((T = (D = u.current) == null ? void 0 : D.publication) == null ? void 0 : T.trackSid);\n      }\n    ) && (_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.l.debug(\"Auto clearing screen share focus.\"), (b = (f = t.pin).dispatch) == null || b.call(f, { msg: \"clear_pin\" }), u.current = null), o && !(0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(o)) {\n      const I = d.find(\n        (D) => D.participant.identity === o.participant.identity && D.source === o.source\n      );\n      I !== o && (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.a1)(I) && ((L = (w = t.pin).dispatch) == null || L.call(w, { msg: \"set_pin\", trackReference: I }));\n    }\n  }, [\n    r.map((s) => `${s.publication.trackSid}_${s.publication.isSubscribed}`).join(),\n    (h = o == null ? void 0 : o.publication) == null ? void 0 : h.trackSid,\n    d\n  ]), W(), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-video-conference\", ...E }, (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_3__.at)() && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.L,\n    {\n      value: t,\n      onWidgetChange: g\n    },\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-video-conference-inner\" }, o ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-focus-layout-wrapper\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.F, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.h, { tracks: S }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.P, null)), o && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.i, { trackRef: o }))) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-grid-layout-wrapper\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.G, { tracks: d }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.P, null))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(te, { controls: { chat: !0, settings: !!c } })),\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      ee,\n      {\n        style: { display: p.showChat ? \"grid\" : \"none\" },\n        messageFormatter: a,\n        messageEncoder: i,\n        messageDecoder: l\n      }\n    ),\n    c && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"div\",\n      {\n        className: \"lk-settings-menu-modal\",\n        style: { display: p.showSettings ? \"block\" : \"none\" }\n      },\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(c, null)\n    )\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.R, null), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.j, null));\n}\nfunction at({ ...a }) {\n  const [l, i] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    showChat: !1,\n    unreadMessages: 0\n  }), c = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.t)([livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone]);\n  return W(), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.L, { onWidgetChange: i }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-audio-conference\", ...a }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-audio-conference-stage\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.k, { tracks: c }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.l, null))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    te,\n    {\n      controls: { microphone: !0, screenShare: !1, camera: !1, chat: !0 }\n    }\n  ), l.showChat && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ee, null)));\n}\nfunction nt({\n  controls: a,\n  saveUserChoices: l = !0,\n  onDeviceError: i,\n  ...c\n}) {\n  const E = { leave: !0, microphone: !0, ...a }, p = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.A)(), { microphoneTrack: m, localParticipant: u } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.C)(), d = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    participant: u,\n    source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n    publication: m\n  }), [u, m]);\n  p ? E.microphone ?? (E.microphone = p.canPublish) : E.microphone = !1;\n  const g = (0,_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.m)({ className: \"lk-agent-control-bar\" }, c), { saveAudioInputEnabled: t, saveAudioInputDeviceId: r } = (0,_hooks_C6T19zG6_mjs__WEBPACK_IMPORTED_MODULE_2__.y)({\n    preventSave: !l\n  }), o = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (S, n) => {\n      n && t(S);\n    },\n    [t]\n  );\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ...g }, E.microphone && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    _components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.T,\n    {\n      source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone,\n      showIcon: !0,\n      onChange: o,\n      onDeviceError: (S) => i == null ? void 0 : i({ source: livekit_client__WEBPACK_IMPORTED_MODULE_1__.Track.Source.Microphone, error: S })\n    },\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.B, { trackRef: d, barCount: 7, options: { minHeight: 5 } })\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"lk-button-group-menu\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    O,\n    {\n      kind: \"audioinput\",\n      onActiveDeviceChange: (S, n) => r(n ?? \"\")\n    }\n  ))), E.leave && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.D, null, \"Disconnect\"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_Y1IPllFz_mjs__WEBPACK_IMPORTED_MODULE_4__.g, null));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/prefabs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/room-BeQGUa5w.mjs":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/room-BeQGUa5w.mjs ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   L: () => (/* binding */ z),\n/* harmony export */   c: () => (/* binding */ j),\n/* harmony export */   m: () => (/* binding */ U),\n/* harmony export */   u: () => (/* binding */ T)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.2.14_react-dom@18.3.1_react@18.3.1__react@18.3.1_sass@1.80.3/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contexts-BggYqn0S.mjs */ \"(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/contexts-BggYqn0S.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/.pnpm/livekit-client@2.5.9/node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n\n\n\nfunction L(n) {\n  var e, o, t = \"\";\n  if (typeof n == \"string\" || typeof n == \"number\") t += n;\n  else if (typeof n == \"object\") if (Array.isArray(n)) {\n    var r = n.length;\n    for (e = 0; e < r; e++) n[e] && (o = L(n[e])) && (t && (t += \" \"), t += o);\n  } else for (o in n) n[o] && (t && (t += \" \"), t += o);\n  return t;\n}\nfunction j() {\n  for (var n, e, o = 0, t = \"\", r = arguments.length; o < r; o++) (n = arguments[o]) && (e = L(n)) && (t && (t += \" \"), t += e);\n  return t;\n}\nfunction O(...n) {\n  return (...e) => {\n    for (const o of n)\n      if (typeof o == \"function\")\n        try {\n          o(...e);\n        } catch (t) {\n          console.error(t);\n        }\n  };\n}\nfunction U(...n) {\n  const e = { ...n[0] };\n  for (let o = 1; o < n.length; o++) {\n    const t = n[o];\n    for (const r in t) {\n      const l = e[r], f = t[r];\n      typeof l == \"function\" && typeof f == \"function\" && // This is a lot faster than a regex.\n      r[0] === \"o\" && r[1] === \"n\" && r.charCodeAt(2) >= /* 'A' */\n      65 && r.charCodeAt(2) <= /* 'Z' */\n      90 ? e[r] = O(l, f) : (r === \"className\" || r === \"UNSAFE_className\") && typeof l == \"string\" && typeof f == \"string\" ? e[r] = j(l, f) : e[r] = f !== void 0 ? f : l;\n    }\n  }\n  return e;\n}\nconst J = {\n  connect: !0,\n  audio: !1,\n  video: !1\n};\nfunction T(n) {\n  const {\n    token: e,\n    serverUrl: o,\n    options: t,\n    room: r,\n    connectOptions: l,\n    connect: f,\n    audio: p,\n    video: g,\n    screen: v,\n    onConnected: E,\n    onDisconnected: R,\n    onError: c,\n    onMediaDeviceFailure: h,\n    onEncryptionError: y,\n    simulateParticipants: S,\n    ...P\n  } = { ...J, ...n };\n  t && r && _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.warn(\n    \"when using a manually created room, the options object will be ignored. set the desired options directly when creating the room instead.\"\n  );\n  const [i, D] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    D(r ?? new livekit_client__WEBPACK_IMPORTED_MODULE_1__.Room(t));\n  }, [r]);\n  const A = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const { className: s } = (0,_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.s)();\n    return U(P, { className: s });\n  }, [P]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!i) return;\n    const s = () => {\n      const m = i.localParticipant;\n      _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"trying to publish local tracks\"), Promise.all([\n        m.setMicrophoneEnabled(!!p, typeof p != \"boolean\" ? p : void 0),\n        m.setCameraEnabled(!!g, typeof g != \"boolean\" ? g : void 0),\n        m.setScreenShareEnabled(!!v, typeof v != \"boolean\" ? v : void 0)\n      ]).catch((C) => {\n        _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.warn(C), c == null || c(C);\n      });\n    }, b = (m) => {\n      const C = livekit_client__WEBPACK_IMPORTED_MODULE_1__.MediaDeviceFailure.getFailure(m);\n      h == null || h(C);\n    }, k = (m) => {\n      y == null || y(m);\n    };\n    return i.on(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.SignalConnected, s).on(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.MediaDevicesError, b).on(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.EncryptionError, k), () => {\n      i.off(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.SignalConnected, s).off(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.MediaDevicesError, b).off(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.EncryptionError, k);\n    };\n  }, [i, p, g, v, c, y, h]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (i) {\n      if (S) {\n        i.simulateParticipants({\n          participants: {\n            count: S\n          },\n          publish: {\n            audio: !0,\n            useRealTracks: !0\n          }\n        });\n        return;\n      }\n      if (!e) {\n        _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"no token yet\");\n        return;\n      }\n      if (!o) {\n        _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.warn(\"no livekit url provided\"), c == null || c(Error(\"no livekit url provided\"));\n        return;\n      }\n      f ? (_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"connecting\"), i.connect(o, e, l).catch((s) => {\n        _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.warn(s), c == null || c(s);\n      })) : (_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.debug(\"disconnecting because connect is false\"), i.disconnect());\n    }\n  }, [\n    f,\n    e,\n    JSON.stringify(l),\n    i,\n    c,\n    o,\n    S\n  ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!i) return;\n    const s = (b) => {\n      switch (b) {\n        case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Disconnected:\n          R && R();\n          break;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_1__.ConnectionState.Connected:\n          E && E();\n          break;\n      }\n    };\n    return i.on(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.ConnectionStateChanged, s), () => {\n      i.off(livekit_client__WEBPACK_IMPORTED_MODULE_1__.RoomEvent.ConnectionStateChanged, s);\n    };\n  }, [e, E, R, i]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (i)\n      return () => {\n        _contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.l.info(\"disconnecting on onmount\"), i.disconnect();\n      };\n  }, [i]), { room: i, htmlProps: A };\n}\nconst z = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function(e, o) {\n  const { room: t, htmlProps: r } = T(e);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: o, ...r }, t && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.R.Provider, { value: t }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_BggYqn0S_mjs__WEBPACK_IMPORTED_MODULE_2__.L.Provider, { value: e.featureFlags }, e.children)));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@livekit+components-react@2.6.5_@livekit+krisp-noise-filter@0.2.12_livekit-client@2.5.9__live_lav6gyb7z663jxlneix5psepey/node_modules/@livekit/components-react/dist/room-BeQGUa5w.mjs\n");

/***/ })

};
;